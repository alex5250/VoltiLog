
VoltLogV2-MCU-Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd18  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800be28  0800be28  0000ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf1c  0800bf1c  0000d188  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf1c  0800bf1c  0000d188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf1c  0800bf1c  0000d188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf1c  0800bf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf20  0800bf20  0000cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800bf24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b8  20000188  0800c0ac  0000d188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002840  0800c0ac  0000d840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d79  00000000  00000000  0000d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d9  00000000  00000000  00030f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc8  00000000  00000000  00036508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f0  00000000  00000000  000382d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007a0c  00000000  00000000  000399c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255c6  00000000  00000000  000413cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c9fd  00000000  00000000  00066992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010338f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed4  00000000  00000000  001033d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000188 	.word	0x20000188
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be10 	.word	0x0800be10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000018c 	.word	0x2000018c
 800014c:	0800be10 	.word	0x0800be10

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb10 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81e 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8fe 	bl	800035c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000160:	f000 f876 	bl	8000250 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000164:	f000 f8a2 	bl	80002ac <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f8ce 	bl	8000308 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800016c:	f006 f870 	bl	8006250 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f008 fbce 	bl	8008910 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <main+0x3c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4805      	ldr	r0, [pc, #20]	@ (8000190 <main+0x40>)
 800017a:	f008 fc2f 	bl	80089dc <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a04      	ldr	r2, [pc, #16]	@ (8000194 <main+0x44>)
 8000182:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000184:	f008 fbf6 	bl	8008974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	bf00      	nop
 800018a:	e7fd      	b.n	8000188 <main+0x38>
 800018c:	0800be90 	.word	0x0800be90
 8000190:	080003b9 	.word	0x080003b9
 8000194:	20000294 	.word	0x20000294

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	@ 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f00b fd4c 	bl	800bc44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80001e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80001e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fc36 	bl	8002a60 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001fa:	f000 f8f9 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000202:	2301      	movs	r3, #1
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f002 fea3 	bl	8002f64 <HAL_RCC_ClockConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000224:	f000 f8e4 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000228:	2310      	movs	r3, #16
 800022a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800022c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000230:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f003 f87b 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000240:	f000 f8d6 	bl	80003f0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000244:	f002 ff78 	bl	8003138 <HAL_RCC_EnableCSS>
}
 8000248:	bf00      	nop
 800024a:	3750      	adds	r7, #80	@ 0x50
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000256:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <MX_I2C1_Init+0x54>)
 8000258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800025a:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <MX_I2C1_Init+0x50>)
 800025c:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <MX_I2C1_Init+0x58>)
 800025e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000260:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000266:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <MX_I2C1_Init+0x50>)
 800026e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <MX_I2C1_Init+0x50>)
 800028e:	f000 fd09 	bl	8000ca4 <HAL_I2C_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 f8aa 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200001a4 	.word	0x200001a4
 80002a4:	40005400 	.word	0x40005400
 80002a8:	000186a0 	.word	0x000186a0

080002ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002b2:	4a13      	ldr	r2, [pc, #76]	@ (8000300 <MX_I2C2_Init+0x54>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002b6:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <MX_I2C2_Init+0x58>)
 80002ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002dc:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e2:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002e8:	4804      	ldr	r0, [pc, #16]	@ (80002fc <MX_I2C2_Init+0x50>)
 80002ea:	f000 fcdb 	bl	8000ca4 <HAL_I2C_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002f4:	f000 f87c 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200001f8 	.word	0x200001f8
 8000300:	40005800 	.word	0x40005800
 8000304:	000186a0 	.word	0x000186a0

08000308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	@ (8000358 <MX_USART1_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000340:	f003 faf6 	bl	8003930 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f851 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000024c 	.word	0x2000024c
 8000358:	40013800 	.word	0x40013800

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0320 	and.w	r3, r3, #32
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_GPIO_Init+0x58>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0308 	and.w	r3, r3, #8
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a07      	ldr	r2, [pc, #28]	@ (80003b4 <MX_GPIO_Init+0x58>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <MX_GPIO_Init+0x58>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003c0:	f00a ffe4 	bl	800b38c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f008 fbb3 	bl	8008b30 <osDelay>
 80003ca:	e7fb      	b.n	80003c4 <StartDefaultTask+0xc>

080003cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d101      	bne.n	80003e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003de:	f000 f9e1 	bl	80007a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40012c00 	.word	0x40012c00

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <HAL_MspInit+0x68>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a17      	ldr	r2, [pc, #92]	@ (8000464 <HAL_MspInit+0x68>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <HAL_MspInit+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <HAL_MspInit+0x68>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a11      	ldr	r2, [pc, #68]	@ (8000464 <HAL_MspInit+0x68>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <HAL_MspInit+0x68>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	210f      	movs	r1, #15
 8000436:	f06f 0001 	mvn.w	r0, #1
 800043a:	f000 fa84 	bl	8000946 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800043e:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <HAL_MspInit+0x6c>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <HAL_MspInit+0x6c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	@ 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a2b      	ldr	r2, [pc, #172]	@ (8000534 <HAL_I2C_MspInit+0xc8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d124      	bne.n	80004d6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b2a      	ldr	r3, [pc, #168]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a29      	ldr	r2, [pc, #164]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b27      	ldr	r3, [pc, #156]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a8:	2312      	movs	r3, #18
 80004aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	4619      	mov	r1, r3
 80004b6:	4821      	ldr	r0, [pc, #132]	@ (800053c <HAL_I2C_MspInit+0xd0>)
 80004b8:	f000 fa70 	bl	800099c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80004d4:	e029      	b.n	800052a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <HAL_I2C_MspInit+0xd4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d124      	bne.n	800052a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fe:	2312      	movs	r3, #18
 8000500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0318 	add.w	r3, r7, #24
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <HAL_I2C_MspInit+0xd0>)
 800050e:	f000 fa45 	bl	800099c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_I2C_MspInit+0xcc>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	@ 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40005400 	.word	0x40005400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010c00 	.word	0x40010c00
 8000540:	40005800 	.word	0x40005800

08000544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <HAL_UART_MspInit+0x8c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d131      	bne.n	80005c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a1a      	ldr	r2, [pc, #104]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <HAL_UART_MspInit+0x94>)
 80005aa:	f000 f9f7 	bl	800099c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <HAL_UART_MspInit+0x94>)
 80005c4:	f000 f9ea 	bl	800099c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	@ 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <HAL_InitTick+0xd0>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a2d      	ldr	r2, [pc, #180]	@ (80006ac <HAL_InitTick+0xd0>)
 80005f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <HAL_InitTick+0xd0>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fe23 	bl	8003260 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800061a:	f002 fe0d 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 800061e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000622:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <HAL_InitTick+0xd4>)
 8000624:	fba2 2303 	umull	r2, r3, r2, r3
 8000628:	0c9b      	lsrs	r3, r3, #18
 800062a:	3b01      	subs	r3, #1
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <HAL_InitTick+0xd8>)
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <HAL_InitTick+0xdc>)
 8000632:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <HAL_InitTick+0xd8>)
 8000636:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800063a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800063c:	4a1d      	ldr	r2, [pc, #116]	@ (80006b4 <HAL_InitTick+0xd8>)
 800063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000640:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <HAL_InitTick+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <HAL_InitTick+0xd8>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <HAL_InitTick+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <HAL_InitTick+0xd8>)
 8000656:	f002 ff21 	bl	800349c <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000664:	2b00      	cmp	r3, #0
 8000666:	d11b      	bne.n	80006a0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000668:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <HAL_InitTick+0xd8>)
 800066a:	f002 ff6f 	bl	800354c <HAL_TIM_Base_Start_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000674:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000678:	2b00      	cmp	r3, #0
 800067a:	d111      	bne.n	80006a0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800067c:	2019      	movs	r0, #25
 800067e:	f000 f97e 	bl	800097e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d808      	bhi.n	800069a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	2019      	movs	r0, #25
 800068e:	f000 f95a 	bl	8000946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <HAL_InitTick+0xe0>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	e002      	b.n	80006a0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3730      	adds	r7, #48	@ 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	431bde83 	.word	0x431bde83
 80006b4:	20000298 	.word	0x20000298
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	20000004 	.word	0x20000004

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80006c4:	f002 fdfc 	bl	80032c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x8>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006fe:	f000 fd3a 	bl	8001176 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200021a0 	.word	0x200021a0

0800070c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <TIM1_UP_IRQHandler+0x10>)
 8000712:	f002 ff6d 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000298 	.word	0x20000298

08000720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800072c:	f7ff fff8 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480b      	ldr	r0, [pc, #44]	@ (8000760 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000732:	490c      	ldr	r1, [pc, #48]	@ (8000764 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a09      	ldr	r2, [pc, #36]	@ (800076c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000748:	4c09      	ldr	r4, [pc, #36]	@ (8000770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000756:	f00b fad3 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fcf9 	bl	8000150 <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000768:	0800bf24 	.word	0x0800bf24
  ldr r2, =_sbss
 800076c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000770:	20002840 	.word	0x20002840

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8d1 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	200f      	movs	r0, #15
 8000790:	f7ff ff24 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe32 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	@ (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	200002e0 	.word	0x200002e0

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	@ (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	200002e0 	.word	0x200002e0

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4906      	ldr	r1, [pc, #24]	@ (8000874 <__NVIC_EnableIRQ+0x34>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	@ 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	@ 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff4f 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff64 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ffb2 	bl	80008cc <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff81 	bl	8000878 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff57 	bl	8000840 <__NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b08b      	sub	sp, #44	@ 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e169      	b.n	8000c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8158 	bne.w	8000c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a9a      	ldr	r2, [pc, #616]	@ (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d05e      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009d8:	4a98      	ldr	r2, [pc, #608]	@ (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d875      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009de:	4a98      	ldr	r2, [pc, #608]	@ (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d058      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009e4:	4a96      	ldr	r2, [pc, #600]	@ (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d86f      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009ea:	4a96      	ldr	r2, [pc, #600]	@ (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d052      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009f0:	4a94      	ldr	r2, [pc, #592]	@ (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d869      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009f6:	4a94      	ldr	r2, [pc, #592]	@ (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d04c      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009fc:	4a92      	ldr	r2, [pc, #584]	@ (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d863      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a02:	4a92      	ldr	r2, [pc, #584]	@ (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d046      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 8000a08:	4a90      	ldr	r2, [pc, #576]	@ (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d85d      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d82a      	bhi.n	8000a68 <HAL_GPIO_Init+0xcc>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d859      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <HAL_GPIO_Init+0x80>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000ac5 	.word	0x08000ac5
 8000a2c:	08000acb 	.word	0x08000acb
 8000a30:	08000acb 	.word	0x08000acb
 8000a34:	08000acb 	.word	0x08000acb
 8000a38:	08000acb 	.word	0x08000acb
 8000a3c:	08000acb 	.word	0x08000acb
 8000a40:	08000acb 	.word	0x08000acb
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000acb 	.word	0x08000acb
 8000a4c:	08000acb 	.word	0x08000acb
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000acb 	.word	0x08000acb
 8000a58:	08000acb 	.word	0x08000acb
 8000a5c:	08000acb 	.word	0x08000acb
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	4a79      	ldr	r2, [pc, #484]	@ (8000c50 <HAL_GPIO_Init+0x2b4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e029      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e024      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01f      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e01a      	b.n	8000acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e013      	b.n	8000acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e009      	b.n	8000acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e003      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x130>
          break;
 8000aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	@ 0xff
 8000ad0:	d801      	bhi.n	8000ad6 <HAL_GPIO_Init+0x13a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	e001      	b.n	8000ada <HAL_GPIO_Init+0x13e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2bff      	cmp	r3, #255	@ 0xff
 8000ae0:	d802      	bhi.n	8000ae8 <HAL_GPIO_Init+0x14c>
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x152>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	3b08      	subs	r3, #8
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	210f      	movs	r1, #15
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	401a      	ands	r2, r3
 8000b00:	6a39      	ldr	r1, [r7, #32]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80b1 	beq.w	8000c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b4a      	ldr	r3, [pc, #296]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b34:	4a48      	ldr	r2, [pc, #288]	@ (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a40      	ldr	r2, [pc, #256]	@ (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	@ (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1e8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1e0>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b9a:	492f      	ldr	r1, [pc, #188]	@ (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	492c      	ldr	r1, [pc, #176]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	608b      	str	r3, [r1, #8]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4928      	ldr	r1, [pc, #160]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4922      	ldr	r1, [pc, #136]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60cb      	str	r3, [r1, #12]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	491e      	ldr	r1, [pc, #120]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4918      	ldr	r1, [pc, #96]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c12:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4914      	ldr	r1, [pc, #80]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d021      	beq.n	8000c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	490e      	ldr	r1, [pc, #56]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	600b      	str	r3, [r1, #0]
 8000c38:	e021      	b.n	8000c7e <HAL_GPIO_Init+0x2e2>
 8000c3a:	bf00      	nop
 8000c3c:	10320000 	.word	0x10320000
 8000c40:	10310000 	.word	0x10310000
 8000c44:	10220000 	.word	0x10220000
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4909      	ldr	r1, [pc, #36]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	3301      	adds	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f ae8e 	bne.w	80009b0 <HAL_GPIO_Init+0x14>
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	372c      	adds	r7, #44	@ 0x2c
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e12b      	b.n	8000f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fbce 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2224      	movs	r2, #36	@ 0x24
 8000cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0201 	bic.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d08:	f002 fa82 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8000d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a81      	ldr	r2, [pc, #516]	@ (8000f18 <HAL_I2C_Init+0x274>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d807      	bhi.n	8000d28 <HAL_I2C_Init+0x84>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4a80      	ldr	r2, [pc, #512]	@ (8000f1c <HAL_I2C_Init+0x278>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bf94      	ite	ls
 8000d20:	2301      	movls	r3, #1
 8000d22:	2300      	movhi	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	e006      	b.n	8000d36 <HAL_I2C_Init+0x92>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f20 <HAL_I2C_Init+0x27c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	bf94      	ite	ls
 8000d30:	2301      	movls	r3, #1
 8000d32:	2300      	movhi	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0e7      	b.n	8000f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4a78      	ldr	r2, [pc, #480]	@ (8000f24 <HAL_I2C_Init+0x280>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	0c9b      	lsrs	r3, r3, #18
 8000d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8000f18 <HAL_I2C_Init+0x274>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d802      	bhi.n	8000d78 <HAL_I2C_Init+0xd4>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3301      	adds	r3, #1
 8000d76:	e009      	b.n	8000d8c <HAL_I2C_Init+0xe8>
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a69      	ldr	r2, [pc, #420]	@ (8000f28 <HAL_I2C_Init+0x284>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	099b      	lsrs	r3, r3, #6
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000d9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	495c      	ldr	r1, [pc, #368]	@ (8000f18 <HAL_I2C_Init+0x274>)
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d819      	bhi.n	8000de0 <HAL_I2C_Init+0x13c>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dba:	1c59      	adds	r1, r3, #1
 8000dbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00a      	beq.n	8000ddc <HAL_I2C_Init+0x138>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	1e59      	subs	r1, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dda:	e051      	b.n	8000e80 <HAL_I2C_Init+0x1dc>
 8000ddc:	2304      	movs	r3, #4
 8000dde:	e04f      	b.n	8000e80 <HAL_I2C_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d111      	bne.n	8000e0c <HAL_I2C_Init+0x168>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1e58      	subs	r0, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6859      	ldr	r1, [r3, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	e012      	b.n	8000e32 <HAL_I2C_Init+0x18e>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1e58      	subs	r0, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	0099      	lsls	r1, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf0c      	ite	eq
 8000e2c:	2301      	moveq	r3, #1
 8000e2e:	2300      	movne	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_Init+0x196>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e022      	b.n	8000e80 <HAL_I2C_Init+0x1dc>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10e      	bne.n	8000e60 <HAL_I2C_Init+0x1bc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1e58      	subs	r0, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6859      	ldr	r1, [r3, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	440b      	add	r3, r1
 8000e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e5e:	e00f      	b.n	8000e80 <HAL_I2C_Init+0x1dc>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1e58      	subs	r0, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6859      	ldr	r1, [r3, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	0099      	lsls	r1, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	6809      	ldr	r1, [r1, #0]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69da      	ldr	r2, [r3, #28]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000eae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6911      	ldr	r1, [r2, #16]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68d2      	ldr	r2, [r2, #12]
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	000186a0 	.word	0x000186a0
 8000f1c:	001e847f 	.word	0x001e847f
 8000f20:	003d08ff 	.word	0x003d08ff
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	10624dd3 	.word	0x10624dd3

08000f2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b08b      	sub	sp, #44	@ 0x2c
 8000f30:	af06      	add	r7, sp, #24
 8000f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0f1      	b.n	8001122 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f00a fbb6 	bl	800b6c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fde7 	bl	8003b38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	687e      	ldr	r6, [r7, #4]
 8000f72:	466d      	mov	r5, sp
 8000f74:	f106 0410 	add.w	r4, r6, #16
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	1d33      	adds	r3, r6, #4
 8000f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f002 fdb1 	bl	8003aec <USB_CoreInit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0c2      	b.n	8001122 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fde2 	bl	8003b6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e040      	b.n	8001030 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3303      	adds	r3, #3
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3338      	adds	r3, #56	@ 0x38
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	333c      	adds	r3, #60	@ 0x3c
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3340      	adds	r3, #64	@ 0x40
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3b9      	bcc.n	8000fae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e044      	b.n	80010ca <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3b5      	bcc.n	8001040 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	687e      	ldr	r6, [r7, #4]
 80010dc:	466d      	mov	r5, sp
 80010de:	f106 0410 	add.w	r4, r6, #16
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	602b      	str	r3, [r5, #0]
 80010ea:	1d33      	adds	r3, r6, #4
 80010ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f002 fd48 	bl	8003b84 <USB_DevInit>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2202      	movs	r2, #2
 80010fe:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00d      	b.n	8001122 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f004 ffdf 	bl	80060de <USB_DevDisconnect>

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800112a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_PCD_Start+0x16>
 800113c:	2302      	movs	r3, #2
 800113e:	e016      	b.n	800116e <HAL_PCD_Start+0x44>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fcdd 	bl	8003b0c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001152:	2101      	movs	r1, #1
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a fd3e 	bl	800bbd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f004 ffb3 	bl	80060ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 ffb5 	bl	80060f2 <USB_ReadInterrupts>
 8001188:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fb48 	bl	800182a <PCD_EP_ISR_Handler>

    return;
 800119a:	e119      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d013      	beq.n	80011ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f00a fafb 	bl	800b7ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f905 	bl	80013d6 <HAL_PCD_SetAddress>

    return;
 80011cc:	e100      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011f0:	e0ee      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001214:	e0dc      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d027      	beq.n	8001270 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0208 	bic.w	r2, r2, #8
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f00a faeb 	bl	800b82c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001268:	b292      	uxth	r2, r2
 800126a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800126e:	e0af      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8083 	beq.w	8001382 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
 8001280:	e010      	b.n	80012a4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	441a      	add	r2, r3
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	b292      	uxth	r2, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	3320      	adds	r3, #32
 8001298:	443b      	add	r3, r7
 800129a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	3301      	adds	r3, #1
 80012a2:	77fb      	strb	r3, [r7, #31]
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d9eb      	bls.n	8001282 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	b292      	uxth	r2, r2
 80012be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	b292      	uxth	r2, r2
 80012d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012da:	bf00      	nop
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f6      	beq.n	80012dc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001300:	b292      	uxth	r2, r2
 8001302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]
 800130a:	e00f      	b.n	800132c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	4611      	mov	r1, r2
 8001314:	7ffa      	ldrb	r2, [r7, #31]
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	440a      	add	r2, r1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3320      	adds	r3, #32
 800131e:	443b      	add	r3, r7
 8001320:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001324:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	3301      	adds	r3, #1
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	2b07      	cmp	r3, #7
 8001330:	d9ec      	bls.n	800130c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0208 	orr.w	r2, r2, #8
 8001344:	b292      	uxth	r2, r2
 8001346:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800135c:	b292      	uxth	r2, r2
 800135e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	b292      	uxth	r2, r2
 8001376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f00a fa3c 	bl	800b7f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001380:	e026      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00f      	beq.n	80013ac <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800139e:	b292      	uxth	r2, r2
 80013a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f00a f9fa 	bl	800b79e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013aa:	e011      	b.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013c8:	b292      	uxth	r2, r2
 80013ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013ce:	bf00      	nop
  }
}
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_PCD_SetAddress+0x1a>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e013      	b.n	8001418 <HAL_PCD_SetAddress+0x42>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fe4b 	bl	80060a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	70fb      	strb	r3, [r7, #3]
 8001432:	460b      	mov	r3, r1
 8001434:	803b      	strh	r3, [r7, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800143e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da0e      	bge.n	8001464 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	705a      	strb	r2, [r3, #1]
 8001462:	e00e      	b.n	8001482 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 0207 	and.w	r2, r3, #7
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	b2da      	uxtb	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800148e:	883a      	ldrh	r2, [r7, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	78ba      	ldrb	r2, [r7, #2]
 8001498:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800149a:	78bb      	ldrb	r3, [r7, #2]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d102      	bne.n	80014a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_EP_Open+0x94>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e00e      	b.n	80014d2 <HAL_PCD_EP_Open+0xb2>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fb94 	bl	8003bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80014d0:	7afb      	ldrb	r3, [r7, #11]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da0e      	bge.n	800150c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	705a      	strb	r2, [r3, #1]
 800150a:	e00e      	b.n	800152a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	f003 0207 	and.w	r2, r3, #7
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	b2da      	uxtb	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_PCD_EP_Close+0x6a>
 8001540:	2302      	movs	r3, #2
 8001542:	e00e      	b.n	8001562 <HAL_PCD_EP_Close+0x88>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 ff0c 	bl	8004370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	460b      	mov	r3, r1
 8001578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	f003 0207 	and.w	r2, r3, #7
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2200      	movs	r2, #0
 80015a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 f8c3 	bl	8004748 <USB_EPStartXfer>

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	f003 0207 	and.w	r2, r3, #7
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2201      	movs	r2, #1
 8001644:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	b2da      	uxtb	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6979      	ldr	r1, [r7, #20]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 f875 	bl	8004748 <USB_EPStartXfer>

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0207 	and.w	r2, r3, #7
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d901      	bls.n	8001686 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e04c      	b.n	8001720 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800168a:	2b00      	cmp	r3, #0
 800168c:	da0e      	bge.n	80016ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	705a      	strb	r2, [r3, #1]
 80016aa:	e00c      	b.n	80016c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_PCD_EP_SetStall+0x7e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e01c      	b.n	8001720 <HAL_PCD_EP_SetStall+0xb8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 fbd8 	bl	8005eaa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	2b00      	cmp	r3, #0
 8001702:	d108      	bne.n	8001716 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f004 fcfd 	bl	8006110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d901      	bls.n	8001746 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e040      	b.n	80017c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da0e      	bge.n	800176c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	705a      	strb	r2, [r3, #1]
 800176a:	e00e      	b.n	800178a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 0207 	and.w	r2, r3, #7
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_PCD_EP_ClrStall+0x82>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e00e      	b.n	80017c8 <HAL_PCD_EP_ClrStall+0xa0>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fbc6 	bl	8005f4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_PCD_EP_Flush+0x1a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e01b      	b.n	8001822 <HAL_PCD_EP_Flush+0x52>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80017f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da09      	bge.n	800180e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f002 f9dc 	bl	8003bc4 <USB_FlushTxFifo>
 800180c:	e004      	b.n	8001818 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 f9e1 	bl	8003bda <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b096      	sub	sp, #88	@ 0x58
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001832:	e3be      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800183c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800184e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 8178 	bne.w	8001b48 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d151      	bne.n	8001908 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001874:	81fb      	strh	r3, [r7, #14]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	89fb      	ldrh	r3, [r7, #14]
 800187c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001884:	b29b      	uxth	r3, r3
 8001886:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3328      	adds	r3, #40	@ 0x28
 800188c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	3302      	adds	r3, #2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	441a      	add	r2, r3
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018c8:	2100      	movs	r1, #0
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f009 ff4d 	bl	800b76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 836a 	beq.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8365 	bne.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001906:	e354      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800190e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800191a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800191e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001922:	2b00      	cmp	r3, #0
 8001924:	d034      	beq.n	8001990 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	3306      	adds	r3, #6
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800194e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001950:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800195c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001964:	b29b      	uxth	r3, r3
 8001966:	f004 fc23 	bl	80061b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b29a      	uxth	r2, r3
 8001972:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001976:	4013      	ands	r3, r2
 8001978:	823b      	strh	r3, [r7, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	8a3a      	ldrh	r2, [r7, #16]
 8001980:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001984:	b292      	uxth	r2, r2
 8001986:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f009 fec1 	bl	800b710 <HAL_PCD_SetupStageCallback>
 800198e:	e310      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001990:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001994:	2b00      	cmp	r3, #0
 8001996:	f280 830c 	bge.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019a6:	4013      	ands	r3, r2
 80019a8:	83fb      	strh	r3, [r7, #30]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	8bfa      	ldrh	r2, [r7, #30]
 80019b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019b4:	b292      	uxth	r2, r2
 80019b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	3306      	adds	r3, #6
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x1f6>
 80019ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fa:	6959      	ldr	r1, [r3, #20]
 80019fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f004 fbd3 	bl	80061b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	441a      	add	r2, r3
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f009 fe8a 	bl	800b734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 82bd 	bne.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
 8001a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a3c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001a40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001a44:	f000 82b5 	beq.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a7e:	d91d      	bls.n	8001abc <PCD_EP_ISR_Handler+0x292>
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <PCD_EP_ISR_Handler+0x270>
 8001a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a96:	3b01      	subs	r3, #1
 8001a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	029b      	lsls	r3, r3, #10
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	e026      	b.n	8001b0a <PCD_EP_ISR_Handler+0x2e0>
 8001abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <PCD_EP_ISR_Handler+0x2b0>
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	801a      	strh	r2, [r3, #0]
 8001ad8:	e017      	b.n	8001b0a <PCD_EP_ISR_Handler+0x2e0>
 8001ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <PCD_EP_ISR_Handler+0x2ca>
 8001aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af0:	3301      	adds	r3, #1
 8001af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b1a:	827b      	strh	r3, [r7, #18]
 8001b1c:	8a7b      	ldrh	r3, [r7, #18]
 8001b1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001b22:	827b      	strh	r3, [r7, #18]
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b2a:	827b      	strh	r3, [r7, #18]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	8a7b      	ldrh	r3, [r7, #18]
 8001b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	8013      	strh	r3, [r2, #0]
 8001b46:	e234      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b5c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f280 80fc 	bge.w	8001d5e <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001b94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b9c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	7b1b      	ldrb	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d125      	bne.n	8001c06 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3306      	adds	r3, #6
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001be6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8092 	beq.w	8001d14 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	6959      	ldr	r1, [r3, #20]
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	88da      	ldrh	r2, [r3, #6]
 8001bfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c00:	f004 fad6 	bl	80061b0 <USB_ReadPMA>
 8001c04:	e086      	b.n	8001d14 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d10a      	bne.n	8001c24 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c12:	461a      	mov	r2, r3
 8001c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f9d9 	bl	8001fce <HAL_PCD_EP_DB_Receive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001c22:	e077      	b.n	8001d14 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c3e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	441a      	add	r2, r3
 8001c50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d024      	beq.n	8001ccc <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	3302      	adds	r3, #2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001caa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001cae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d02e      	beq.n	8001d14 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc0:	891a      	ldrh	r2, [r3, #8]
 8001cc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cc6:	f004 fa73 	bl	80061b0 <USB_ReadPMA>
 8001cca:	e023      	b.n	8001d14 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3306      	adds	r3, #6
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001cf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	6959      	ldr	r1, [r3, #20]
 8001d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0a:	895a      	ldrh	r2, [r3, #10]
 8001d0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d10:	f004 fa4e 	bl	80061b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d1c:	441a      	add	r2, r3
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d2a:	441a      	add	r2, r3
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <PCD_EP_ISR_Handler+0x51a>
 8001d38:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d206      	bcs.n	8001d52 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f009 fcf2 	bl	800b734 <HAL_PCD_DataOutStageCallback>
 8001d50:	e005      	b.n	8001d5e <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fcf5 	bl	8004748 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8123 	beq.w	8001fb2 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbe:	78db      	ldrb	r3, [r3, #3]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 80a2 	bne.w	8001f0a <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dce:	7b1b      	ldrb	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8093 	beq.w	8001efc <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d046      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	785b      	ldrb	r3, [r3, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d126      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x60e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	4413      	add	r3, r2
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	011a      	lsls	r2, r3, #4
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e10:	623b      	str	r3, [r7, #32]
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	e061      	b.n	8001efc <PCD_EP_ISR_Handler+0x6d2>
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d15d      	bne.n	8001efc <PCD_EP_ISR_Handler+0x6d2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	4413      	add	r3, r2
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	011a      	lsls	r2, r3, #4
 8001e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e60:	4413      	add	r3, r2
 8001e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	e045      	b.n	8001efc <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d126      	bne.n	8001ecc <PCD_EP_ISR_Handler+0x6a2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e92:	4413      	add	r3, r2
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	011a      	lsls	r2, r3, #4
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	e017      	b.n	8001efc <PCD_EP_ISR_Handler+0x6d2>
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d113      	bne.n	8001efc <PCD_EP_ISR_Handler+0x6d2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee2:	4413      	add	r3, r2
 8001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	011a      	lsls	r2, r3, #4
 8001eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eee:	4413      	add	r3, r2
 8001ef0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef8:	2200      	movs	r2, #0
 8001efa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f009 fc31 	bl	800b76a <HAL_PCD_DataInStageCallback>
 8001f08:	e053      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d146      	bne.n	8001fa4 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d907      	bls.n	8001f5e <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	e002      	b.n	8001f64 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f009 fbf9 	bl	800b76a <HAL_PCD_DataInStageCallback>
 8001f78:	e01b      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f82:	441a      	add	r2, r3
 8001f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f90:	441a      	add	r2, r3
 8001f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fbd3 	bl	8004748 <USB_EPStartXfer>
 8001fa2:	e006      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f91b 	bl	80021e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f6ff ac38 	blt.w	8001834 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3758      	adds	r7, #88	@ 0x58
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b088      	sub	sp, #32
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07e      	beq.n	80020e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	429a      	cmp	r2, r3
 8002018:	d306      	bcc.n	8002028 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	619a      	str	r2, [r3, #24]
 8002026:	e002      	b.n	800202e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d123      	bne.n	800207e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800204c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002050:	833b      	strh	r3, [r7, #24]
 8002052:	8b3b      	ldrh	r3, [r7, #24]
 8002054:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002058:	833b      	strh	r3, [r7, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	441a      	add	r2, r3
 8002068:	8b3b      	ldrh	r3, [r7, #24]
 800206a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800206e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800207a:	b29b      	uxth	r3, r3
 800207c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01f      	beq.n	80020c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800209e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a2:	82fb      	strh	r3, [r7, #22]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	8afb      	ldrh	r3, [r7, #22]
 80020b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020c8:	8b7b      	ldrh	r3, [r7, #26]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6959      	ldr	r1, [r3, #20]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	891a      	ldrh	r2, [r3, #8]
 80020dc:	8b7b      	ldrh	r3, [r7, #26]
 80020de:	f004 f867 	bl	80061b0 <USB_ReadPMA>
 80020e2:	e07c      	b.n	80021de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	3306      	adds	r3, #6
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	8b7b      	ldrh	r3, [r7, #26]
 8002114:	429a      	cmp	r2, r3
 8002116:	d306      	bcc.n	8002126 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	8b7b      	ldrh	r3, [r7, #26]
 800211e:	1ad2      	subs	r2, r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	619a      	str	r2, [r3, #24]
 8002124:	e002      	b.n	800212c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d123      	bne.n	800217c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800214a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800214e:	83fb      	strh	r3, [r7, #30]
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002156:	83fb      	strh	r3, [r7, #30]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800216c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002178:	b29b      	uxth	r3, r3
 800217a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11f      	bne.n	80021c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800219c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a0:	83bb      	strh	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	8bbb      	ldrh	r3, [r7, #28]
 80021b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021c6:	8b7b      	ldrh	r3, [r7, #26]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	6959      	ldr	r1, [r3, #20]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	895a      	ldrh	r2, [r3, #10]
 80021d8:	8b7b      	ldrh	r3, [r7, #26]
 80021da:	f003 ffe9 	bl	80061b0 <USB_ReadPMA>
    }
  }

  return count;
 80021de:	8b7b      	ldrh	r3, [r7, #26]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0a4      	sub	sp, #144	@ 0x90
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 81dd 	beq.w	80025bc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	3302      	adds	r3, #2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002236:	429a      	cmp	r2, r3
 8002238:	d907      	bls.n	800224a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	e002      	b.n	8002250 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 80b9 	bne.w	80023cc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d126      	bne.n	80022b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	4413      	add	r3, r2
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	011a      	lsls	r2, r3, #4
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	4413      	add	r3, r2
 8002284:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002294:	b29a      	uxth	r2, r3
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	e01a      	b.n	80022e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d116      	bne.n	80022e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022cc:	4413      	add	r3, r2
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	011a      	lsls	r2, r3, #4
 80022d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d8:	4413      	add	r3, r2
 80022da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022de:	633b      	str	r3, [r7, #48]	@ 0x30
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d126      	bne.n	8002342 <HAL_PCD_EP_DB_Transmit+0x15a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	011a      	lsls	r2, r3, #4
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002326:	b29a      	uxth	r2, r3
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233a:	b29a      	uxth	r2, r3
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e017      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d113      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x18a>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	4413      	add	r3, r2
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	011a      	lsls	r2, r3, #4
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	4413      	add	r3, r2
 8002366:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4619      	mov	r1, r3
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f009 f9f6 	bl	800b76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 82fc 	beq.w	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a4:	82fb      	strh	r3, [r7, #22]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	441a      	add	r2, r3
 80023b4:	8afb      	ldrh	r3, [r7, #22]
 80023b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8013      	strh	r3, [r2, #0]
 80023ca:	e2da      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d021      	beq.n	800241a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800240a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800240e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002416:	b29b      	uxth	r3, r3
 8002418:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 82ae 	bne.w	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800242e:	441a      	add	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800243c:	441a      	add	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d30b      	bcc.n	8002466 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	621a      	str	r2, [r3, #32]
 8002464:	e017      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800246e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800247e:	e00a      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d165      	bne.n	800256a <HAL_PCD_EP_DB_Transmit+0x382>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	4413      	add	r3, r2
 80024b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	011a      	lsls	r2, r3, #4
 80024bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024be:	4413      	add	r3, r2
 80024c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024da:	2b3e      	cmp	r3, #62	@ 0x3e
 80024dc:	d91d      	bls.n	800251a <HAL_PCD_EP_DB_Transmit+0x332>
 80024de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x310>
 80024f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024f4:	3b01      	subs	r3, #1
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002500:	b29b      	uxth	r3, r3
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	b29b      	uxth	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002512:	b29a      	uxth	r2, r3
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	e044      	b.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_PCD_EP_DB_Transmit+0x350>
 8002522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002530:	b29a      	uxth	r2, r3
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	e035      	b.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_PCD_EP_DB_Transmit+0x36a>
 800254c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800254e:	3301      	adds	r3, #1
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29a      	uxth	r2, r3
 8002558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800255a:	b29b      	uxth	r3, r3
 800255c:	029b      	lsls	r3, r3, #10
 800255e:	b29b      	uxth	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	e01c      	b.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d118      	bne.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	647b      	str	r3, [r7, #68]	@ 0x44
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002580:	b29b      	uxth	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002586:	4413      	add	r3, r2
 8002588:	647b      	str	r3, [r7, #68]	@ 0x44
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	011a      	lsls	r2, r3, #4
 8002590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002592:	4413      	add	r3, r2
 8002594:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002598:	643b      	str	r3, [r7, #64]	@ 0x40
 800259a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	891a      	ldrh	r2, [r3, #8]
 80025b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f003 fdb6 	bl	8006126 <USB_WritePMA>
 80025ba:	e1e2      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	3306      	adds	r3, #6
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d307      	bcc.n	8002604 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025fc:	1ad2      	subs	r2, r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	619a      	str	r2, [r3, #24]
 8002602:	e002      	b.n	800260a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80c0 	bne.w	8002794 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d126      	bne.n	800266a <HAL_PCD_EP_DB_Transmit+0x482>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002630:	4413      	add	r3, r2
 8002632:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	011a      	lsls	r2, r3, #4
 800263a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800263c:	4413      	add	r3, r2
 800263e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264e:	b29a      	uxth	r2, r3
 8002650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002662:	b29a      	uxth	r2, r3
 8002664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002666:	801a      	strh	r2, [r3, #0]
 8002668:	e01a      	b.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d116      	bne.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	667b      	str	r3, [r7, #100]	@ 0x64
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002686:	4413      	add	r3, r2
 8002688:	667b      	str	r3, [r7, #100]	@ 0x64
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	011a      	lsls	r2, r3, #4
 8002690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002692:	4413      	add	r3, r2
 8002694:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002698:	663b      	str	r3, [r7, #96]	@ 0x60
 800269a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800269c:	2200      	movs	r2, #0
 800269e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12b      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c2:	4413      	add	r3, r2
 80026c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	011a      	lsls	r2, r3, #4
 80026cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ce:	4413      	add	r3, r2
 80026d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e017      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d113      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x54e>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271c:	4413      	add	r3, r2
 800271e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	011a      	lsls	r2, r3, #4
 8002726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002728:	4413      	add	r3, r2
 800272a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800272e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002732:	2200      	movs	r2, #0
 8002734:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f009 f814 	bl	800b76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 811a 	bne.w	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002768:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800277e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800278a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278e:	b29b      	uxth	r3, r3
 8002790:	8013      	strh	r3, [r2, #0]
 8002792:	e0f6      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d121      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027de:	b29b      	uxth	r3, r3
 80027e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 80ca 	bne.w	8002982 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027f6:	441a      	add	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002804:	441a      	add	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	429a      	cmp	r2, r3
 8002814:	d30b      	bcc.n	800282e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002826:	1ad2      	subs	r2, r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	e017      	b.n	800285e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002836:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800283a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002846:	e00a      	b.n	800285e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	657b      	str	r3, [r7, #84]	@ 0x54
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d165      	bne.n	8002938 <HAL_PCD_EP_DB_Transmit+0x750>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002880:	4413      	add	r3, r2
 8002882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	011a      	lsls	r2, r3, #4
 800288a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800288c:	4413      	add	r3, r2
 800288e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289e:	b29a      	uxth	r2, r3
 80028a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80028aa:	d91d      	bls.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x700>
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80028c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028c2:	3b01      	subs	r3, #1
 80028c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4313      	orrs	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	e041      	b.n	800296c <HAL_PCD_EP_DB_Transmit+0x784>
 80028e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x71e>
 80028f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fe:	b29a      	uxth	r2, r3
 8002900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	e032      	b.n	800296c <HAL_PCD_EP_DB_Transmit+0x784>
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_PCD_EP_DB_Transmit+0x738>
 800291a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800291c:	3301      	adds	r3, #1
 800291e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29a      	uxth	r2, r3
 8002926:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002928:	b29b      	uxth	r3, r3
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	b29b      	uxth	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	b29a      	uxth	r2, r3
 8002932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e019      	b.n	800296c <HAL_PCD_EP_DB_Transmit+0x784>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d115      	bne.n	800296c <HAL_PCD_EP_DB_Transmit+0x784>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294e:	4413      	add	r3, r2
 8002950:	657b      	str	r3, [r7, #84]	@ 0x54
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	011a      	lsls	r2, r3, #4
 8002958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295a:	4413      	add	r3, r2
 800295c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002960:	653b      	str	r3, [r7, #80]	@ 0x50
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002966:	b29a      	uxth	r2, r3
 8002968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800296a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6959      	ldr	r1, [r3, #20]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	895a      	ldrh	r2, [r3, #10]
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297c:	b29b      	uxth	r3, r3
 800297e:	f003 fbd2 	bl	8006126 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800299c:	82bb      	strh	r3, [r7, #20]
 800299e:	8abb      	ldrh	r3, [r7, #20]
 80029a0:	f083 0310 	eor.w	r3, r3, #16
 80029a4:	82bb      	strh	r3, [r7, #20]
 80029a6:	8abb      	ldrh	r3, [r7, #20]
 80029a8:	f083 0320 	eor.w	r3, r3, #32
 80029ac:	82bb      	strh	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	441a      	add	r2, r3
 80029bc:	8abb      	ldrh	r3, [r7, #20]
 80029be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3790      	adds	r7, #144	@ 0x90
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	4613      	mov	r3, r2
 80029ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e009      	b.n	8002a26 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a12:	897a      	ldrh	r2, [r7, #10]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a26:	893b      	ldrh	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	80da      	strh	r2, [r3, #6]
 8002a3a:	e00b      	b.n	8002a54 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e272      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8087 	beq.w	8002b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a80:	4b92      	ldr	r3, [pc, #584]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d112      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
 8002a98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa6:	4b89      	ldr	r3, [pc, #548]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d06c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x12c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d168      	bne.n	8002b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e24c      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x76>
 8002ac8:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a7f      	ldr	r2, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0xbc>
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a71      	ldr	r2, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fd fe44 	bl	80007c8 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fd fe40 	bl	80007c8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e200      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe4>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd fe30 	bl	80007c8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fd fe2c 	bl	80007c8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1ec      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x10c>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
 8002bb2:	4b46      	ldr	r3, [pc, #280]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c0      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4939      	ldr	r1, [pc, #228]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fde5 	bl	80007c8 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fd fde1 	bl	80007c8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4927      	ldr	r1, [pc, #156]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fd fdc4 	bl	80007c8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fd fdc0 	bl	80007c8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e180      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03a      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b17      	ldr	r3, [pc, #92]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fd fda4 	bl	80007c8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fd fda0 	bl	80007c8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e160      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 fb20 	bl	80032e8 <RCC_Delay>
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fd fd8a 	bl	80007c8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fd fd86 	bl	80007c8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d908      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e146      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	42420000 	.word	0x42420000
 8002cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b92      	ldr	r3, [pc, #584]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e9      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a6 	beq.w	8002e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a87      	ldr	r2, [pc, #540]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fd fd47 	bl	80007c8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fd fd43 	bl	80007c8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e103      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b75      	ldr	r3, [pc, #468]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a6e      	ldr	r2, [pc, #440]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x334>
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b67      	ldr	r3, [pc, #412]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a66      	ldr	r2, [pc, #408]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	e01c      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x356>
 8002d9c:	4b61      	ldr	r3, [pc, #388]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002db6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a5a      	ldr	r2, [pc, #360]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d015      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fd fcf7 	bl	80007c8 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fd fcf3 	bl	80007c8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0b1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ee      	beq.n	8002dde <HAL_RCC_OscConfig+0x37e>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fd fce1 	bl	80007c8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fd fcdd 	bl	80007c8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e48:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d061      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d146      	bne.n	8002eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fd fcb1 	bl	80007c8 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fd fcad 	bl	80007c8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e06d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4921      	ldr	r1, [pc, #132]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a19      	ldr	r1, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	491b      	ldr	r1, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fd fc81 	bl	80007c8 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fd fc7d 	bl	80007c8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fd fc6a 	bl	80007c8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fd fc66 	bl	80007c8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e026      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x498>
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e019      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCC_OscConfig+0x500>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4965      	ldr	r1, [pc, #404]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7fd fbb8 	bl	80007c8 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd fbb4 	bl	80007c8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4922      	ldr	r1, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f82d 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1cc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa62 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	0800beb4 	.word	0x0800beb4
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <HAL_RCC_EnableCSS+0x14>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	4242004c 	.word	0x4242004c

08003150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x30>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x36>
 800317e:	e027      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	e027      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a17      	ldr	r2, [pc, #92]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0c5b      	lsrs	r3, r3, #17
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b2:	fb03 f202 	mul.w	r2, r3, r2
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e004      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	613b      	str	r3, [r7, #16]
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d6:	693b      	ldr	r3, [r7, #16]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	0800becc 	.word	0x0800becc
 80031f0:	0800bedc 	.word	0x0800bedc
 80031f4:	003d0900 	.word	0x003d0900
 80031f8:	007a1200 	.word	0x007a1200

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b02      	ldr	r3, [pc, #8]	@ (800320c <HAL_RCC_GetHCLKFreq+0x10>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003214:	f7ff fff2 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	0800bec4 	.word	0x0800bec4

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800323c:	f7ff ffde 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0adb      	lsrs	r3, r3, #11
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	0800bec4 	.word	0x0800bec4

08003260 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	220f      	movs	r2, #15
 800326e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_RCC_GetClockConfig+0x58>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_RCC_GetClockConfig+0x58>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCC_GetClockConfig+0x58>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <HAL_RCC_GetClockConfig+0x58>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_RCC_GetClockConfig+0x5c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40022000 	.word	0x40022000

080032c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032cc:	2b80      	cmp	r3, #128	@ 0x80
 80032ce:	d104      	bne.n	80032da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80032d0:	f000 f828 	bl	8003324 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	701a      	strb	r2, [r3, #0]
  }
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	4002100a 	.word	0x4002100a

080032e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <RCC_Delay+0x34>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <RCC_Delay+0x38>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a5b      	lsrs	r3, r3, #9
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003304:	bf00      	nop
  }
  while (Delay --);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <RCC_Delay+0x1c>
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000000 	.word	0x20000000
 8003320:	10624dd3 	.word	0x10624dd3

08003324 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003350:	4b4f      	ldr	r3, [pc, #316]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
 8003368:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b46      	ldr	r3, [pc, #280]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003390:	f7fd fa1a 	bl	80007c8 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fd fa16 	bl	80007c8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e06d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d027      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ea:	4a29      	ldr	r2, [pc, #164]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d014      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fd f9e5 	bl	80007c8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd f9e1 	bl	80007c8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e036      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4917      	ldr	r1, [pc, #92]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	4313      	orrs	r3, r2
 8003434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	490b      	ldr	r1, [pc, #44]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420440 	.word	0x42420440

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f839 	bl	800353a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 f9b4 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e03a      	b.n	80035da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x58>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x58>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	@ (80035e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x58>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <HAL_TIM_Base_Start_IT+0xa0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8ed 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8e0 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8ef 	bl	8003824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8c3 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8b6 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c5 	bl	8003824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f899 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f88c 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f89b 	bl	8003824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f86f 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f862 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f871 	bl	8003824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fc fe2c 	bl	80003cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b80      	cmp	r3, #128	@ 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378c:	2b80      	cmp	r3, #128	@ 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8bf 	bl	800391e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f835 	bl	8003836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0220 	mvn.w	r2, #32
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f88a 	bl	800390c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <TIM_Base_SetConfig+0xb8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_Base_SetConfig+0x30>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003866:	d007      	beq.n	8003878 <TIM_Base_SetConfig+0x30>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a26      	ldr	r2, [pc, #152]	@ (8003904 <TIM_Base_SetConfig+0xbc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_Base_SetConfig+0x30>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a25      	ldr	r2, [pc, #148]	@ (8003908 <TIM_Base_SetConfig+0xc0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d108      	bne.n	800388a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <TIM_Base_SetConfig+0xb8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a19      	ldr	r2, [pc, #100]	@ (8003904 <TIM_Base_SetConfig+0xbc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <TIM_Base_SetConfig+0xc0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a07      	ldr	r2, [pc, #28]	@ (8003900 <TIM_Base_SetConfig+0xb8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800

0800390c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e042      	b.n	80039c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc fdf4 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	@ 0x24
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f82b 	bl	80039d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a0a:	f023 030c 	bic.w	r3, r3, #12
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <UART_SetConfig+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7ff fbfe 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	e002      	b.n	8003a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7ff fbe6 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8003a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <UART_SetConfig+0x118>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	0119      	lsls	r1, r3, #4
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae8 <UART_SetConfig+0x118>)
 8003a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2064      	movs	r0, #100	@ 0x64
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	3332      	adds	r3, #50	@ 0x32
 8003a90:	4a15      	ldr	r2, [pc, #84]	@ (8003ae8 <UART_SetConfig+0x118>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a9c:	4419      	add	r1, r3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009a      	lsls	r2, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <UART_SetConfig+0x118>)
 8003ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2064      	movs	r0, #100	@ 0x64
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a07      	ldr	r2, [pc, #28]	@ (8003ae8 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	440a      	add	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40013800 	.word	0x40013800
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aec:	b084      	sub	sp, #16
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	f107 0014 	add.w	r0, r7, #20
 8003afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	b004      	add	sp, #16
 8003b0a:	4770      	bx	lr

08003b0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b1c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b40:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b84:	b084      	sub	sp, #16
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	f107 0014 	add.w	r0, r7, #20
 8003b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	b004      	add	sp, #16
 8003bc2:	4770      	bx	lr

08003bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b09d      	sub	sp, #116	@ 0x74
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	78db      	ldrb	r3, [r3, #3]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d81f      	bhi.n	8003c62 <USB_ActivateEndpoint+0x72>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <USB_ActivateEndpoint+0x38>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c6b 	.word	0x08003c6b
 8003c34:	08003c47 	.word	0x08003c47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c44:	e012      	b.n	8003c6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c4a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003c4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c52:	e00b      	b.n	8003c6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c60:	e004      	b.n	8003c6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003c68:	e000      	b.n	8003c6c <USB_ActivateEndpoint+0x7c>
      break;
 8003c6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	7b1b      	ldrb	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 8178 	bne.w	8003fcc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8084 	beq.w	8003dee <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	011a      	lsls	r2, r3, #4
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	88db      	ldrh	r3, [r3, #6]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	827b      	strh	r3, [r7, #18]
 8003d28:	8a7b      	ldrh	r3, [r7, #18]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01b      	beq.n	8003d6a <USB_ActivateEndpoint+0x17a>
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d48:	823b      	strh	r3, [r7, #16]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	8a3b      	ldrh	r3, [r7, #16]
 8003d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d020      	beq.n	8003db4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d88:	81bb      	strh	r3, [r7, #12]
 8003d8a:	89bb      	ldrh	r3, [r7, #12]
 8003d8c:	f083 0320 	eor.w	r3, r3, #32
 8003d90:	81bb      	strh	r3, [r7, #12]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	89bb      	ldrh	r3, [r7, #12]
 8003d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	8013      	strh	r3, [r2, #0]
 8003db2:	e2d5      	b.n	8004360 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dca:	81fb      	strh	r3, [r7, #14]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	89fb      	ldrh	r3, [r7, #14]
 8003dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8013      	strh	r3, [r2, #0]
 8003dec:	e2b8      	b.n	8004360 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	4413      	add	r3, r2
 8003e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	011a      	lsls	r2, r3, #4
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	88db      	ldrh	r3, [r3, #6]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	4413      	add	r3, r2
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	011a      	lsls	r2, r3, #4
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	4413      	add	r3, r2
 8003e40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e5c:	d91d      	bls.n	8003e9a <USB_ActivateEndpoint+0x2aa>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <USB_ActivateEndpoint+0x288>
 8003e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e74:	3b01      	subs	r3, #1
 8003e76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e026      	b.n	8003ee8 <USB_ActivateEndpoint+0x2f8>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <USB_ActivateEndpoint+0x2c8>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	e017      	b.n	8003ee8 <USB_ActivateEndpoint+0x2f8>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <USB_ActivateEndpoint+0x2e2>
 8003ecc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ece:	3301      	adds	r3, #1
 8003ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	029b      	lsls	r3, r3, #10
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ef6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <USB_ActivateEndpoint+0x348>
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	843b      	strh	r3, [r7, #32]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	8c3b      	ldrh	r3, [r7, #32]
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d124      	bne.n	8003f8a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f56:	83bb      	strh	r3, [r7, #28]
 8003f58:	8bbb      	ldrh	r3, [r7, #28]
 8003f5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f5e:	83bb      	strh	r3, [r7, #28]
 8003f60:	8bbb      	ldrh	r3, [r7, #28]
 8003f62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f66:	83bb      	strh	r3, [r7, #28]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	8bbb      	ldrh	r3, [r7, #28]
 8003f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8013      	strh	r3, [r2, #0]
 8003f88:	e1ea      	b.n	8004360 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa0:	83fb      	strh	r3, [r7, #30]
 8003fa2:	8bfb      	ldrh	r3, [r7, #30]
 8003fa4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fa8:	83fb      	strh	r3, [r7, #30]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	8013      	strh	r3, [r2, #0]
 8003fca:	e1c9      	b.n	8004360 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	78db      	ldrb	r3, [r3, #3]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d11e      	bne.n	8004012 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004004:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800400c:	b29b      	uxth	r3, r3
 800400e:	8013      	strh	r3, [r2, #0]
 8004010:	e01d      	b.n	800404e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004028:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800403a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800403e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404a:	b29b      	uxth	r3, r3
 800404c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800405e:	4413      	add	r3, r2
 8004060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	011a      	lsls	r2, r3, #4
 8004068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406a:	4413      	add	r3, r2
 800406c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	891b      	ldrh	r3, [r3, #8]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	657b      	str	r3, [r7, #84]	@ 0x54
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004092:	4413      	add	r3, r2
 8004094:	657b      	str	r3, [r7, #84]	@ 0x54
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	011a      	lsls	r2, r3, #4
 800409c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80040a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	895b      	ldrh	r3, [r3, #10]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 8093 	bne.w	80041e6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80040d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <USB_ActivateEndpoint+0x524>
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800410c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004122:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <USB_ActivateEndpoint+0x574>
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004154:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004160:	b29b      	uxth	r3, r3
 8004162:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800417c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800417e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004182:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004184:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800418a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
 80041e4:	e0bc      	b.n	8004360 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80041f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01d      	beq.n	800423e <USB_ActivateEndpoint+0x64e>
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004218:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800424e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01d      	beq.n	8004296 <USB_ActivateEndpoint+0x6a6>
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004270:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	78db      	ldrb	r3, [r3, #3]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d024      	beq.n	80042e8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042bc:	f083 0320 	eor.w	r3, r3, #32
 80042c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	441a      	add	r2, r3
 800430c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800431c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004320:	b29b      	uxth	r3, r3
 8004322:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800434c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004360:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004364:	4618      	mov	r0, r3
 8004366:	3774      	adds	r7, #116	@ 0x74
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004370:	b480      	push	{r7}
 8004372:	b08d      	sub	sp, #52	@ 0x34
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	7b1b      	ldrb	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 808e 	bne.w	80044a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d044      	beq.n	8004416 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	81bb      	strh	r3, [r7, #12]
 800439a:	89bb      	ldrh	r3, [r7, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <USB_DeactivateEndpoint+0x6c>
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	817b      	strh	r3, [r7, #10]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f2:	813b      	strh	r3, [r7, #8]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004410:	b29b      	uxth	r3, r3
 8004412:	8013      	strh	r3, [r2, #0]
 8004414:	e192      	b.n	800473c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	827b      	strh	r3, [r7, #18]
 8004424:	8a7b      	ldrh	r3, [r7, #18]
 8004426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <USB_DeactivateEndpoint+0xf6>
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004444:	823b      	strh	r3, [r7, #16]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	8a3b      	ldrh	r3, [r7, #16]
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800445a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800445e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447c:	81fb      	strh	r3, [r7, #14]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	89fb      	ldrh	r3, [r7, #14]
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
 800449e:	e14d      	b.n	800473c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 80a5 	bne.w	80045f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	843b      	strh	r3, [r7, #32]
 80044b8:	8c3b      	ldrh	r3, [r7, #32]
 80044ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01b      	beq.n	80044fa <USB_DeactivateEndpoint+0x18a>
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d8:	83fb      	strh	r3, [r7, #30]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8bfb      	ldrh	r3, [r7, #30]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	83bb      	strh	r3, [r7, #28]
 8004508:	8bbb      	ldrh	r3, [r7, #28]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01b      	beq.n	800454a <USB_DeactivateEndpoint+0x1da>
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004528:	837b      	strh	r3, [r7, #26]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800453a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004560:	833b      	strh	r3, [r7, #24]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	8b3b      	ldrh	r3, [r7, #24]
 800456e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800457e:	b29b      	uxth	r3, r3
 8004580:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004598:	82fb      	strh	r3, [r7, #22]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	8afb      	ldrh	r3, [r7, #22]
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045d0:	82bb      	strh	r3, [r7, #20]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	441a      	add	r2, r3
 80045dc:	8abb      	ldrh	r3, [r7, #20]
 80045de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	8013      	strh	r3, [r2, #0]
 80045f2:	e0a3      	b.n	800473c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004602:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <USB_DeactivateEndpoint+0x2d4>
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004622:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800463c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004652:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <USB_DeactivateEndpoint+0x324>
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004690:	b29b      	uxth	r3, r3
 8004692:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3734      	adds	r7, #52	@ 0x34
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0c2      	sub	sp, #264	@ 0x108
 800474c:	af00      	add	r7, sp, #0
 800474e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004756:	6018      	str	r0, [r3, #0]
 8004758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004760:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b01      	cmp	r3, #1
 8004770:	f040 86b7 	bne.w	80054e2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d908      	bls.n	80047a2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047a0:	e007      	b.n	80047b2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	7b1b      	ldrb	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13a      	bne.n	8004838 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6959      	ldr	r1, [r3, #20]
 80047ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	88da      	ldrh	r2, [r3, #6]
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047e8:	6800      	ldr	r0, [r0, #0]
 80047ea:	f001 fc9c 	bl	8006126 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	011a      	lsls	r2, r3, #4
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	f000 be1f 	b.w	8005476 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800483c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 8462 	bne.w	800510e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800484a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800485a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	f240 83df 	bls.w	8005026 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80048b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80048bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d4:	1ad2      	subs	r2, r2, r3
 80048d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 81c7 	beq.w	8004c98 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800490a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800490e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
 8004916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800491a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d177      	bne.n	8004a16 <USB_EPStartXfer+0x2ce>
 8004926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800492a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	4413      	add	r3, r2
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	011a      	lsls	r2, r3, #4
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	4413      	add	r3, r2
 800495c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496c:	b29a      	uxth	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004976:	2b3e      	cmp	r3, #62	@ 0x3e
 8004978:	d921      	bls.n	80049be <USB_EPStartXfer+0x276>
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <USB_EPStartXfer+0x252>
 8004990:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004994:	3b01      	subs	r3, #1
 8004996:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	029b      	lsls	r3, r3, #10
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	e050      	b.n	8004a60 <USB_EPStartXfer+0x318>
 80049be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <USB_EPStartXfer+0x294>
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e041      	b.n	8004a60 <USB_EPStartXfer+0x318>
 80049dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <USB_EPStartXfer+0x2b4>
 80049f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049f6:	3301      	adds	r3, #1
 80049f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e024      	b.n	8004a60 <USB_EPStartXfer+0x318>
 8004a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d11c      	bne.n	8004a60 <USB_EPStartXfer+0x318>
 8004a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	4413      	add	r3, r2
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	011a      	lsls	r2, r3, #4
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	4413      	add	r3, r2
 8004a50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	895b      	ldrh	r3, [r3, #10]
 8004a6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6959      	ldr	r1, [r3, #20]
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	f001 fb49 	bl	8006126 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa4:	441a      	add	r2, r3
 8004aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d90f      	bls.n	8004aee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	621a      	str	r2, [r3, #32]
 8004aec:	e00e      	b.n	8004b0c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d177      	bne.n	8004c0c <USB_EPStartXfer+0x4c4>
 8004b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	011a      	lsls	r2, r3, #4
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4413      	add	r3, r2
 8004b52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b6e:	d921      	bls.n	8004bb4 <USB_EPStartXfer+0x46c>
 8004b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <USB_EPStartXfer+0x448>
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e056      	b.n	8004c62 <USB_EPStartXfer+0x51a>
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <USB_EPStartXfer+0x48a>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e047      	b.n	8004c62 <USB_EPStartXfer+0x51a>
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <USB_EPStartXfer+0x4aa>
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bec:	3301      	adds	r3, #1
 8004bee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	029b      	lsls	r3, r3, #10
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e02a      	b.n	8004c62 <USB_EPStartXfer+0x51a>
 8004c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d122      	bne.n	8004c62 <USB_EPStartXfer+0x51a>
 8004c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	011a      	lsls	r2, r3, #4
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	891b      	ldrh	r3, [r3, #8]
 8004c6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6959      	ldr	r1, [r3, #20]
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	f001 fa48 	bl	8006126 <USB_WritePMA>
 8004c96:	e3ee      	b.n	8005476 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d177      	bne.n	8004d98 <USB_EPStartXfer+0x650>
 8004ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cc8:	4413      	add	r3, r2
 8004cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	011a      	lsls	r2, r3, #4
 8004cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cdc:	4413      	add	r3, r2
 8004cde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cfa:	d921      	bls.n	8004d40 <USB_EPStartXfer+0x5f8>
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <USB_EPStartXfer+0x5d4>
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d16:	3b01      	subs	r3, #1
 8004d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e056      	b.n	8004dee <USB_EPStartXfer+0x6a6>
 8004d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <USB_EPStartXfer+0x616>
 8004d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e047      	b.n	8004dee <USB_EPStartXfer+0x6a6>
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <USB_EPStartXfer+0x636>
 8004d74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	029b      	lsls	r3, r3, #10
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e02a      	b.n	8004dee <USB_EPStartXfer+0x6a6>
 8004d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d122      	bne.n	8004dee <USB_EPStartXfer+0x6a6>
 8004da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dc8:	4413      	add	r3, r2
 8004dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ddc:	4413      	add	r3, r2
 8004dde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	891b      	ldrh	r3, [r3, #8]
 8004dfa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f001 f982 	bl	8006126 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e32:	441a      	add	r2, r3
 8004e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d90f      	bls.n	8004e7c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6c:	1ad2      	subs	r2, r2, r3
 8004e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	621a      	str	r2, [r3, #32]
 8004e7a:	e00e      	b.n	8004e9a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d177      	bne.n	8004fa6 <USB_EPStartXfer+0x85e>
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	4413      	add	r3, r2
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	011a      	lsls	r2, r3, #4
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f06:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f08:	d921      	bls.n	8004f4e <USB_EPStartXfer+0x806>
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <USB_EPStartXfer+0x7e2>
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	029b      	lsls	r3, r3, #10
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e050      	b.n	8004ff0 <USB_EPStartXfer+0x8a8>
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <USB_EPStartXfer+0x824>
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e041      	b.n	8004ff0 <USB_EPStartXfer+0x8a8>
 8004f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <USB_EPStartXfer+0x844>
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f86:	3301      	adds	r3, #1
 8004f88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e024      	b.n	8004ff0 <USB_EPStartXfer+0x8a8>
 8004fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d11c      	bne.n	8004ff0 <USB_EPStartXfer+0x8a8>
 8004fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fca:	4413      	add	r3, r2
 8004fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fde:	4413      	add	r3, r2
 8004fe0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	895b      	ldrh	r3, [r3, #10]
 8004ffc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6959      	ldr	r1, [r3, #20]
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005010:	b29b      	uxth	r3, r3
 8005012:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005016:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800501a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	f001 f881 	bl	8006126 <USB_WritePMA>
 8005024:	e227      	b.n	8005476 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800508a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b2:	4413      	add	r3, r2
 80050b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	891b      	ldrh	r3, [r3, #8]
 80050e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6959      	ldr	r1, [r3, #20]
 80050f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005102:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	f001 f80d 	bl	8006126 <USB_WritePMA>
 800510c:	e1b3      	b.n	8005476 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800510e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800512c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80c6 	beq.w	80052e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d177      	bne.n	8005260 <USB_EPStartXfer+0xb18>
 8005170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800518a:	b29b      	uxth	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005190:	4413      	add	r3, r2
 8005192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80051c2:	d921      	bls.n	8005208 <USB_EPStartXfer+0xac0>
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <USB_EPStartXfer+0xa9c>
 80051da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051de:	3b01      	subs	r3, #1
 80051e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005200:	b29a      	uxth	r2, r3
 8005202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	e050      	b.n	80052aa <USB_EPStartXfer+0xb62>
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <USB_EPStartXfer+0xade>
 8005210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521e:	b29a      	uxth	r2, r3
 8005220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e041      	b.n	80052aa <USB_EPStartXfer+0xb62>
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <USB_EPStartXfer+0xafe>
 800523c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005240:	3301      	adds	r3, #1
 8005242:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29a      	uxth	r2, r3
 800524c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005250:	b29b      	uxth	r3, r3
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	b29b      	uxth	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e024      	b.n	80052aa <USB_EPStartXfer+0xb62>
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11c      	bne.n	80052aa <USB_EPStartXfer+0xb62>
 8005270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527e:	b29b      	uxth	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005284:	4413      	add	r3, r2
 8005286:	673b      	str	r3, [r7, #112]	@ 0x70
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005298:	4413      	add	r3, r2
 800529a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800529e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	895b      	ldrh	r3, [r3, #10]
 80052b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052d8:	6800      	ldr	r0, [r0, #0]
 80052da:	f000 ff24 	bl	8006126 <USB_WritePMA>
 80052de:	e0ca      	b.n	8005476 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d177      	bne.n	80053e0 <USB_EPStartXfer+0xc98>
 80052f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005310:	4413      	add	r3, r2
 8005312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	011a      	lsls	r2, r3, #4
 8005322:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005324:	4413      	add	r3, r2
 8005326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800532a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800532c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005336:	b29a      	uxth	r2, r3
 8005338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	2b3e      	cmp	r3, #62	@ 0x3e
 8005342:	d921      	bls.n	8005388 <USB_EPStartXfer+0xc40>
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <USB_EPStartXfer+0xc1c>
 800535a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800535e:	3b01      	subs	r3, #1
 8005360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005380:	b29a      	uxth	r2, r3
 8005382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e05c      	b.n	8005442 <USB_EPStartXfer+0xcfa>
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <USB_EPStartXfer+0xc5e>
 8005390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e04d      	b.n	8005442 <USB_EPStartXfer+0xcfa>
 80053a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <USB_EPStartXfer+0xc7e>
 80053bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e030      	b.n	8005442 <USB_EPStartXfer+0xcfa>
 80053e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d128      	bne.n	8005442 <USB_EPStartXfer+0xcfa>
 80053f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005414:	4413      	add	r3, r2
 8005416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800541a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	011a      	lsls	r2, r3, #4
 8005428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800542c:	4413      	add	r3, r2
 800542e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	b29a      	uxth	r2, r3
 800543c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005440:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	891b      	ldrh	r3, [r3, #8]
 800544e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6959      	ldr	r1, [r3, #20]
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005462:	b29b      	uxth	r3, r3
 8005464:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005468:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800546c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005470:	6800      	ldr	r0, [r0, #0]
 8005472:	f000 fe58 	bl	8006126 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549c:	817b      	strh	r3, [r7, #10]
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	f083 0310 	eor.w	r3, r3, #16
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	f083 0320 	eor.w	r3, r3, #32
 80054ac:	817b      	strh	r3, [r7, #10]
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
 80054de:	f000 bcde 	b.w	8005e9e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	7b1b      	ldrb	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 80bb 	bne.w	800566a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d917      	bls.n	8005540 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	619a      	str	r2, [r3, #24]
 800553e:	e00e      	b.n	800555e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800555e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800556c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005582:	4413      	add	r3, r2
 8005584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	011a      	lsls	r2, r3, #4
 8005596:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800559a:	4413      	add	r3, r2
 800559c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80055be:	d924      	bls.n	800560a <USB_EPStartXfer+0xec2>
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <USB_EPStartXfer+0xe98>
 80055d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055da:	3b01      	subs	r3, #1
 80055dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4313      	orrs	r3, r2
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f000 bc10 	b.w	8005e2a <USB_EPStartXfer+0x16e2>
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10c      	bne.n	800562c <USB_EPStartXfer+0xee4>
 8005612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e3fe      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <USB_EPStartXfer+0xf04>
 8005642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005646:	3301      	adds	r3, #1
 8005648:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800564c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29a      	uxth	r2, r3
 8005654:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005658:	b29b      	uxth	r3, r3
 800565a:	029b      	lsls	r3, r3, #10
 800565c:	b29b      	uxth	r3, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	b29a      	uxth	r2, r3
 8005662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	e3df      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800566a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b02      	cmp	r3, #2
 8005678:	f040 8218 	bne.w	8005aac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800567c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 809d 	bne.w	80057c8 <USB_EPStartXfer+0x1080>
 800568e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800569c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b2:	4413      	add	r3, r2
 80056b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	011a      	lsls	r2, r3, #4
 80056c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80056f6:	d92b      	bls.n	8005750 <USB_EPStartXfer+0x1008>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800570a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <USB_EPStartXfer+0xfe0>
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005722:	3b01      	subs	r3, #1
 8005724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29b      	uxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e070      	b.n	8005832 <USB_EPStartXfer+0x10ea>
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <USB_EPStartXfer+0x1032>
 8005760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005770:	b29a      	uxth	r2, r3
 8005772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e05b      	b.n	8005832 <USB_EPStartXfer+0x10ea>
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <USB_EPStartXfer+0x1062>
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e034      	b.n	8005832 <USB_EPStartXfer+0x10ea>
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d12c      	bne.n	8005832 <USB_EPStartXfer+0x10ea>
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057fc:	4413      	add	r3, r2
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005814:	4413      	add	r3, r2
 8005816:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800581a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	b29a      	uxth	r2, r3
 800582c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 809d 	bne.w	800598c <USB_EPStartXfer+0x1244>
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005876:	4413      	add	r3, r2
 8005878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800588e:	4413      	add	r3, r2
 8005890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80058ba:	d92b      	bls.n	8005914 <USB_EPStartXfer+0x11cc>
 80058bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <USB_EPStartXfer+0x11a4>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e6:	3b01      	subs	r3, #1
 80058e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e069      	b.n	80059e8 <USB_EPStartXfer+0x12a0>
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <USB_EPStartXfer+0x11f6>
 8005924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005934:	b29a      	uxth	r2, r3
 8005936:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e054      	b.n	80059e8 <USB_EPStartXfer+0x12a0>
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <USB_EPStartXfer+0x1226>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800596e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800597a:	b29b      	uxth	r3, r3
 800597c:	029b      	lsls	r3, r3, #10
 800597e:	b29b      	uxth	r3, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e02d      	b.n	80059e8 <USB_EPStartXfer+0x12a0>
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d125      	bne.n	80059e8 <USB_EPStartXfer+0x12a0>
 800599c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059b2:	4413      	add	r3, r2
 80059b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059ca:	4413      	add	r3, r2
 80059cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8218 	beq.w	8005e2a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <USB_EPStartXfer+0x12ea>
 8005a26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10d      	bne.n	8005a4e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 81f5 	bne.w	8005e2a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 81ee 	bne.w	8005e2a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
 8005aaa:	e1be      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 81b4 	bne.w	8005e26 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d917      	bls.n	8005b0a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	619a      	str	r2, [r3, #24]
 8005b08:	e00e      	b.n	8005b28 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f040 8085 	bne.w	8005c44 <USB_EPStartXfer+0x14fc>
 8005b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b5e:	4413      	add	r3, r2
 8005b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	011a      	lsls	r2, r3, #4
 8005b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b76:	4413      	add	r3, r2
 8005b78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b9a:	d923      	bls.n	8005be4 <USB_EPStartXfer+0x149c>
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <USB_EPStartXfer+0x1474>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e060      	b.n	8005ca6 <USB_EPStartXfer+0x155e>
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10c      	bne.n	8005c06 <USB_EPStartXfer+0x14be>
 8005bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e04f      	b.n	8005ca6 <USB_EPStartXfer+0x155e>
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <USB_EPStartXfer+0x14de>
 8005c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e030      	b.n	8005ca6 <USB_EPStartXfer+0x155e>
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d128      	bne.n	8005ca6 <USB_EPStartXfer+0x155e>
 8005c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c78:	4413      	add	r3, r2
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	011a      	lsls	r2, r3, #4
 8005c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 8085 	bne.w	8005dd0 <USB_EPStartXfer+0x1688>
 8005cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005cea:	4413      	add	r3, r2
 8005cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	011a      	lsls	r2, r3, #4
 8005cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d26:	d923      	bls.n	8005d70 <USB_EPStartXfer+0x1628>
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USB_EPStartXfer+0x1600>
 8005d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e05c      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <USB_EPStartXfer+0x164a>
 8005d78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e04b      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <USB_EPStartXfer+0x166a>
 8005da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e02c      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
 8005dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d124      	bne.n	8005e2a <USB_EPStartXfer+0x16e2>
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005df6:	4413      	add	r3, r2
 8005df8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	011a      	lsls	r2, r3, #4
 8005e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e0e:	4413      	add	r3, r2
 8005e10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e001      	b.n	8005e2a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e03a      	b.n	8005ea0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d020      	beq.n	8005efe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed2:	81bb      	strh	r3, [r7, #12]
 8005ed4:	89bb      	ldrh	r3, [r7, #12]
 8005ed6:	f083 0310 	eor.w	r3, r3, #16
 8005eda:	81bb      	strh	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	89bb      	ldrh	r3, [r7, #12]
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]
 8005efc:	e01f      	b.n	8005f3e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f14:	81fb      	strh	r3, [r7, #14]
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	7b1b      	ldrb	r3, [r3, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 809d 	bne.w	8006098 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d04c      	beq.n	8006000 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	823b      	strh	r3, [r7, #16]
 8005f74:	8a3b      	ldrh	r3, [r7, #16]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <USB_EPClearStall+0x6c>
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f94:	81fb      	strh	r3, [r7, #14]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	78db      	ldrb	r3, [r3, #3]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d06c      	beq.n	8006098 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd4:	81bb      	strh	r3, [r7, #12]
 8005fd6:	89bb      	ldrh	r3, [r7, #12]
 8005fd8:	f083 0320 	eor.w	r3, r3, #32
 8005fdc:	81bb      	strh	r3, [r7, #12]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]
 8005ffe:	e04b      	b.n	8006098 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	82fb      	strh	r3, [r7, #22]
 800600e:	8afb      	ldrh	r3, [r7, #22]
 8006010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <USB_EPClearStall+0x106>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	82bb      	strh	r3, [r7, #20]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	8abb      	ldrh	r3, [r7, #20]
 800603c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006066:	827b      	strh	r3, [r7, #18]
 8006068:	8a7b      	ldrh	r3, [r7, #18]
 800606a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800606e:	827b      	strh	r3, [r7, #18]
 8006070:	8a7b      	ldrh	r3, [r7, #18]
 8006072:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006076:	827b      	strh	r3, [r7, #18]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	8a7b      	ldrh	r3, [r7, #18]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2280      	movs	r2, #128	@ 0x80
 80060ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006100:	b29b      	uxth	r3, r3
 8006102:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006104:	68fb      	ldr	r3, [r7, #12]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006126:	b480      	push	{r7}
 8006128:	b08b      	sub	sp, #44	@ 0x2c
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4611      	mov	r1, r2
 8006132:	461a      	mov	r2, r3
 8006134:	460b      	mov	r3, r1
 8006136:	80fb      	strh	r3, [r7, #6]
 8006138:	4613      	mov	r3, r2
 800613a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800613c:	88bb      	ldrh	r3, [r7, #4]
 800613e:	3301      	adds	r3, #1
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	005a      	lsls	r2, r3, #1
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006158:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
 800615e:	e01e      	b.n	800619e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3301      	adds	r3, #1
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b21a      	sxth	r2, r3
 8006170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006174:	4313      	orrs	r3, r2
 8006176:	b21b      	sxth	r3, r3
 8006178:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	8a7a      	ldrh	r2, [r7, #18]
 800617e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	3302      	adds	r3, #2
 8006184:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	3302      	adds	r3, #2
 800618a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	3301      	adds	r3, #1
 8006190:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	3b01      	subs	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1dd      	bne.n	8006160 <USB_WritePMA+0x3a>
  }
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	372c      	adds	r7, #44	@ 0x2c
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b08b      	sub	sp, #44	@ 0x2c
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	460b      	mov	r3, r1
 80061c0:	80fb      	strh	r3, [r7, #6]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061c6:	88bb      	ldrh	r3, [r7, #4]
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	005a      	lsls	r2, r3, #1
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e8:	e01b      	b.n	8006222 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	3302      	adds	r3, #2
 80061f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	3301      	adds	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b2da      	uxtb	r2, r3
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	3302      	adds	r3, #2
 800621a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	3b01      	subs	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e0      	bne.n	80061ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006228:	88bb      	ldrh	r3, [r7, #4]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	701a      	strb	r2, [r3, #0]
  }
}
 8006244:	bf00      	nop
 8006246:	372c      	adds	r7, #44	@ 0x2c
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
	...

08006250 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006254:	4904      	ldr	r1, [pc, #16]	@ (8006268 <MX_FATFS_Init+0x18>)
 8006256:	4805      	ldr	r0, [pc, #20]	@ (800626c <MX_FATFS_Init+0x1c>)
 8006258:	f002 fb4a 	bl	80088f0 <FATFS_LinkDriver>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	4b03      	ldr	r3, [pc, #12]	@ (8006270 <MX_FATFS_Init+0x20>)
 8006262:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006264:	bf00      	nop
 8006266:	bd80      	pop	{r7, pc}
 8006268:	200002e8 	.word	0x200002e8
 800626c:	2000000c 	.word	0x2000000c
 8006270:	200002e4 	.word	0x200002e4

08006274 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800627e:	4b05      	ldr	r3, [pc, #20]	@ (8006294 <USER_initialize+0x20>)
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006284:	4b03      	ldr	r3, [pc, #12]	@ (8006294 <USER_initialize+0x20>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	20000009 	.word	0x20000009

08006298 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80062a2:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <USER_status+0x20>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <USER_status+0x20>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	20000009 	.word	0x20000009

080062bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80062cc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80062e8:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	603a      	str	r2, [r7, #0]
 80062fe:	71fb      	strb	r3, [r7, #7]
 8006300:	460b      	mov	r3, r1
 8006302:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
    return res;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7c1b      	ldrb	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d115      	bne.n	8006354 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800632c:	2202      	movs	r2, #2
 800632e:	2101      	movs	r1, #1
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f005 faf4 	bl	800b91e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800633e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006342:	2202      	movs	r2, #2
 8006344:	2181      	movs	r1, #129	@ 0x81
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f005 fae9 	bl	800b91e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006352:	e012      	b.n	800637a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006354:	2340      	movs	r3, #64	@ 0x40
 8006356:	2202      	movs	r2, #2
 8006358:	2101      	movs	r1, #1
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f005 fadf 	bl	800b91e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006368:	2340      	movs	r3, #64	@ 0x40
 800636a:	2202      	movs	r2, #2
 800636c:	2181      	movs	r1, #129	@ 0x81
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f005 fad5 	bl	800b91e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800637a:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 800637e:	f005 fc15 	bl	800bbac <USBD_static_malloc>
 8006382:	4602      	mov	r2, r0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006394:	2302      	movs	r3, #2
 8006396:	e003      	b.n	80063a0 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9d9 	bl	8006750 <MSC_BOT_Init>

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80063b4:	2101      	movs	r1, #1
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f005 fad7 	bl	800b96a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80063c4:	2181      	movs	r1, #129	@ 0x81
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f005 facf 	bl	800b96a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa06 	bl	80067e4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e8:	4618      	mov	r0, r3
 80063ea:	f005 fbeb 	bl	800bbc4 <USBD_static_free>
    pdev->pClassData  = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006410:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04d      	beq.n	80064c2 <USBD_MSC_Setup+0xc2>
 8006426:	2b20      	cmp	r3, #32
 8006428:	f040 8113 	bne.w	8006652 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	2bfe      	cmp	r3, #254	@ 0xfe
 8006432:	d002      	beq.n	800643a <USBD_MSC_Setup+0x3a>
 8006434:	2bff      	cmp	r3, #255	@ 0xff
 8006436:	d024      	beq.n	8006482 <USBD_MSC_Setup+0x82>
 8006438:	e03b      	b.n	80064b2 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	885b      	ldrh	r3, [r3, #2]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d118      	bne.n	8006474 <USBD_MSC_Setup+0x74>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d114      	bne.n	8006474 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006450:	2b00      	cmp	r3, #0
 8006452:	da0f      	bge.n	8006474 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	4798      	blx	r3
 800645e:	4603      	mov	r3, r0
 8006460:	461a      	mov	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2201      	movs	r2, #1
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f002 f98f 	bl	8008790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006472:	e025      	b.n	80064c0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 f920 	bl	80086bc <USBD_CtlError>
            ret = USBD_FAIL;
 800647c:	2302      	movs	r3, #2
 800647e:	75fb      	strb	r3, [r7, #23]
          break;
 8006480:	e01e      	b.n	80064c0 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <USBD_MSC_Setup+0xa4>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d108      	bne.n	80064a4 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006498:	2b00      	cmp	r3, #0
 800649a:	db03      	blt.n	80064a4 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f987 	bl	80067b0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064a2:	e00d      	b.n	80064c0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f002 f908 	bl	80086bc <USBD_CtlError>
            ret = USBD_FAIL;
 80064ac:	2302      	movs	r3, #2
 80064ae:	75fb      	strb	r3, [r7, #23]
          break;
 80064b0:	e006      	b.n	80064c0 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f002 f901 	bl	80086bc <USBD_CtlError>
          ret = USBD_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	75fb      	strb	r3, [r7, #23]
          break;
 80064be:	bf00      	nop
      }
      break;
 80064c0:	e0ce      	b.n	8006660 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b0b      	cmp	r3, #11
 80064c8:	f200 80bb 	bhi.w	8006642 <USBD_MSC_Setup+0x242>
 80064cc:	a201      	add	r2, pc, #4	@ (adr r2, 80064d4 <USBD_MSC_Setup+0xd4>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	08006505 	.word	0x08006505
 80064d8:	0800657b 	.word	0x0800657b
 80064dc:	08006643 	.word	0x08006643
 80064e0:	08006643 	.word	0x08006643
 80064e4:	08006643 	.word	0x08006643
 80064e8:	08006643 	.word	0x08006643
 80064ec:	08006643 	.word	0x08006643
 80064f0:	08006643 	.word	0x08006643
 80064f4:	08006643 	.word	0x08006643
 80064f8:	08006643 	.word	0x08006643
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	08006555 	.word	0x08006555
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800650a:	2b03      	cmp	r3, #3
 800650c:	d107      	bne.n	800651e <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800650e:	f107 030e 	add.w	r3, r7, #14
 8006512:	2202      	movs	r2, #2
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 f93a 	bl	8008790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800651c:	e098      	b.n	8006650 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f002 f8cb 	bl	80086bc <USBD_CtlError>
            ret = USBD_FAIL;
 8006526:	2302      	movs	r3, #2
 8006528:	75fb      	strb	r3, [r7, #23]
          break;
 800652a:	e091      	b.n	8006650 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006532:	2b03      	cmp	r3, #3
 8006534:	d107      	bne.n	8006546 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3304      	adds	r3, #4
 800653a:	2201      	movs	r2, #1
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 f926 	bl	8008790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006544:	e084      	b.n	8006650 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 f8b7 	bl	80086bc <USBD_CtlError>
            ret = USBD_FAIL;
 800654e:	2302      	movs	r3, #2
 8006550:	75fb      	strb	r3, [r7, #23]
          break;
 8006552:	e07d      	b.n	8006650 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800655a:	2b03      	cmp	r3, #3
 800655c:	d106      	bne.n	800656c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	885b      	ldrh	r3, [r3, #2]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800656a:	e071      	b.n	8006650 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f002 f8a4 	bl	80086bc <USBD_CtlError>
            ret = USBD_FAIL;
 8006574:	2302      	movs	r3, #2
 8006576:	75fb      	strb	r3, [r7, #23]
          break;
 8006578:	e06a      	b.n	8006650 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	889b      	ldrh	r3, [r3, #4]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f005 fa10 	bl	800b9a8 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	889b      	ldrh	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f005 f9ea 	bl	800b96a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	889b      	ldrh	r3, [r3, #4]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da23      	bge.n	80065e8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	889b      	ldrh	r3, [r3, #4]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 020f 	and.w	r2, r3, #15
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	3318      	adds	r3, #24
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7c1b      	ldrb	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80065c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065c8:	2202      	movs	r2, #2
 80065ca:	2181      	movs	r1, #129	@ 0x81
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f005 f9a6 	bl	800b91e <USBD_LL_OpenEP>
 80065d2:	e005      	b.n	80065e0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80065d4:	2340      	movs	r3, #64	@ 0x40
 80065d6:	2202      	movs	r2, #2
 80065d8:	2181      	movs	r1, #129	@ 0x81
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f005 f99f 	bl	800b91e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80065e6:	e024      	b.n	8006632 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	889b      	ldrh	r3, [r3, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7c1b      	ldrb	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800660e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006612:	2202      	movs	r2, #2
 8006614:	2101      	movs	r1, #1
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f005 f981 	bl	800b91e <USBD_LL_OpenEP>
 800661c:	e005      	b.n	800662a <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800661e:	2340      	movs	r3, #64	@ 0x40
 8006620:	2202      	movs	r2, #2
 8006622:	2101      	movs	r1, #1
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f005 f97a 	bl	800b91e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	889b      	ldrh	r3, [r3, #4]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa52 	bl	8006ae4 <MSC_BOT_CplClrFeature>
          break;
 8006640:	e006      	b.n	8006650 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 f839 	bl	80086bc <USBD_CtlError>
          ret = USBD_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	bf00      	nop
      }
      break;
 8006650:	e006      	b.n	8006660 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 f831 	bl	80086bc <USBD_CtlError>
      ret = USBD_FAIL;
 800665a:	2302      	movs	r3, #2
 800665c:	75fb      	strb	r3, [r7, #23]
      break;
 800665e:	bf00      	nop
  }

  return ret;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8c1 	bl	8006804 <MSC_BOT_DataIn>

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8e3 	bl	8006868 <MSC_BOT_DataOut>

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	@ (80066c8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000058 	.word	0x20000058

080066cc <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80066da:	4b03      	ldr	r3, [pc, #12]	@ (80066e8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000078 	.word	0x20000078

080066ec <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80066fa:	4b03      	ldr	r3, [pc, #12]	@ (8006708 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000098 	.word	0x20000098

0800670c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	220a      	movs	r2, #10
 8006718:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800671a:	4b03      	ldr	r3, [pc, #12]	@ (8006728 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	200000b8 	.word	0x200000b8

0800672c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800675e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  hmsc->scsi_sense_head = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2000      	movs	r0, #0
 8006786:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f005 f90c 	bl	800b9a8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006790:	2181      	movs	r1, #129	@ 0x81
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f005 f908 	bl	800b9a8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 800679e:	231f      	movs	r3, #31
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f005 f9cb 	bl	800bb3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067be:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 80067d2:	231f      	movs	r3, #31
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f005 f9b1 	bl	800bb3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	721a      	strb	r2, [r3, #8]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006816:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	7a1b      	ldrb	r3, [r3, #8]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d005      	beq.n	800682c <MSC_BOT_DataIn+0x28>
 8006820:	2b02      	cmp	r3, #2
 8006822:	db1a      	blt.n	800685a <MSC_BOT_DataIn+0x56>
 8006824:	3b03      	subs	r3, #3
 8006826:	2b01      	cmp	r3, #1
 8006828:	d817      	bhi.n	800685a <MSC_BOT_DataIn+0x56>
 800682a:	e011      	b.n	8006850 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8006838:	461a      	mov	r2, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f97a 	bl	8006b34 <SCSI_ProcessCmd>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	da0b      	bge.n	800685e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f8f1 	bl	8006a30 <MSC_BOT_SendCSW>
      }
      break;
 800684e:	e006      	b.n	800685e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8ec 	bl	8006a30 <MSC_BOT_SendCSW>
      break;
 8006858:	e002      	b.n	8006860 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 800685a:	bf00      	nop
 800685c:	e000      	b.n	8006860 <MSC_BOT_DataIn+0x5c>
      break;
 800685e:	bf00      	nop
  }
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	7a1b      	ldrb	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <MSC_BOT_DataOut+0x22>
 8006884:	2b01      	cmp	r3, #1
 8006886:	d004      	beq.n	8006892 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006888:	e015      	b.n	80068b6 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f818 	bl	80068c0 <MSC_BOT_CBW_Decode>
      break;
 8006890:	e011      	b.n	80068b6 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800689e:	461a      	mov	r2, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f947 	bl	8006b34 <SCSI_ProcessCmd>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da03      	bge.n	80068b4 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80068ac:	2101      	movs	r1, #1
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8be 	bl	8006a30 <MSC_BOT_SendCSW>
      break;
 80068b4:	bf00      	nop
  }
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ce:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068e8:	2101      	movs	r1, #1
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f005 f94a 	bl	800bb84 <USBD_LL_GetRxDataSize>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b1f      	cmp	r3, #31
 80068f4:	d114      	bne.n	8006920 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068fc:	4a32      	ldr	r2, [pc, #200]	@ (80069c8 <MSC_BOT_CBW_Decode+0x108>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10e      	bne.n	8006920 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006908:	2b01      	cmp	r3, #1
 800690a:	d809      	bhi.n	8006920 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 800691c:	2b10      	cmp	r3, #16
 800691e:	d90e      	bls.n	800693e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006926:	2320      	movs	r3, #32
 8006928:	2205      	movs	r2, #5
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fc48 	bl	80071c0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2202      	movs	r2, #2
 8006934:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f8a6 	bl	8006a88 <MSC_BOT_Abort>
 800693c:	e041      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800694a:	461a      	mov	r2, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8f1 	bl	8006b34 <SCSI_ProcessCmd>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	da0c      	bge.n	8006972 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7a1b      	ldrb	r3, [r3, #8]
 800695c:	2b05      	cmp	r3, #5
 800695e:	d104      	bne.n	800696a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006960:	2101      	movs	r1, #1
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f864 	bl	8006a30 <MSC_BOT_SendCSW>
 8006968:	e02b      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f88c 	bl	8006a88 <MSC_BOT_Abort>
 8006970:	e027      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7a1b      	ldrb	r3, [r3, #8]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d022      	beq.n	80069c0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800697e:	2b01      	cmp	r3, #1
 8006980:	d01e      	beq.n	80069c0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006986:	2b03      	cmp	r3, #3
 8006988:	d01a      	beq.n	80069c0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	895b      	ldrh	r3, [r3, #10]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 010c 	add.w	r1, r3, #12
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	895b      	ldrh	r3, [r3, #10]
 800699c:	461a      	mov	r2, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f814 	bl	80069cc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80069a4:	e00d      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	895b      	ldrh	r3, [r3, #10]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f83d 	bl	8006a30 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80069b6:	e004      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f865 	bl	8006a88 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80069be:	e000      	b.n	80069c2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80069c0:	bf00      	nop
    }
  }
}
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	43425355 	.word	0x43425355

080069cc <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d204      	bcs.n	80069f8 <MSC_BOT_SendData+0x2c>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	e000      	b.n	80069fa <MSC_BOT_SendData+0x2e>
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	1ad2      	subs	r2, r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2204      	movs	r2, #4
 8006a18:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006a1a:	8a7b      	ldrh	r3, [r7, #18]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	2181      	movs	r1, #129	@ 0x81
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f005 f869 	bl	800baf8 <USBD_LL_Transmit>
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a42:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a0f      	ldr	r2, [pc, #60]	@ (8006a84 <MSC_BOT_SendCSW+0x54>)
 8006a48:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 8006a60:	230d      	movs	r3, #13
 8006a62:	2181      	movs	r1, #129	@ 0x81
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f005 f847 	bl	800baf8 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8006a70:	231f      	movs	r3, #31
 8006a72:	2101      	movs	r1, #1
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f005 f862 	bl	800bb3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	53425355 	.word	0x53425355

08006a88 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a96:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10c      	bne.n	8006abc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f004 ff95 	bl	800b9e6 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006abc:	2181      	movs	r1, #129	@ 0x81
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f004 ff91 	bl	800b9e6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7a5b      	ldrb	r3, [r3, #9]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d107      	bne.n	8006adc <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8006ad2:	231f      	movs	r3, #31
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f005 f831 	bl	800bb3e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	7a5b      	ldrb	r3, [r3, #9]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d107      	bne.n	8006b10 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b00:	2181      	movs	r1, #129	@ 0x81
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f004 ff6f 	bl	800b9e6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	725a      	strb	r2, [r3, #9]
 8006b0e:	e00d      	b.n	8006b2c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da08      	bge.n	8006b2a <MSC_BOT_CplClrFeature+0x46>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	7a5b      	ldrb	r3, [r3, #9]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d004      	beq.n	8006b2a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006b20:	2101      	movs	r1, #1
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ff84 	bl	8006a30 <MSC_BOT_SendCSW>
 8006b28:	e000      	b.n	8006b2c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006b2a:	bf00      	nop
  }
}
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b5a      	cmp	r3, #90	@ 0x5a
 8006b48:	f200 810e 	bhi.w	8006d68 <SCSI_ProcessCmd+0x234>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <SCSI_ProcessCmd+0x20>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006cc1 	.word	0x08006cc1
 8006b58:	08006d69 	.word	0x08006d69
 8006b5c:	08006d69 	.word	0x08006d69
 8006b60:	08006ccf 	.word	0x08006ccf
 8006b64:	08006d69 	.word	0x08006d69
 8006b68:	08006d69 	.word	0x08006d69
 8006b6c:	08006d69 	.word	0x08006d69
 8006b70:	08006d69 	.word	0x08006d69
 8006b74:	08006d69 	.word	0x08006d69
 8006b78:	08006d69 	.word	0x08006d69
 8006b7c:	08006d69 	.word	0x08006d69
 8006b80:	08006d69 	.word	0x08006d69
 8006b84:	08006d69 	.word	0x08006d69
 8006b88:	08006d69 	.word	0x08006d69
 8006b8c:	08006d69 	.word	0x08006d69
 8006b90:	08006d69 	.word	0x08006d69
 8006b94:	08006d69 	.word	0x08006d69
 8006b98:	08006d69 	.word	0x08006d69
 8006b9c:	08006cdd 	.word	0x08006cdd
 8006ba0:	08006d69 	.word	0x08006d69
 8006ba4:	08006d69 	.word	0x08006d69
 8006ba8:	08006d69 	.word	0x08006d69
 8006bac:	08006d69 	.word	0x08006d69
 8006bb0:	08006d69 	.word	0x08006d69
 8006bb4:	08006d69 	.word	0x08006d69
 8006bb8:	08006d69 	.word	0x08006d69
 8006bbc:	08006d07 	.word	0x08006d07
 8006bc0:	08006ceb 	.word	0x08006ceb
 8006bc4:	08006d69 	.word	0x08006d69
 8006bc8:	08006d69 	.word	0x08006d69
 8006bcc:	08006cf9 	.word	0x08006cf9
 8006bd0:	08006d69 	.word	0x08006d69
 8006bd4:	08006d69 	.word	0x08006d69
 8006bd8:	08006d69 	.word	0x08006d69
 8006bdc:	08006d69 	.word	0x08006d69
 8006be0:	08006d23 	.word	0x08006d23
 8006be4:	08006d69 	.word	0x08006d69
 8006be8:	08006d31 	.word	0x08006d31
 8006bec:	08006d69 	.word	0x08006d69
 8006bf0:	08006d69 	.word	0x08006d69
 8006bf4:	08006d3f 	.word	0x08006d3f
 8006bf8:	08006d69 	.word	0x08006d69
 8006bfc:	08006d4d 	.word	0x08006d4d
 8006c00:	08006d69 	.word	0x08006d69
 8006c04:	08006d69 	.word	0x08006d69
 8006c08:	08006d69 	.word	0x08006d69
 8006c0c:	08006d69 	.word	0x08006d69
 8006c10:	08006d5b 	.word	0x08006d5b
 8006c14:	08006d69 	.word	0x08006d69
 8006c18:	08006d69 	.word	0x08006d69
 8006c1c:	08006d69 	.word	0x08006d69
 8006c20:	08006d69 	.word	0x08006d69
 8006c24:	08006d69 	.word	0x08006d69
 8006c28:	08006d69 	.word	0x08006d69
 8006c2c:	08006d69 	.word	0x08006d69
 8006c30:	08006d69 	.word	0x08006d69
 8006c34:	08006d69 	.word	0x08006d69
 8006c38:	08006d69 	.word	0x08006d69
 8006c3c:	08006d69 	.word	0x08006d69
 8006c40:	08006d69 	.word	0x08006d69
 8006c44:	08006d69 	.word	0x08006d69
 8006c48:	08006d69 	.word	0x08006d69
 8006c4c:	08006d69 	.word	0x08006d69
 8006c50:	08006d69 	.word	0x08006d69
 8006c54:	08006d69 	.word	0x08006d69
 8006c58:	08006d69 	.word	0x08006d69
 8006c5c:	08006d69 	.word	0x08006d69
 8006c60:	08006d69 	.word	0x08006d69
 8006c64:	08006d69 	.word	0x08006d69
 8006c68:	08006d69 	.word	0x08006d69
 8006c6c:	08006d69 	.word	0x08006d69
 8006c70:	08006d69 	.word	0x08006d69
 8006c74:	08006d69 	.word	0x08006d69
 8006c78:	08006d69 	.word	0x08006d69
 8006c7c:	08006d69 	.word	0x08006d69
 8006c80:	08006d69 	.word	0x08006d69
 8006c84:	08006d69 	.word	0x08006d69
 8006c88:	08006d69 	.word	0x08006d69
 8006c8c:	08006d69 	.word	0x08006d69
 8006c90:	08006d69 	.word	0x08006d69
 8006c94:	08006d69 	.word	0x08006d69
 8006c98:	08006d69 	.word	0x08006d69
 8006c9c:	08006d69 	.word	0x08006d69
 8006ca0:	08006d69 	.word	0x08006d69
 8006ca4:	08006d69 	.word	0x08006d69
 8006ca8:	08006d69 	.word	0x08006d69
 8006cac:	08006d69 	.word	0x08006d69
 8006cb0:	08006d69 	.word	0x08006d69
 8006cb4:	08006d69 	.word	0x08006d69
 8006cb8:	08006d69 	.word	0x08006d69
 8006cbc:	08006d15 	.word	0x08006d15
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f85c 	bl	8006d84 <SCSI_TestUnitReady>
      break;
 8006ccc:	e055      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fa09 	bl	80070ec <SCSI_RequestSense>
      break;
 8006cda:	e04e      	b.n	8006d7a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f888 	bl	8006df8 <SCSI_Inquiry>
      break;
 8006ce8:	e047      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fa9e 	bl	8007232 <SCSI_StartStopUnit>
      break;
 8006cf6:	e040      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa97 	bl	8007232 <SCSI_StartStopUnit>
      break;
 8006d04:	e039      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f99d 	bl	800704c <SCSI_ModeSense6>
      break;
 8006d12:	e032      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f9be 	bl	800709c <SCSI_ModeSense10>
      break;
 8006d20:	e02b      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f92a 	bl	8006f82 <SCSI_ReadFormatCapacity>
      break;
 8006d2e:	e024      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 f8bc 	bl	8006eb4 <SCSI_ReadCapacity10>
      break;
 8006d3c:	e01d      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4619      	mov	r1, r3
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fa88 	bl	800725a <SCSI_Read10>
      break;
 8006d4a:	e016      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4619      	mov	r1, r3
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fb0d 	bl	8007372 <SCSI_Write10>
      break;
 8006d58:	e00f      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fbb6 	bl	80074d2 <SCSI_Verify10>
      break;
 8006d66:	e008      	b.n	8006d7a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d68:	7af9      	ldrb	r1, [r7, #11]
 8006d6a:	2320      	movs	r3, #32
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fa26 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 8006d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d78:	e000      	b.n	8006d7c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d98:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006daa:	2320      	movs	r3, #32
 8006dac:	2205      	movs	r2, #5
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fa06 	bl	80071c0 <SCSI_SenseCode>

    return -1;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006db8:	e019      	b.n	8006dee <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	7afa      	ldrb	r2, [r7, #11]
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006dce:	7af9      	ldrb	r1, [r7, #11]
 8006dd0:	233a      	movs	r3, #58	@ 0x3a
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f9f3 	bl	80071c0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2205      	movs	r2, #5
 8006dde:	721a      	strb	r2, [r3, #8]

    return -1;
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006de4:	e003      	b.n	8006dee <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	815a      	strh	r2, [r3, #10]

  return 0;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	@ 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	460b      	mov	r3, r1
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e0c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3301      	adds	r3, #1
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d014      	beq.n	8006e46 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006e1c:	2307      	movs	r3, #7
 8006e1e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	8bfa      	ldrh	r2, [r7, #30]
 8006e24:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e26:	e00a      	b.n	8006e3e <SCSI_Inquiry+0x46>
    {
      len--;
 8006e28:	8bfb      	ldrh	r3, [r7, #30]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006e2e:	8bfa      	ldrh	r2, [r7, #30]
 8006e30:	8bfb      	ldrh	r3, [r7, #30]
 8006e32:	491f      	ldr	r1, [pc, #124]	@ (8006eb0 <SCSI_Inquiry+0xb8>)
 8006e34:	5c89      	ldrb	r1, [r1, r2]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	4413      	add	r3, r2
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e3e:	8bfb      	ldrh	r3, [r7, #30]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f1      	bne.n	8006e28 <SCSI_Inquiry+0x30>
 8006e44:	e02d      	b.n	8006ea2 <SCSI_Inquiry+0xaa>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e4c:	69d9      	ldr	r1, [r3, #28]
 8006e4e:	7afa      	ldrb	r2, [r7, #11]
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	3305      	adds	r3, #5
 8006e64:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d303      	bcc.n	8006e7c <SCSI_Inquiry+0x84>
    {
      len = params[4];
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	8bfa      	ldrh	r2, [r7, #30]
 8006e80:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e82:	e00b      	b.n	8006e9c <SCSI_Inquiry+0xa4>
    {
      len--;
 8006e84:	8bfb      	ldrh	r3, [r7, #30]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006e8a:	8bfb      	ldrh	r3, [r7, #30]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	441a      	add	r2, r3
 8006e90:	8bfb      	ldrh	r3, [r7, #30]
 8006e92:	7811      	ldrb	r1, [r2, #0]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4413      	add	r3, r2
 8006e98:	460a      	mov	r2, r1
 8006e9a:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <SCSI_Inquiry+0x8c>
    }
  }

  return 0;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3724      	adds	r7, #36	@ 0x24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	0800bee0 	.word	0x0800bee0

08006eb4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec8:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	f502 7118 	add.w	r1, r2, #608	@ 0x260
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	f202 225e 	addw	r2, r2, #606	@ 0x25e
 8006ede:	7af8      	ldrb	r0, [r7, #11]
 8006ee0:	4798      	blx	r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ee8:	7af9      	ldrb	r1, [r7, #11]
 8006eea:	233a      	movs	r3, #58	@ 0x3a
 8006eec:	2202      	movs	r2, #2
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f966 	bl	80071c0 <SCSI_SenseCode>
    return -1;
 8006ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ef8:	e03f      	b.n	8006f7a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f00:	3b01      	subs	r3, #1
 8006f02:	0e1b      	lsrs	r3, r3, #24
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f10:	3b01      	subs	r3, #1
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f20:	3b01      	subs	r3, #1
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f40:	161b      	asrs	r3, r3, #24
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f4e:	141b      	asrs	r3, r3, #16
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f5c:	0a1b      	lsrs	r3, r3, #8
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2208      	movs	r2, #8
 8006f76:	815a      	strh	r2, [r3, #10]
    return 0;
 8006f78:	2300      	movs	r3, #0
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b088      	sub	sp, #32
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f96:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	83fb      	strh	r3, [r7, #30]
 8006f9c:	e007      	b.n	8006fae <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8006f9e:	8bfb      	ldrh	r3, [r7, #30]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8006fa8:	8bfb      	ldrh	r3, [r7, #30]
 8006faa:	3301      	adds	r3, #1
 8006fac:	83fb      	strh	r3, [r7, #30]
 8006fae:	8bfb      	ldrh	r3, [r7, #30]
 8006fb0:	2b0b      	cmp	r3, #11
 8006fb2:	d9f4      	bls.n	8006f9e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f107 0216 	add.w	r2, r7, #22
 8006fc0:	f107 0110 	add.w	r1, r7, #16
 8006fc4:	7af8      	ldrb	r0, [r7, #11]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fce:	7af9      	ldrb	r1, [r7, #11]
 8006fd0:	233a      	movs	r3, #58	@ 0x3a
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f8f3 	bl	80071c0 <SCSI_SenseCode>
    return -1;
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fde:	e030      	b.n	8007042 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	0e1b      	lsrs	r3, r3, #24
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	0c1b      	lsrs	r3, r3, #16
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	3b01      	subs	r3, #1
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b2da      	uxtb	r2, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b2da      	uxtb	r2, r3
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2202      	movs	r2, #2
 800701a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800701c:	8afb      	ldrh	r3, [r7, #22]
 800701e:	141b      	asrs	r3, r3, #16
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007026:	8afb      	ldrh	r3, [r7, #22]
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	b29b      	uxth	r3, r3
 800702c:	b2da      	uxtb	r2, r3
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007032:	8afb      	ldrh	r3, [r7, #22]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	220c      	movs	r2, #12
 800703e:	815a      	strh	r2, [r3, #10]
    return 0;
 8007040:	2300      	movs	r3, #0
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007060:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007062:	2308      	movs	r3, #8
 8007064:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	8afa      	ldrh	r2, [r7, #22]
 800706a:	815a      	strh	r2, [r3, #10]

  while (len)
 800706c:	e00a      	b.n	8007084 <SCSI_ModeSense6+0x38>
  {
    len--;
 800706e:	8afb      	ldrh	r3, [r7, #22]
 8007070:	3b01      	subs	r3, #1
 8007072:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007074:	8afa      	ldrh	r2, [r7, #22]
 8007076:	8afb      	ldrh	r3, [r7, #22]
 8007078:	4907      	ldr	r1, [pc, #28]	@ (8007098 <SCSI_ModeSense6+0x4c>)
 800707a:	5c89      	ldrb	r1, [r1, r2]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	460a      	mov	r2, r1
 8007082:	731a      	strb	r2, [r3, #12]
  while (len)
 8007084:	8afb      	ldrh	r3, [r7, #22]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f1      	bne.n	800706e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	0800bee8 	.word	0x0800bee8

0800709c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	460b      	mov	r3, r1
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80070aa:	2308      	movs	r3, #8
 80070ac:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b4:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	8afa      	ldrh	r2, [r7, #22]
 80070ba:	815a      	strh	r2, [r3, #10]

  while (len)
 80070bc:	e00a      	b.n	80070d4 <SCSI_ModeSense10+0x38>
  {
    len--;
 80070be:	8afb      	ldrh	r3, [r7, #22]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80070c4:	8afa      	ldrh	r2, [r7, #22]
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	4907      	ldr	r1, [pc, #28]	@ (80070e8 <SCSI_ModeSense10+0x4c>)
 80070ca:	5c89      	ldrb	r1, [r1, r2]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	460a      	mov	r2, r1
 80070d2:	731a      	strb	r2, [r3, #12]
  while (len)
 80070d4:	8afb      	ldrh	r3, [r7, #22]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f1      	bne.n	80070be <SCSI_ModeSense10+0x22>
  }

  return 0;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	0800bef0 	.word	0x0800bef0

080070ec <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	460b      	mov	r3, r1
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007100:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
 8007106:	e007      	b.n	8007118 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4413      	add	r3, r2
 800710e:	2200      	movs	r2, #0
 8007110:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	3301      	adds	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b11      	cmp	r3, #17
 800711c:	d9f4      	bls.n	8007108 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2270      	movs	r2, #112	@ 0x70
 8007122:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	220c      	movs	r2, #12
 8007128:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f893 225c 	ldrb.w	r2, [r3, #604]	@ 0x25c
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8007136:	429a      	cmp	r2, r3
 8007138:	d02e      	beq.n	8007198 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	3347      	adds	r3, #71	@ 0x47
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4413      	add	r3, r2
 8007148:	791a      	ldrb	r2, [r3, #4]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	3347      	adds	r3, #71	@ 0x47
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4413      	add	r3, r2
 800715c:	7a5a      	ldrb	r2, [r3, #9]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	3347      	adds	r3, #71	@ 0x47
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	7a1a      	ldrb	r2, [r3, #8]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800717c:	3301      	adds	r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800718c:	2b04      	cmp	r3, #4
 800718e:	d103      	bne.n	8007198 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2212      	movs	r2, #18
 800719c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b12      	cmp	r3, #18
 80071a6:	d805      	bhi.n	80071b4 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	70fb      	strb	r3, [r7, #3]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70bb      	strb	r3, [r7, #2]
 80071d6:	4613      	mov	r3, r2
 80071d8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071e0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	3347      	adds	r3, #71	@ 0x47
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	4413      	add	r3, r2
 80071f0:	78ba      	ldrb	r2, [r7, #2]
 80071f2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	3347      	adds	r3, #71	@ 0x47
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800720c:	3301      	adds	r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800721c:	2b04      	cmp	r3, #4
 800721e:	d103      	bne.n	8007228 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  }
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	460b      	mov	r3, r1
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007246:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	815a      	strh	r2, [r3, #10]
  return 0;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	460b      	mov	r3, r1
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	7a1b      	ldrb	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d16e      	bne.n	8007356 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 800727e:	b25b      	sxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	db0a      	blt.n	800729a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800728a:	2320      	movs	r3, #32
 800728c:	2205      	movs	r2, #5
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ff96 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 8007294:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007298:	e067      	b.n	800736a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	7afa      	ldrb	r2, [r7, #11]
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072ae:	7af9      	ldrb	r1, [r7, #11]
 80072b0:	233a      	movs	r3, #58	@ 0x3a
 80072b2:	2202      	movs	r2, #2
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff ff83 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072be:	e054      	b.n	800736a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3302      	adds	r3, #2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3303      	adds	r3, #3
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072da:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	3205      	adds	r2, #5
 80072e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80072e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3307      	adds	r3, #7
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	3208      	adds	r2, #8
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800730c:	7af9      	ldrb	r1, [r7, #11]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 f912 	bl	8007538 <SCSI_CheckAddressRange>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	da02      	bge.n	8007320 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800731a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800731e:	e024      	b.n	800736a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2202      	movs	r2, #2
 8007324:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	f8b1 125e 	ldrh.w	r1, [r1, #606]	@ 0x25e
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	429a      	cmp	r2, r3
 800733e:	d00a      	beq.n	8007356 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8007346:	2320      	movs	r3, #32
 8007348:	2205      	movs	r2, #5
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff38 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 8007350:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007354:	e009      	b.n	800736a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800735c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f90a 	bl	800757c <SCSI_ProcessRead>
 8007368:	4603      	mov	r3, r0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	460b      	mov	r3, r1
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007386:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	7a1b      	ldrb	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 8096 	bne.w	80074be <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8007398:	b25b      	sxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	da0a      	bge.n	80073b4 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 80073a4:	2320      	movs	r3, #32
 80073a6:	2205      	movs	r2, #5
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ff09 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073b2:	e08a      	b.n	80074ca <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	7afa      	ldrb	r2, [r7, #11]
 80073be:	4610      	mov	r0, r2
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073c8:	7af9      	ldrb	r1, [r7, #11]
 80073ca:	233a      	movs	r3, #58	@ 0x3a
 80073cc:	2202      	movs	r2, #2
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fef6 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073d8:	e077      	b.n	80074ca <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	7afa      	ldrb	r2, [r7, #11]
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80073ee:	7af9      	ldrb	r1, [r7, #11]
 80073f0:	2327      	movs	r3, #39	@ 0x27
 80073f2:	2202      	movs	r2, #2
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fee3 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073fe:	e064      	b.n	80074ca <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3302      	adds	r3, #2
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3303      	adds	r3, #3
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007410:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3304      	adds	r3, #4
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800741a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	3205      	adds	r2, #5
 8007420:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007422:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3307      	adds	r3, #7
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	3208      	adds	r2, #8
 8007436:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007438:	431a      	orrs	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800744c:	7af9      	ldrb	r1, [r7, #11]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f872 	bl	8007538 <SCSI_CheckAddressRange>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	da02      	bge.n	8007460 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800745a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800745e:	e034      	b.n	80074ca <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	429a      	cmp	r2, r3
 800747c:	d00a      	beq.n	8007494 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8007484:	2320      	movs	r3, #32
 8007486:	2205      	movs	r2, #5
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fe99 	bl	80071c0 <SCSI_SenseCode>
      return -1;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007492:	e01a      	b.n	80074ca <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749a:	bf28      	it	cs
 800749c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80074a0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2201      	movs	r2, #1
 80074a6:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f103 020c 	add.w	r2, r3, #12
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2101      	movs	r1, #1
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f004 fb42 	bl	800bb3e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e005      	b.n	80074ca <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	4619      	mov	r1, r3
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f8ce 	bl	8007664 <SCSI_ProcessWrite>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	460b      	mov	r3, r1
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3301      	adds	r3, #1
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80074f6:	7af9      	ldrb	r1, [r7, #11]
 80074f8:	2324      	movs	r3, #36	@ 0x24
 80074fa:	2205      	movs	r2, #5
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fe5f 	bl	80071c0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007506:	e013      	b.n	8007530 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007514:	7af9      	ldrb	r1, [r7, #11]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f80e 	bl	8007538 <SCSI_CheckAddressRange>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	da02      	bge.n	8007528 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007526:	e003      	b.n	8007530 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2200      	movs	r2, #0
 800752c:	815a      	strh	r2, [r3, #10]
  return 0;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	460b      	mov	r3, r1
 8007546:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	441a      	add	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 800755c:	429a      	cmp	r2, r3
 800755e:	d908      	bls.n	8007572 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007560:	7af9      	ldrb	r1, [r7, #11]
 8007562:	2321      	movs	r3, #33	@ 0x21
 8007564:	2205      	movs	r2, #5
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fe2a 	bl	80071c0 <SCSI_SenseCode>
    return -1;
 800756c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007570:	e000      	b.n	8007574 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800757c:	b590      	push	{r4, r7, lr}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a8:	bf28      	it	cs
 80075aa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80075ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075b6:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80075ca:	4618      	mov	r0, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	78f8      	ldrb	r0, [r7, #3]
 80075d6:	47a0      	blx	r4
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da08      	bge.n	80075f0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80075de:	78f9      	ldrb	r1, [r7, #3]
 80075e0:	2311      	movs	r3, #17
 80075e2:	2204      	movs	r2, #4
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fdeb 	bl	80071c0 <SCSI_SenseCode>
    return -1;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ee:	e035      	b.n	800765c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f103 020c 	add.w	r2, r3, #12
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2181      	movs	r1, #129	@ 0x81
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f004 fa7b 	bl	800baf8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800760e:	4619      	mov	r1, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	fbb3 f3f1 	udiv	r3, r3, r1
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800762a:	4619      	mov	r1, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2203      	movs	r2, #3
 8007658:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}

08007664 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007664:	b590      	push	{r4, r7, lr}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007690:	bf28      	it	cs
 8007692:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007696:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800769e:	695c      	ldr	r4, [r3, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f103 010c 	add.w	r1, r3, #12
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80076b2:	4618      	mov	r0, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	78f8      	ldrb	r0, [r7, #3]
 80076be:	47a0      	blx	r4
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da08      	bge.n	80076d8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80076c6:	78f9      	ldrb	r1, [r7, #3]
 80076c8:	2303      	movs	r3, #3
 80076ca:	2204      	movs	r2, #4
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff fd77 	bl	80071c0 <SCSI_SenseCode>

    return -1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076d6:	e045      	b.n	8007764 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80076e4:	4619      	mov	r1, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ec:	441a      	add	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8007700:	4619      	mov	r1, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	fbb3 f3f1 	udiv	r3, r3, r1
 8007708:	1ad2      	subs	r2, r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff f97f 	bl	8006a30 <MSC_BOT_SendCSW>
 8007732:	e016      	b.n	8007762 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007748:	bf28      	it	cs
 800774a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800774e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f103 020c 	add.w	r2, r3, #12
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	b29b      	uxth	r3, r3
 800775a:	2101      	movs	r1, #1
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f004 f9ee 	bl	800bb3e <USBD_LL_PrepareReceive>
  }

  return 0;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007780:	2302      	movs	r3, #2
 8007782:	e01a      	b.n	80077ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	79fa      	ldrb	r2, [r7, #7]
 80077b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f004 f848 	bl	800b848 <USBD_LL_Init>

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d006      	beq.n	80077e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
 80077e2:	e001      	b.n	80077e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80077e4:	2302      	movs	r3, #2
 80077e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f004 f873 	bl	800b8e8 <USBD_LL_Start>

  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800782c:	2302      	movs	r3, #2
 800782e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00c      	beq.n	8007854 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	78fa      	ldrb	r2, [r7, #3]
 8007874:	4611      	mov	r1, r2
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3

  return USBD_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fed7 	bl	800864a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078aa:	461a      	mov	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d016      	beq.n	80078ee <USBD_LL_SetupStage+0x6a>
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d81c      	bhi.n	80078fe <USBD_LL_SetupStage+0x7a>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <USBD_LL_SetupStage+0x4a>
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d008      	beq.n	80078de <USBD_LL_SetupStage+0x5a>
 80078cc:	e017      	b.n	80078fe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f9ca 	bl	8007c70 <USBD_StdDevReq>
      break;
 80078dc:	e01a      	b.n	8007914 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa2c 	bl	8007d44 <USBD_StdItfReq>
      break;
 80078ec:	e012      	b.n	8007914 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa6c 	bl	8007dd4 <USBD_StdEPReq>
      break;
 80078fc:	e00a      	b.n	8007914 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007904:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007908:	b2db      	uxtb	r3, r3
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f004 f86a 	bl	800b9e6 <USBD_LL_StallEP>
      break;
 8007912:	bf00      	nop
  }

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	460b      	mov	r3, r1
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d14b      	bne.n	80079ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007938:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007940:	2b03      	cmp	r3, #3
 8007942:	d134      	bne.n	80079ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d919      	bls.n	8007984 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007966:	429a      	cmp	r2, r3
 8007968:	d203      	bcs.n	8007972 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800796e:	b29b      	uxth	r3, r3
 8007970:	e002      	b.n	8007978 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 ff35 	bl	80087ec <USBD_CtlContinueRx>
 8007982:	e038      	b.n	80079f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007996:	2b03      	cmp	r3, #3
 8007998:	d105      	bne.n	80079a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 ff32 	bl	8008810 <USBD_CtlSendStatus>
 80079ac:	e023      	b.n	80079f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	d11e      	bne.n	80079f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079c0:	2100      	movs	r1, #0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f004 f80f 	bl	800b9e6 <USBD_LL_StallEP>
 80079c8:	e015      	b.n	80079f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00d      	beq.n	80079f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d108      	bne.n	80079f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	4611      	mov	r1, r2
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	4798      	blx	r3
 80079f0:	e001      	b.n	80079f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079f2:	2302      	movs	r3, #2
 80079f4:	e000      	b.n	80079f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d17f      	bne.n	8007b14 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3314      	adds	r3, #20
 8007a18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d15c      	bne.n	8007ade <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d915      	bls.n	8007a5c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	1ad2      	subs	r2, r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 febd 	bl	80087c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f004 f872 	bl	800bb3e <USBD_LL_PrepareReceive>
 8007a5a:	e04e      	b.n	8007afa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	6912      	ldr	r2, [r2, #16]
 8007a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a68:	fb01 f202 	mul.w	r2, r1, r2
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d11c      	bne.n	8007aac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d316      	bcc.n	8007aac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d20f      	bcs.n	8007aac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 fe99 	bl	80087c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f004 f84a 	bl	800bb3e <USBD_LL_PrepareReceive>
 8007aaa:	e026      	b.n	8007afa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d105      	bne.n	8007ace <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ace:	2180      	movs	r1, #128	@ 0x80
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f003 ff88 	bl	800b9e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fead 	bl	8008836 <USBD_CtlReceiveStatus>
 8007adc:	e00d      	b.n	8007afa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d004      	beq.n	8007af2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007af2:	2180      	movs	r1, #128	@ 0x80
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f003 ff76 	bl	800b9e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d11d      	bne.n	8007b40 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff fe81 	bl	800780c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b12:	e015      	b.n	8007b40 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00d      	beq.n	8007b3c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d108      	bne.n	8007b3c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	7afa      	ldrb	r2, [r7, #11]
 8007b34:	4611      	mov	r1, r2
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	4798      	blx	r3
 8007b3a:	e001      	b.n	8007b40 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e000      	b.n	8007b42 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b52:	2340      	movs	r3, #64	@ 0x40
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 fee0 	bl	800b91e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2240      	movs	r2, #64	@ 0x40
 8007b6a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b6e:	2340      	movs	r3, #64	@ 0x40
 8007b70:	2200      	movs	r2, #0
 8007b72:	2180      	movs	r1, #128	@ 0x80
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f003 fed2 	bl	800b91e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2240      	movs	r2, #64	@ 0x40
 8007b84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6852      	ldr	r2, [r2, #4]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
  }

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr

08007bea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2204      	movs	r2, #4
 8007c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d105      	bne.n	8007c30 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d10b      	bne.n	8007c66 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	d005      	beq.n	8007c96 <USBD_StdDevReq+0x26>
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d84f      	bhi.n	8007d2e <USBD_StdDevReq+0xbe>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <USBD_StdDevReq+0x36>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d14b      	bne.n	8007d2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
      break;
 8007ca4:	e048      	b.n	8007d38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d839      	bhi.n	8007d22 <USBD_StdDevReq+0xb2>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <USBD_StdDevReq+0x44>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007d19 	.word	0x08007d19
 8007cbc:	08007d23 	.word	0x08007d23
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007d23 	.word	0x08007d23
 8007cc8:	08007ce7 	.word	0x08007ce7
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007d23 	.word	0x08007d23
 8007cd4:	08007cfb 	.word	0x08007cfb
 8007cd8:	08007cf1 	.word	0x08007cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f9dc 	bl	800809c <USBD_GetDescriptor>
          break;
 8007ce4:	e022      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fb3f 	bl	800836c <USBD_SetAddress>
          break;
 8007cee:	e01d      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb7e 	bl	80083f4 <USBD_SetConfig>
          break;
 8007cf8:	e018      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc07 	bl	8008510 <USBD_GetConfig>
          break;
 8007d02:	e013      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc37 	bl	800857a <USBD_GetStatus>
          break;
 8007d0c:	e00e      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc65 	bl	80085e0 <USBD_SetFeature>
          break;
 8007d16:	e009      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc74 	bl	8008608 <USBD_ClrFeature>
          break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fcc9 	bl	80086bc <USBD_CtlError>
          break;
 8007d2a:	bf00      	nop
      }
      break;
 8007d2c:	e004      	b.n	8007d38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fcc3 	bl	80086bc <USBD_CtlError>
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d5a:	2b40      	cmp	r3, #64	@ 0x40
 8007d5c:	d005      	beq.n	8007d6a <USBD_StdItfReq+0x26>
 8007d5e:	2b40      	cmp	r3, #64	@ 0x40
 8007d60:	d82e      	bhi.n	8007dc0 <USBD_StdItfReq+0x7c>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <USBD_StdItfReq+0x26>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d12a      	bne.n	8007dc0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d70:	3b01      	subs	r3, #1
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d81d      	bhi.n	8007db2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	889b      	ldrh	r3, [r3, #4]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d813      	bhi.n	8007da8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	88db      	ldrh	r3, [r3, #6]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d110      	bne.n	8007dbc <USBD_StdItfReq+0x78>
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10d      	bne.n	8007dbc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fd35 	bl	8008810 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007da6:	e009      	b.n	8007dbc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fc86 	bl	80086bc <USBD_CtlError>
          break;
 8007db0:	e004      	b.n	8007dbc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc81 	bl	80086bc <USBD_CtlError>
          break;
 8007dba:	e000      	b.n	8007dbe <USBD_StdItfReq+0x7a>
          break;
 8007dbc:	bf00      	nop
      }
      break;
 8007dbe:	e004      	b.n	8007dca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc7a 	bl	80086bc <USBD_CtlError>
      break;
 8007dc8:	bf00      	nop
  }

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	889b      	ldrh	r3, [r3, #4]
 8007de6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	d007      	beq.n	8007e04 <USBD_StdEPReq+0x30>
 8007df4:	2b40      	cmp	r3, #64	@ 0x40
 8007df6:	f200 8146 	bhi.w	8008086 <USBD_StdEPReq+0x2b2>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <USBD_StdEPReq+0x40>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	f040 8141 	bne.w	8008086 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
      break;
 8007e12:	e13d      	b.n	8008090 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d10a      	bne.n	8007e36 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	e12d      	b.n	8008092 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d007      	beq.n	8007e4e <USBD_StdEPReq+0x7a>
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	f300 811b 	bgt.w	800807a <USBD_StdEPReq+0x2a6>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d072      	beq.n	8007f2e <USBD_StdEPReq+0x15a>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d03a      	beq.n	8007ec2 <USBD_StdEPReq+0xee>
 8007e4c:	e115      	b.n	800807a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d002      	beq.n	8007e5e <USBD_StdEPReq+0x8a>
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d015      	beq.n	8007e88 <USBD_StdEPReq+0xb4>
 8007e5c:	e02b      	b.n	8007eb6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00c      	beq.n	8007e7e <USBD_StdEPReq+0xaa>
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b80      	cmp	r3, #128	@ 0x80
 8007e68:	d009      	beq.n	8007e7e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f003 fdb9 	bl	800b9e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e74:	2180      	movs	r1, #128	@ 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f003 fdb5 	bl	800b9e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e7c:	e020      	b.n	8007ec0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc1b 	bl	80086bc <USBD_CtlError>
              break;
 8007e86:	e01b      	b.n	8007ec0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10e      	bne.n	8007eae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <USBD_StdEPReq+0xda>
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b80      	cmp	r3, #128	@ 0x80
 8007e9a:	d008      	beq.n	8007eae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f003 fd9c 	bl	800b9e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fcae 	bl	8008810 <USBD_CtlSendStatus>

              break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fbff 	bl	80086bc <USBD_CtlError>
              break;
 8007ebe:	bf00      	nop
          }
          break;
 8007ec0:	e0e0      	b.n	8008084 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d002      	beq.n	8007ed2 <USBD_StdEPReq+0xfe>
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d015      	beq.n	8007efc <USBD_StdEPReq+0x128>
 8007ed0:	e026      	b.n	8007f20 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <USBD_StdEPReq+0x11e>
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b80      	cmp	r3, #128	@ 0x80
 8007edc:	d009      	beq.n	8007ef2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f003 fd7f 	bl	800b9e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ee8:	2180      	movs	r1, #128	@ 0x80
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f003 fd7b 	bl	800b9e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ef0:	e01c      	b.n	8007f2c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fbe1 	bl	80086bc <USBD_CtlError>
              break;
 8007efa:	e017      	b.n	8007f2c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d112      	bne.n	8007f2a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d004      	beq.n	8007f18 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f003 fd86 	bl	800ba24 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc79 	bl	8008810 <USBD_CtlSendStatus>
              }
              break;
 8007f1e:	e004      	b.n	8007f2a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fbca 	bl	80086bc <USBD_CtlError>
              break;
 8007f28:	e000      	b.n	8007f2c <USBD_StdEPReq+0x158>
              break;
 8007f2a:	bf00      	nop
          }
          break;
 8007f2c:	e0aa      	b.n	8008084 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d002      	beq.n	8007f3e <USBD_StdEPReq+0x16a>
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d032      	beq.n	8007fa2 <USBD_StdEPReq+0x1ce>
 8007f3c:	e097      	b.n	800806e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <USBD_StdEPReq+0x180>
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d004      	beq.n	8007f54 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fbb5 	bl	80086bc <USBD_CtlError>
                break;
 8007f52:	e091      	b.n	8008078 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da0b      	bge.n	8007f74 <USBD_StdEPReq+0x1a0>
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	e00b      	b.n	8007f8c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2202      	movs	r2, #2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fbf8 	bl	8008790 <USBD_CtlSendData>
              break;
 8007fa0:	e06a      	b.n	8008078 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da11      	bge.n	8007fce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d117      	bne.n	8007ff4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb78 	bl	80086bc <USBD_CtlError>
                  break;
 8007fcc:	e054      	b.n	8008078 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb65 	bl	80086bc <USBD_CtlError>
                  break;
 8007ff2:	e041      	b.n	8008078 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da0b      	bge.n	8008014 <USBD_StdEPReq+0x240>
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	3310      	adds	r3, #16
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	e00b      	b.n	800802c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	3304      	adds	r3, #4
 800802c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <USBD_StdEPReq+0x266>
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b80      	cmp	r3, #128	@ 0x80
 8008038:	d103      	bne.n	8008042 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e00e      	b.n	8008060 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f003 fd0b 	bl	800ba62 <USBD_LL_IsStallEP>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2201      	movs	r2, #1
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e002      	b.n	8008060 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2202      	movs	r2, #2
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb92 	bl	8008790 <USBD_CtlSendData>
              break;
 800806c:	e004      	b.n	8008078 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb23 	bl	80086bc <USBD_CtlError>
              break;
 8008076:	bf00      	nop
          }
          break;
 8008078:	e004      	b.n	8008084 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fb1d 	bl	80086bc <USBD_CtlError>
          break;
 8008082:	bf00      	nop
      }
      break;
 8008084:	e004      	b.n	8008090 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fb17 	bl	80086bc <USBD_CtlError>
      break;
 800808e:	bf00      	nop
  }

  return ret;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b06      	cmp	r3, #6
 80080be:	f200 8128 	bhi.w	8008312 <USBD_GetDescriptor+0x276>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <USBD_GetDescriptor+0x2c>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	080080fd 	.word	0x080080fd
 80080d0:	0800813d 	.word	0x0800813d
 80080d4:	08008313 	.word	0x08008313
 80080d8:	08008313 	.word	0x08008313
 80080dc:	080082b3 	.word	0x080082b3
 80080e0:	080082df 	.word	0x080082df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7c12      	ldrb	r2, [r2, #16]
 80080f0:	f107 0108 	add.w	r1, r7, #8
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	60f8      	str	r0, [r7, #12]
      break;
 80080fa:	e112      	b.n	8008322 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7c1b      	ldrb	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810c:	f107 0208 	add.w	r2, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800811e:	e100      	b.n	8008322 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	f107 0208 	add.w	r2, r7, #8
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	2202      	movs	r2, #2
 8008138:	701a      	strb	r2, [r3, #0]
      break;
 800813a:	e0f2      	b.n	8008322 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	885b      	ldrh	r3, [r3, #2]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b05      	cmp	r3, #5
 8008144:	f200 80ac 	bhi.w	80082a0 <USBD_GetDescriptor+0x204>
 8008148:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <USBD_GetDescriptor+0xb4>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008169 	.word	0x08008169
 8008154:	0800819d 	.word	0x0800819d
 8008158:	080081d1 	.word	0x080081d1
 800815c:	08008205 	.word	0x08008205
 8008160:	08008239 	.word	0x08008239
 8008164:	0800826d 	.word	0x0800826d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7c12      	ldrb	r2, [r2, #16]
 8008180:	f107 0108 	add.w	r1, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818a:	e091      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa94 	bl	80086bc <USBD_CtlError>
            err++;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	3301      	adds	r3, #1
 8008198:	72fb      	strb	r3, [r7, #11]
          break;
 800819a:	e089      	b.n	80082b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081be:	e077      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa7a 	bl	80086bc <USBD_CtlError>
            err++;
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	3301      	adds	r3, #1
 80081cc:	72fb      	strb	r3, [r7, #11]
          break;
 80081ce:	e06f      	b.n	80082b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f2:	e05d      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa60 	bl	80086bc <USBD_CtlError>
            err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
          break;
 8008202:	e055      	b.n	80082b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	7c12      	ldrb	r2, [r2, #16]
 800821c:	f107 0108 	add.w	r1, r7, #8
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
 8008224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008226:	e043      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa46 	bl	80086bc <USBD_CtlError>
            err++;
 8008230:	7afb      	ldrb	r3, [r7, #11]
 8008232:	3301      	adds	r3, #1
 8008234:	72fb      	strb	r3, [r7, #11]
          break;
 8008236:	e03b      	b.n	80082b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7c12      	ldrb	r2, [r2, #16]
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825a:	e029      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa2c 	bl	80086bc <USBD_CtlError>
            err++;
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	3301      	adds	r3, #1
 8008268:	72fb      	strb	r3, [r7, #11]
          break;
 800826a:	e021      	b.n	80082b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	7c12      	ldrb	r2, [r2, #16]
 8008284:	f107 0108 	add.w	r1, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800828e:	e00f      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa12 	bl	80086bc <USBD_CtlError>
            err++;
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	3301      	adds	r3, #1
 800829c:	72fb      	strb	r3, [r7, #11]
          break;
 800829e:	e007      	b.n	80082b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa0a 	bl	80086bc <USBD_CtlError>
          err++;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	3301      	adds	r3, #1
 80082ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80082ae:	e038      	b.n	8008322 <USBD_GetDescriptor+0x286>
 80082b0:	e037      	b.n	8008322 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1b      	ldrb	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c2:	f107 0208 	add.w	r2, r7, #8
 80082c6:	4610      	mov	r0, r2
 80082c8:	4798      	blx	r3
 80082ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082cc:	e029      	b.n	8008322 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9f3 	bl	80086bc <USBD_CtlError>
        err++;
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	3301      	adds	r3, #1
 80082da:	72fb      	strb	r3, [r7, #11]
      break;
 80082dc:	e021      	b.n	8008322 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7c1b      	ldrb	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	f107 0208 	add.w	r2, r7, #8
 80082f2:	4610      	mov	r0, r2
 80082f4:	4798      	blx	r3
 80082f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	2207      	movs	r2, #7
 80082fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008300:	e00f      	b.n	8008322 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f9d9 	bl	80086bc <USBD_CtlError>
        err++;
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	3301      	adds	r3, #1
 800830e:	72fb      	strb	r3, [r7, #11]
      break;
 8008310:	e007      	b.n	8008322 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9d1 	bl	80086bc <USBD_CtlError>
      err++;
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	3301      	adds	r3, #1
 800831e:	72fb      	strb	r3, [r7, #11]
      break;
 8008320:	bf00      	nop
  }

  if (err != 0U)
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11c      	bne.n	8008362 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008328:	893b      	ldrh	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d011      	beq.n	8008352 <USBD_GetDescriptor+0x2b6>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88da      	ldrh	r2, [r3, #6]
 800833a:	893b      	ldrh	r3, [r7, #8]
 800833c:	4293      	cmp	r3, r2
 800833e:	bf28      	it	cs
 8008340:	4613      	movcs	r3, r2
 8008342:	b29b      	uxth	r3, r3
 8008344:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008346:	893b      	ldrh	r3, [r7, #8]
 8008348:	461a      	mov	r2, r3
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa1f 	bl	8008790 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	88db      	ldrh	r3, [r3, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa58 	bl	8008810 <USBD_CtlSendStatus>
 8008360:	e000      	b.n	8008364 <USBD_GetDescriptor+0x2c8>
    return;
 8008362:	bf00      	nop
    }
  }
}
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	889b      	ldrh	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d130      	bne.n	80083e0 <USBD_SetAddress+0x74>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	88db      	ldrh	r3, [r3, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d12c      	bne.n	80083e0 <USBD_SetAddress+0x74>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	885b      	ldrh	r3, [r3, #2]
 800838a:	2b7f      	cmp	r3, #127	@ 0x7f
 800838c:	d828      	bhi.n	80083e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008398:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d104      	bne.n	80083ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f988 	bl	80086bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	e01d      	b.n	80083ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7bfa      	ldrb	r2, [r7, #15]
 80083b2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f003 fb7d 	bl	800baba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa25 	bl	8008810 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d4:	e009      	b.n	80083ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083de:	e004      	b.n	80083ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f96a 	bl	80086bc <USBD_CtlError>
  }
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	b2da      	uxtb	r2, r3
 8008404:	4b41      	ldr	r3, [pc, #260]	@ (800850c <USBD_SetConfig+0x118>)
 8008406:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008408:	4b40      	ldr	r3, [pc, #256]	@ (800850c <USBD_SetConfig+0x118>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d904      	bls.n	800841a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f952 	bl	80086bc <USBD_CtlError>
 8008418:	e075      	b.n	8008506 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008420:	2b02      	cmp	r3, #2
 8008422:	d002      	beq.n	800842a <USBD_SetConfig+0x36>
 8008424:	2b03      	cmp	r3, #3
 8008426:	d023      	beq.n	8008470 <USBD_SetConfig+0x7c>
 8008428:	e062      	b.n	80084f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800842a:	4b38      	ldr	r3, [pc, #224]	@ (800850c <USBD_SetConfig+0x118>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01a      	beq.n	8008468 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008432:	4b36      	ldr	r3, [pc, #216]	@ (800850c <USBD_SetConfig+0x118>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2203      	movs	r2, #3
 8008440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008444:	4b31      	ldr	r3, [pc, #196]	@ (800850c <USBD_SetConfig+0x118>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f9e8 	bl	8007820 <USBD_SetClassConfig>
 8008450:	4603      	mov	r3, r0
 8008452:	2b02      	cmp	r3, #2
 8008454:	d104      	bne.n	8008460 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f92f 	bl	80086bc <USBD_CtlError>
            return;
 800845e:	e052      	b.n	8008506 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9d5 	bl	8008810 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008466:	e04e      	b.n	8008506 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f9d1 	bl	8008810 <USBD_CtlSendStatus>
        break;
 800846e:	e04a      	b.n	8008506 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008470:	4b26      	ldr	r3, [pc, #152]	@ (800850c <USBD_SetConfig+0x118>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d112      	bne.n	800849e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008480:	4b22      	ldr	r3, [pc, #136]	@ (800850c <USBD_SetConfig+0x118>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800848a:	4b20      	ldr	r3, [pc, #128]	@ (800850c <USBD_SetConfig+0x118>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff f9e4 	bl	800785e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9ba 	bl	8008810 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800849c:	e033      	b.n	8008506 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800849e:	4b1b      	ldr	r3, [pc, #108]	@ (800850c <USBD_SetConfig+0x118>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d01d      	beq.n	80084e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff f9d2 	bl	800785e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084ba:	4b14      	ldr	r3, [pc, #80]	@ (800850c <USBD_SetConfig+0x118>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084c4:	4b11      	ldr	r3, [pc, #68]	@ (800850c <USBD_SetConfig+0x118>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7ff f9a8 	bl	8007820 <USBD_SetClassConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d104      	bne.n	80084e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f8ef 	bl	80086bc <USBD_CtlError>
            return;
 80084de:	e012      	b.n	8008506 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f995 	bl	8008810 <USBD_CtlSendStatus>
        break;
 80084e6:	e00e      	b.n	8008506 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f991 	bl	8008810 <USBD_CtlSendStatus>
        break;
 80084ee:	e00a      	b.n	8008506 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8e2 	bl	80086bc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084f8:	4b04      	ldr	r3, [pc, #16]	@ (800850c <USBD_SetConfig+0x118>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff f9ad 	bl	800785e <USBD_ClrClassConfig>
        break;
 8008504:	bf00      	nop
    }
  }
}
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	200002ec 	.word	0x200002ec

08008510 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	88db      	ldrh	r3, [r3, #6]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d004      	beq.n	800852c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f8c9 	bl	80086bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800852a:	e022      	b.n	8008572 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008532:	2b02      	cmp	r3, #2
 8008534:	dc02      	bgt.n	800853c <USBD_GetConfig+0x2c>
 8008536:	2b00      	cmp	r3, #0
 8008538:	dc03      	bgt.n	8008542 <USBD_GetConfig+0x32>
 800853a:	e015      	b.n	8008568 <USBD_GetConfig+0x58>
 800853c:	2b03      	cmp	r3, #3
 800853e:	d00b      	beq.n	8008558 <USBD_GetConfig+0x48>
 8008540:	e012      	b.n	8008568 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3308      	adds	r3, #8
 800854c:	2201      	movs	r2, #1
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f91d 	bl	8008790 <USBD_CtlSendData>
        break;
 8008556:	e00c      	b.n	8008572 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	2201      	movs	r2, #1
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f915 	bl	8008790 <USBD_CtlSendData>
        break;
 8008566:	e004      	b.n	8008572 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8a6 	bl	80086bc <USBD_CtlError>
        break;
 8008570:	bf00      	nop
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	3b01      	subs	r3, #1
 800858c:	2b02      	cmp	r3, #2
 800858e:	d81e      	bhi.n	80085ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d004      	beq.n	80085a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f88e 	bl	80086bc <USBD_CtlError>
        break;
 80085a0:	e01a      	b.n	80085d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f043 0202 	orr.w	r2, r3, #2
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	330c      	adds	r3, #12
 80085c2:	2202      	movs	r2, #2
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f8e2 	bl	8008790 <USBD_CtlSendData>
      break;
 80085cc:	e004      	b.n	80085d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f873 	bl	80086bc <USBD_CtlError>
      break;
 80085d6:	bf00      	nop
  }
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	885b      	ldrh	r3, [r3, #2]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d106      	bne.n	8008600 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f908 	bl	8008810 <USBD_CtlSendStatus>
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008618:	3b01      	subs	r3, #1
 800861a:	2b02      	cmp	r3, #2
 800861c:	d80b      	bhi.n	8008636 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10c      	bne.n	8008640 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f8ee 	bl	8008810 <USBD_CtlSendStatus>
      }
      break;
 8008634:	e004      	b.n	8008640 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f83f 	bl	80086bc <USBD_CtlError>
      break;
 800863e:	e000      	b.n	8008642 <USBD_ClrFeature+0x3a>
      break;
 8008640:	bf00      	nop
  }
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	785a      	ldrb	r2, [r3, #1]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	3302      	adds	r3, #2
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	3303      	adds	r3, #3
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	b29b      	uxth	r3, r3
 8008676:	4413      	add	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	3304      	adds	r3, #4
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	3305      	adds	r3, #5
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	b29b      	uxth	r3, r3
 8008690:	4413      	add	r3, r2
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	3306      	adds	r3, #6
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	3307      	adds	r3, #7
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	80da      	strh	r2, [r3, #6]

}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr

080086bc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086c6:	2180      	movs	r1, #128	@ 0x80
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f003 f98c 	bl	800b9e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ce:	2100      	movs	r1, #0
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f003 f988 	bl	800b9e6 <USBD_LL_StallEP>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d032      	beq.n	800875a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f834 	bl	8008762 <USBD_GetLen>
 80086fa:	4603      	mov	r3, r0
 80086fc:	3301      	adds	r3, #1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	75fa      	strb	r2, [r7, #23]
 800870e:	461a      	mov	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4413      	add	r3, r2
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	75fa      	strb	r2, [r7, #23]
 8008720:	461a      	mov	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4413      	add	r3, r2
 8008726:	2203      	movs	r2, #3
 8008728:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800872a:	e012      	b.n	8008752 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	60fa      	str	r2, [r7, #12]
 8008732:	7dfa      	ldrb	r2, [r7, #23]
 8008734:	1c51      	adds	r1, r2, #1
 8008736:	75f9      	strb	r1, [r7, #23]
 8008738:	4611      	mov	r1, r2
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	440a      	add	r2, r1
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	75fa      	strb	r2, [r7, #23]
 8008748:	461a      	mov	r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e8      	bne.n	800872c <USBD_GetString+0x4e>
    }
  }
}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800876e:	e005      	b.n	800877c <USBD_GetLen+0x1a>
  {
    len++;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	3301      	adds	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3301      	adds	r3, #1
 800877a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1f5      	bne.n	8008770 <USBD_GetLen+0xe>
  }

  return len;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2202      	movs	r2, #2
 80087a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f003 f99d 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	2100      	movs	r1, #0
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f003 f98b 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	2100      	movs	r1, #0
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f003 f99c 	bl	800bb3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2204      	movs	r2, #4
 800881c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f003 f966 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2205      	movs	r2, #5
 8008842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f003 f976 	bl	800bb3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800886a:	2301      	movs	r3, #1
 800886c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008872:	4b1e      	ldr	r3, [pc, #120]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 8008874:	7a5b      	ldrb	r3, [r3, #9]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b01      	cmp	r3, #1
 800887a:	d831      	bhi.n	80088e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800887c:	4b1b      	ldr	r3, [pc, #108]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 800887e:	7a5b      	ldrb	r3, [r3, #9]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	461a      	mov	r2, r3
 8008884:	4b19      	ldr	r3, [pc, #100]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 8008886:	2100      	movs	r1, #0
 8008888:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800888a:	4b18      	ldr	r3, [pc, #96]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 800888c:	7a5b      	ldrb	r3, [r3, #9]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800889a:	4b14      	ldr	r3, [pc, #80]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 800889c:	7a5b      	ldrb	r3, [r3, #9]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	4b12      	ldr	r3, [pc, #72]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 80088a4:	4413      	add	r3, r2
 80088a6:	79fa      	ldrb	r2, [r7, #7]
 80088a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80088aa:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 80088ac:	7a5b      	ldrb	r3, [r3, #9]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	b2d1      	uxtb	r1, r2
 80088b4:	4a0d      	ldr	r2, [pc, #52]	@ (80088ec <FATFS_LinkDriverEx+0x90>)
 80088b6:	7251      	strb	r1, [r2, #9]
 80088b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80088ba:	7dbb      	ldrb	r3, [r7, #22]
 80088bc:	3330      	adds	r3, #48	@ 0x30
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3301      	adds	r3, #1
 80088c8:	223a      	movs	r2, #58	@ 0x3a
 80088ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	3302      	adds	r3, #2
 80088d0:	222f      	movs	r2, #47	@ 0x2f
 80088d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	3303      	adds	r3, #3
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr
 80088ec:	200002f0 	.word	0x200002f0

080088f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088fa:	2200      	movs	r2, #0
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff ffac 	bl	800885c <FATFS_LinkDriverEx>
 8008904:	4603      	mov	r3, r0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008916:	f3ef 8305 	mrs	r3, IPSR
 800891a:	60bb      	str	r3, [r7, #8]
  return(result);
 800891c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008922:	f3ef 8310 	mrs	r3, PRIMASK
 8008926:	607b      	str	r3, [r7, #4]
  return(result);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <osKernelInitialize+0x32>
 800892e:	4b10      	ldr	r3, [pc, #64]	@ (8008970 <osKernelInitialize+0x60>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d109      	bne.n	800894a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008936:	f3ef 8311 	mrs	r3, BASEPRI
 800893a:	603b      	str	r3, [r7, #0]
  return(result);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008942:	f06f 0305 	mvn.w	r3, #5
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e00c      	b.n	8008964 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800894a:	4b09      	ldr	r3, [pc, #36]	@ (8008970 <osKernelInitialize+0x60>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008952:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <osKernelInitialize+0x60>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e002      	b.n	8008964 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008962:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008964:	68fb      	ldr	r3, [r7, #12]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr
 8008970:	200002fc 	.word	0x200002fc

08008974 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897a:	f3ef 8305 	mrs	r3, IPSR
 800897e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10f      	bne.n	80089a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008986:	f3ef 8310 	mrs	r3, PRIMASK
 800898a:	607b      	str	r3, [r7, #4]
  return(result);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <osKernelStart+0x32>
 8008992:	4b11      	ldr	r3, [pc, #68]	@ (80089d8 <osKernelStart+0x64>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d109      	bne.n	80089ae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800899a:	f3ef 8311 	mrs	r3, BASEPRI
 800899e:	603b      	str	r3, [r7, #0]
  return(result);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80089a6:	f06f 0305 	mvn.w	r3, #5
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e00e      	b.n	80089cc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80089ae:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <osKernelStart+0x64>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d107      	bne.n	80089c6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80089b6:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <osKernelStart+0x64>)
 80089b8:	2202      	movs	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80089bc:	f001 f8a8 	bl	8009b10 <vTaskStartScheduler>
      stat = osOK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e002      	b.n	80089cc <osKernelStart+0x58>
    } else {
      stat = osError;
 80089c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089cc:	68fb      	ldr	r3, [r7, #12]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200002fc 	.word	0x200002fc

080089dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b092      	sub	sp, #72	@ 0x48
 80089e0:	af04      	add	r7, sp, #16
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ec:	f3ef 8305 	mrs	r3, IPSR
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8094 	bne.w	8008b22 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fa:	f3ef 8310 	mrs	r3, PRIMASK
 80089fe:	623b      	str	r3, [r7, #32]
  return(result);
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 808d 	bne.w	8008b22 <osThreadNew+0x146>
 8008a08:	4b48      	ldr	r3, [pc, #288]	@ (8008b2c <osThreadNew+0x150>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d106      	bne.n	8008a1e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a10:	f3ef 8311 	mrs	r3, BASEPRI
 8008a14:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 8082 	bne.w	8008b22 <osThreadNew+0x146>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d07e      	beq.n	8008b22 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008a24:	2380      	movs	r3, #128	@ 0x80
 8008a26:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008a28:	2318      	movs	r3, #24
 8008a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008a30:	f107 031b 	add.w	r3, r7, #27
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d045      	beq.n	8008ace <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <osThreadNew+0x74>
        name = attr->name;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d008      	beq.n	8008a76 <osThreadNew+0x9a>
 8008a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a66:	2b38      	cmp	r3, #56	@ 0x38
 8008a68:	d805      	bhi.n	8008a76 <osThreadNew+0x9a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <osThreadNew+0x9e>
        return (NULL);
 8008a76:	2300      	movs	r3, #0
 8008a78:	e054      	b.n	8008b24 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	089b      	lsrs	r3, r3, #2
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00e      	beq.n	8008ab0 <osThreadNew+0xd4>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2ba7      	cmp	r3, #167	@ 0xa7
 8008a98:	d90a      	bls.n	8008ab0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d006      	beq.n	8008ab0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <osThreadNew+0xd4>
        mem = 1;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aae:	e010      	b.n	8008ad2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10c      	bne.n	8008ad2 <osThreadNew+0xf6>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d108      	bne.n	8008ad2 <osThreadNew+0xf6>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <osThreadNew+0xf6>
          mem = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008acc:	e001      	b.n	8008ad2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d110      	bne.n	8008afa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ae0:	9202      	str	r2, [sp, #8]
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fe24 	bl	800973c <xTaskCreateStatic>
 8008af4:	4603      	mov	r3, r0
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e013      	b.n	8008b22 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d110      	bne.n	8008b22 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fe71 	bl	80097fa <xTaskCreate>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d001      	beq.n	8008b22 <osThreadNew+0x146>
          hTask = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b22:	697b      	ldr	r3, [r7, #20]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3738      	adds	r7, #56	@ 0x38
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200002fc 	.word	0x200002fc

08008b30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b38:	f3ef 8305 	mrs	r3, IPSR
 8008b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10f      	bne.n	8008b64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b44:	f3ef 8310 	mrs	r3, PRIMASK
 8008b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <osDelay+0x34>
 8008b50:	4b0d      	ldr	r3, [pc, #52]	@ (8008b88 <osDelay+0x58>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d109      	bne.n	8008b6c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b58:	f3ef 8311 	mrs	r3, BASEPRI
 8008b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <osDelay+0x3c>
    stat = osErrorISR;
 8008b64:	f06f 0305 	mvn.w	r3, #5
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	e007      	b.n	8008b7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 ff94 	bl	8009aa4 <vTaskDelay>
    }
  }

  return (stat);
 8008b7c:	697b      	ldr	r3, [r7, #20]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200002fc 	.word	0x200002fc

08008b8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4a06      	ldr	r2, [pc, #24]	@ (8008bb4 <vApplicationGetIdleTaskMemory+0x28>)
 8008b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4a05      	ldr	r2, [pc, #20]	@ (8008bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2280      	movs	r2, #128	@ 0x80
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr
 8008bb4:	20000300 	.word	0x20000300
 8008bb8:	200003a8 	.word	0x200003a8

08008bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a07      	ldr	r2, [pc, #28]	@ (8008be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4a06      	ldr	r2, [pc, #24]	@ (8008bec <vApplicationGetTimerTaskMemory+0x30>)
 8008bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bda:	601a      	str	r2, [r3, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	200005a8 	.word	0x200005a8
 8008bec:	20000650 	.word	0x20000650

08008bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f103 0208 	add.w	r2, r3, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f103 0208 	add.w	r2, r3, #8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f103 0208 	add.w	r2, r3, #8
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr

08008c2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ca2:	d103      	bne.n	8008cac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e00c      	b.n	8008cc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e002      	b.n	8008cba <vListInsert+0x2e>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d2f6      	bcs.n	8008cb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d103      	bne.n	8008d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	1e5a      	subs	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
	...

08008d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d7c:	f002 f826 	bl	800adcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d88:	68f9      	ldr	r1, [r7, #12]
 8008d8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dac:	3b01      	subs	r3, #1
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	441a      	add	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	22ff      	movs	r2, #255	@ 0xff
 8008dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	22ff      	movs	r2, #255	@ 0xff
 8008dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d114      	bne.n	8008dfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d01a      	beq.n	8008e10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3310      	adds	r3, #16
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 f936 	bl	800a050 <xTaskRemoveFromEventList>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dea:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <xQueueGenericReset+0xd0>)
 8008dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	e009      	b.n	8008e10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3310      	adds	r3, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fef5 	bl	8008bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3324      	adds	r3, #36	@ 0x24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fef0 	bl	8008bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e10:	f002 f80c 	bl	800ae2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e14:	2301      	movs	r3, #1
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08e      	sub	sp, #56	@ 0x38
 8008e28:	af02      	add	r7, sp, #8
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	e7fd      	b.n	8008e4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d002      	beq.n	8008e7a <xQueueGenericCreateStatic+0x56>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <xQueueGenericCreateStatic+0x5a>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <xQueueGenericCreateStatic+0x5c>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	623b      	str	r3, [r7, #32]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <xQueueGenericCreateStatic+0x84>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <xQueueGenericCreateStatic+0x88>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <xQueueGenericCreateStatic+0x8a>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	61fb      	str	r3, [r7, #28]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eca:	2350      	movs	r3, #80	@ 0x50
 8008ecc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b50      	cmp	r3, #80	@ 0x50
 8008ed2:	d00b      	beq.n	8008eec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	61bb      	str	r3, [r7, #24]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00d      	beq.n	8008f12 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008efe:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4613      	mov	r3, r2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f805 	bl	8008f1c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3730      	adds	r7, #48	@ 0x30
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d103      	bne.n	8008f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e002      	b.n	8008f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	69b8      	ldr	r0, [r7, #24]
 8008f4e:	f7ff feff 	bl	8008d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08e      	sub	sp, #56	@ 0x38
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f72:	2300      	movs	r3, #0
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xQueueGenericSend+0x34>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d103      	bne.n	8008fa6 <xQueueGenericSend+0x42>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <xQueueGenericSend+0x46>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e000      	b.n	8008fac <xQueueGenericSend+0x48>
 8008faa:	2300      	movs	r3, #0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <xQueueGenericSend+0x64>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	e7fd      	b.n	8008fc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d103      	bne.n	8008fd6 <xQueueGenericSend+0x72>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d101      	bne.n	8008fda <xQueueGenericSend+0x76>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <xQueueGenericSend+0x78>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10b      	bne.n	8008ff8 <xQueueGenericSend+0x94>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	623b      	str	r3, [r7, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	e7fd      	b.n	8008ff4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ff8:	f001 f9f4 	bl	800a3e4 <xTaskGetSchedulerState>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <xQueueGenericSend+0xa4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <xQueueGenericSend+0xa8>
 8009008:	2301      	movs	r3, #1
 800900a:	e000      	b.n	800900e <xQueueGenericSend+0xaa>
 800900c:	2300      	movs	r3, #0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <xQueueGenericSend+0xc6>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	61fb      	str	r3, [r7, #28]
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop
 8009028:	e7fd      	b.n	8009026 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800902a:	f001 fecf 	bl	800adcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009036:	429a      	cmp	r2, r3
 8009038:	d302      	bcc.n	8009040 <xQueueGenericSend+0xdc>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d129      	bne.n	8009094 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009046:	f000 fa0d 	bl	8009464 <prvCopyDataToQueue>
 800904a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	3324      	adds	r3, #36	@ 0x24
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fff9 	bl	800a050 <xTaskRemoveFromEventList>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d013      	beq.n	800908c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009064:	4b3f      	ldr	r3, [pc, #252]	@ (8009164 <xQueueGenericSend+0x200>)
 8009066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	e00a      	b.n	800908c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800907c:	4b39      	ldr	r3, [pc, #228]	@ (8009164 <xQueueGenericSend+0x200>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800908c:	f001 fece 	bl	800ae2c <vPortExitCritical>
				return pdPASS;
 8009090:	2301      	movs	r3, #1
 8009092:	e063      	b.n	800915c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d103      	bne.n	80090a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800909a:	f001 fec7 	bl	800ae2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	e05c      	b.n	800915c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 f833 	bl	800a118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090b2:	2301      	movs	r3, #1
 80090b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090b6:	f001 feb9 	bl	800ae2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090ba:	f000 fd99 	bl	8009bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090be:	f001 fe85 	bl	800adcc <vPortEnterCritical>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090c8:	b25b      	sxtb	r3, r3
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ce:	d103      	bne.n	80090d8 <xQueueGenericSend+0x174>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090de:	b25b      	sxtb	r3, r3
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090e4:	d103      	bne.n	80090ee <xQueueGenericSend+0x18a>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090ee:	f001 fe9d 	bl	800ae2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090f2:	1d3a      	adds	r2, r7, #4
 80090f4:	f107 0314 	add.w	r3, r7, #20
 80090f8:	4611      	mov	r1, r2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 f822 	bl	800a144 <xTaskCheckForTimeOut>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d124      	bne.n	8009150 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009106:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009108:	f000 faa4 	bl	8009654 <prvIsQueueFull>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d018      	beq.n	8009144 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	3310      	adds	r3, #16
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f000 ff46 	bl	8009fac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009122:	f000 fa2f 	bl	8009584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009126:	f000 fd71 	bl	8009c0c <xTaskResumeAll>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	f47f af7c 	bne.w	800902a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009132:	4b0c      	ldr	r3, [pc, #48]	@ (8009164 <xQueueGenericSend+0x200>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	e772      	b.n	800902a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009146:	f000 fa1d 	bl	8009584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800914a:	f000 fd5f 	bl	8009c0c <xTaskResumeAll>
 800914e:	e76c      	b.n	800902a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009152:	f000 fa17 	bl	8009584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009156:	f000 fd59 	bl	8009c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800915a:	2300      	movs	r3, #0
		}
	}
}
 800915c:	4618      	mov	r0, r3
 800915e:	3738      	adds	r7, #56	@ 0x38
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	e000ed04 	.word	0xe000ed04

08009168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	@ 0x38
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSendFromISR+0x3e>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <xQueueGenericSendFromISR+0x42>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueGenericSendFromISR+0x44>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	623b      	str	r3, [r7, #32]
}
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d103      	bne.n	80091d6 <xQueueGenericSendFromISR+0x6e>
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <xQueueGenericSendFromISR+0x72>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <xQueueGenericSendFromISR+0x74>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	61fb      	str	r3, [r7, #28]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091f8:	f001 feaa 	bl	800af50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091fc:	f3ef 8211 	mrs	r2, BASEPRI
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	61ba      	str	r2, [r7, #24]
 8009212:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009214:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009216:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009220:	429a      	cmp	r2, r3
 8009222:	d302      	bcc.n	800922a <xQueueGenericSendFromISR+0xc2>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d12c      	bne.n	8009284 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800923a:	f000 f913 	bl	8009464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800923e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009246:	d112      	bne.n	800926e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d016      	beq.n	800927e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	3324      	adds	r3, #36	@ 0x24
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fefb 	bl	800a050 <xTaskRemoveFromEventList>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e007      	b.n	800927e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800926e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009272:	3301      	adds	r3, #1
 8009274:	b2db      	uxtb	r3, r3
 8009276:	b25a      	sxtb	r2, r3
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800927e:	2301      	movs	r3, #1
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009282:	e001      	b.n	8009288 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009284:	2300      	movs	r3, #0
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009296:	4618      	mov	r0, r3
 8009298:	3738      	adds	r7, #56	@ 0x38
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	@ 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <xQueueReceive+0x32>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	623b      	str	r3, [r7, #32]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <xQueueReceive+0x40>
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <xQueueReceive+0x44>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <xQueueReceive+0x46>
 80092e4:	2300      	movs	r3, #0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10b      	bne.n	8009302 <xQueueReceive+0x62>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	61fb      	str	r3, [r7, #28]
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	e7fd      	b.n	80092fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009302:	f001 f86f 	bl	800a3e4 <xTaskGetSchedulerState>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <xQueueReceive+0x72>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <xQueueReceive+0x76>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <xQueueReceive+0x78>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <xQueueReceive+0x94>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	61bb      	str	r3, [r7, #24]
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	e7fd      	b.n	8009330 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009334:	f001 fd4a 	bl	800adcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01f      	beq.n	8009384 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009348:	f000 f8f6 	bl	8009538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	1e5a      	subs	r2, r3, #1
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00f      	beq.n	800937c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	3310      	adds	r3, #16
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fe75 	bl	800a050 <xTaskRemoveFromEventList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800936c:	4b3c      	ldr	r3, [pc, #240]	@ (8009460 <xQueueReceive+0x1c0>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800937c:	f001 fd56 	bl	800ae2c <vPortExitCritical>
				return pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	e069      	b.n	8009458 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d103      	bne.n	8009392 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800938a:	f001 fd4f 	bl	800ae2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800938e:	2300      	movs	r3, #0
 8009390:	e062      	b.n	8009458 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009398:	f107 0310 	add.w	r3, r7, #16
 800939c:	4618      	mov	r0, r3
 800939e:	f000 febb 	bl	800a118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093a2:	2301      	movs	r3, #1
 80093a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093a6:	f001 fd41 	bl	800ae2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093aa:	f000 fc21 	bl	8009bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ae:	f001 fd0d 	bl	800adcc <vPortEnterCritical>
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093be:	d103      	bne.n	80093c8 <xQueueReceive+0x128>
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093ce:	b25b      	sxtb	r3, r3
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d4:	d103      	bne.n	80093de <xQueueReceive+0x13e>
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093de:	f001 fd25 	bl	800ae2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093e2:	1d3a      	adds	r2, r7, #4
 80093e4:	f107 0310 	add.w	r3, r7, #16
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 feaa 	bl	800a144 <xTaskCheckForTimeOut>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d123      	bne.n	800943e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093f8:	f000 f916 	bl	8009628 <prvIsQueueEmpty>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d017      	beq.n	8009432 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	3324      	adds	r3, #36	@ 0x24
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fdce 	bl	8009fac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009412:	f000 f8b7 	bl	8009584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009416:	f000 fbf9 	bl	8009c0c <xTaskResumeAll>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d189      	bne.n	8009334 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009420:	4b0f      	ldr	r3, [pc, #60]	@ (8009460 <xQueueReceive+0x1c0>)
 8009422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	e780      	b.n	8009334 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009434:	f000 f8a6 	bl	8009584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009438:	f000 fbe8 	bl	8009c0c <xTaskResumeAll>
 800943c:	e77a      	b.n	8009334 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800943e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009440:	f000 f8a0 	bl	8009584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009444:	f000 fbe2 	bl	8009c0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944a:	f000 f8ed 	bl	8009628 <prvIsQueueEmpty>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f43f af6f 	beq.w	8009334 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009458:	4618      	mov	r0, r3
 800945a:	3730      	adds	r7, #48	@ 0x30
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d14d      	bne.n	8009526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 ffc6 	bl	800a420 <xTaskPriorityDisinherit>
 8009494:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	605a      	str	r2, [r3, #4]
 800949c:	e043      	b.n	8009526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d119      	bne.n	80094d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6898      	ldr	r0, [r3, #8]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ac:	461a      	mov	r2, r3
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	f002 fc4c 	bl	800bd4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	441a      	add	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d32b      	bcc.n	8009526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	609a      	str	r2, [r3, #8]
 80094d6:	e026      	b.n	8009526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68d8      	ldr	r0, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e0:	461a      	mov	r2, r3
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	f002 fc32 	bl	800bd4c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	425b      	negs	r3, r3
 80094f2:	441a      	add	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d207      	bcs.n	8009514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950c:	425b      	negs	r3, r3
 800950e:	441a      	add	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d105      	bne.n	8009526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	3b01      	subs	r3, #1
 8009524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d018      	beq.n	800957c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009552:	441a      	add	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d303      	bcc.n	800956c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68d9      	ldr	r1, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009574:	461a      	mov	r2, r3
 8009576:	6838      	ldr	r0, [r7, #0]
 8009578:	f002 fbe8 	bl	800bd4c <memcpy>
	}
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800958c:	f001 fc1e 	bl	800adcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009598:	e011      	b.n	80095be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d012      	beq.n	80095c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3324      	adds	r3, #36	@ 0x24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fd52 	bl	800a050 <xTaskRemoveFromEventList>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095b2:	f000 fe2b 	bl	800a20c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dce9      	bgt.n	800959a <prvUnlockQueue+0x16>
 80095c6:	e000      	b.n	80095ca <prvUnlockQueue+0x46>
					break;
 80095c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	22ff      	movs	r2, #255	@ 0xff
 80095ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80095d2:	f001 fc2b 	bl	800ae2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095d6:	f001 fbf9 	bl	800adcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095e2:	e011      	b.n	8009608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d012      	beq.n	8009612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3310      	adds	r3, #16
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fd2d 	bl	800a050 <xTaskRemoveFromEventList>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095fc:	f000 fe06 	bl	800a20c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	3b01      	subs	r3, #1
 8009604:	b2db      	uxtb	r3, r3
 8009606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800960c:	2b00      	cmp	r3, #0
 800960e:	dce9      	bgt.n	80095e4 <prvUnlockQueue+0x60>
 8009610:	e000      	b.n	8009614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	22ff      	movs	r2, #255	@ 0xff
 8009618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800961c:	f001 fc06 	bl	800ae2c <vPortExitCritical>
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009630:	f001 fbcc 	bl	800adcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800963c:	2301      	movs	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e001      	b.n	8009646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009646:	f001 fbf1 	bl	800ae2c <vPortExitCritical>

	return xReturn;
 800964a:	68fb      	ldr	r3, [r7, #12]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800965c:	f001 fbb6 	bl	800adcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009668:	429a      	cmp	r2, r3
 800966a:	d102      	bne.n	8009672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	e001      	b.n	8009676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009676:	f001 fbd9 	bl	800ae2c <vPortExitCritical>

	return xReturn;
 800967a:	68fb      	ldr	r3, [r7, #12]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e014      	b.n	80096be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009694:	4a0e      	ldr	r2, [pc, #56]	@ (80096d0 <vQueueAddToRegistry+0x4c>)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096a0:	490b      	ldr	r1, [pc, #44]	@ (80096d0 <vQueueAddToRegistry+0x4c>)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096aa:	4a09      	ldr	r2, [pc, #36]	@ (80096d0 <vQueueAddToRegistry+0x4c>)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4413      	add	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096b6:	e006      	b.n	80096c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b07      	cmp	r3, #7
 80096c2:	d9e7      	bls.n	8009694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr
 80096d0:	20000a50 	.word	0x20000a50

080096d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096e4:	f001 fb72 	bl	800adcc <vPortEnterCritical>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096f4:	d103      	bne.n	80096fe <vQueueWaitForMessageRestricted+0x2a>
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009704:	b25b      	sxtb	r3, r3
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800970a:	d103      	bne.n	8009714 <vQueueWaitForMessageRestricted+0x40>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009714:	f001 fb8a 	bl	800ae2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	3324      	adds	r3, #36	@ 0x24
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fc65 	bl	8009ff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800972e:	6978      	ldr	r0, [r7, #20]
 8009730:	f7ff ff28 	bl	8009584 <prvUnlockQueue>
	}
 8009734:	bf00      	nop
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	@ 0x38
 8009740:	af04      	add	r7, sp, #16
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800974a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10b      	bne.n	8009768 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	623b      	str	r3, [r7, #32]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <xTaskCreateStatic+0x4a>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	61fb      	str	r3, [r7, #28]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009786:	23a8      	movs	r3, #168	@ 0xa8
 8009788:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2ba8      	cmp	r3, #168	@ 0xa8
 800978e:	d00b      	beq.n	80097a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	61bb      	str	r3, [r7, #24]
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01e      	beq.n	80097ec <xTaskCreateStatic+0xb0>
 80097ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01b      	beq.n	80097ec <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c0:	2202      	movs	r2, #2
 80097c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097c6:	2300      	movs	r3, #0
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	9302      	str	r3, [sp, #8]
 80097ce:	f107 0314 	add.w	r3, r7, #20
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	68b9      	ldr	r1, [r7, #8]
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 f850 	bl	8009884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097e6:	f000 f8ed 	bl	80099c4 <prvAddNewTaskToReadyList>
 80097ea:	e001      	b.n	80097f0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097f0:	697b      	ldr	r3, [r7, #20]
	}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3728      	adds	r7, #40	@ 0x28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b08c      	sub	sp, #48	@ 0x30
 80097fe:	af04      	add	r7, sp, #16
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	4613      	mov	r3, r2
 8009808:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980a:	88fb      	ldrh	r3, [r7, #6]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fbde 	bl	800afd0 <pvPortMalloc>
 8009814:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00e      	beq.n	800983a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800981c:	20a8      	movs	r0, #168	@ 0xa8
 800981e:	f001 fbd7 	bl	800afd0 <pvPortMalloc>
 8009822:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009830:	e005      	b.n	800983e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f001 fc94 	bl	800b160 <vPortFree>
 8009838:	e001      	b.n	800983e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d017      	beq.n	8009874 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800984c:	88fa      	ldrh	r2, [r7, #6]
 800984e:	2300      	movs	r3, #0
 8009850:	9303      	str	r3, [sp, #12]
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	9302      	str	r3, [sp, #8]
 8009856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f80e 	bl	8009884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009868:	69f8      	ldr	r0, [r7, #28]
 800986a:	f000 f8ab 	bl	80099c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800986e:	2301      	movs	r3, #1
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	e002      	b.n	800987a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009878:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800987a:	69bb      	ldr	r3, [r7, #24]
	}
 800987c:	4618      	mov	r0, r3
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	461a      	mov	r2, r3
 800989c:	21a5      	movs	r1, #165	@ 0xa5
 800989e:	f002 f9d1 	bl	800bc44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098ac:	3b01      	subs	r3, #1
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f023 0307 	bic.w	r3, r3, #7
 80098ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00b      	beq.n	80098de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	617b      	str	r3, [r7, #20]
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	e7fd      	b.n	80098da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	e012      	b.n	800990a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	7819      	ldrb	r1, [r3, #0]
 80098ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	3334      	adds	r3, #52	@ 0x34
 80098f4:	460a      	mov	r2, r1
 80098f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d006      	beq.n	8009912 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	3301      	adds	r3, #1
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	2b0f      	cmp	r3, #15
 800990e:	d9e9      	bls.n	80098e4 <prvInitialiseNewTask+0x60>
 8009910:	e000      	b.n	8009914 <prvInitialiseNewTask+0x90>
		{
			break;
 8009912:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	2b37      	cmp	r3, #55	@ 0x37
 8009920:	d901      	bls.n	8009926 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009922:	2337      	movs	r3, #55	@ 0x37
 8009924:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800992a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009930:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009934:	2200      	movs	r2, #0
 8009936:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	3304      	adds	r3, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff f976 	bl	8008c2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	3318      	adds	r3, #24
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff f971 	bl	8008c2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009950:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009960:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	2200      	movs	r2, #0
 8009966:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	2200      	movs	r2, #0
 800996e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	3354      	adds	r3, #84	@ 0x54
 8009976:	224c      	movs	r2, #76	@ 0x4c
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f002 f962 	bl	800bc44 <memset>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	4a0d      	ldr	r2, [pc, #52]	@ (80099b8 <prvInitialiseNewTask+0x134>)
 8009984:	659a      	str	r2, [r3, #88]	@ 0x58
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	4a0c      	ldr	r2, [pc, #48]	@ (80099bc <prvInitialiseNewTask+0x138>)
 800998a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	4a0c      	ldr	r2, [pc, #48]	@ (80099c0 <prvInitialiseNewTask+0x13c>)
 8009990:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	68f9      	ldr	r1, [r7, #12]
 8009996:	69b8      	ldr	r0, [r7, #24]
 8009998:	f001 f926 	bl	800abe8 <pxPortInitialiseStack>
 800999c:	4602      	mov	r2, r0
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ae:	bf00      	nop
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20002700 	.word	0x20002700
 80099bc:	20002768 	.word	0x20002768
 80099c0:	200027d0 	.word	0x200027d0

080099c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099cc:	f001 f9fe 	bl	800adcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099da:	4b2c      	ldr	r3, [pc, #176]	@ (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099e2:	4a2a      	ldr	r2, [pc, #168]	@ (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099e8:	4b27      	ldr	r3, [pc, #156]	@ (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d110      	bne.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099f0:	f000 fc30 	bl	800a254 <prvInitialiseTaskLists>
 80099f4:	e00d      	b.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099f6:	4b26      	ldr	r3, [pc, #152]	@ (8009a90 <prvAddNewTaskToReadyList+0xcc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099fe:	4b23      	ldr	r3, [pc, #140]	@ (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d802      	bhi.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a12:	4b20      	ldr	r3, [pc, #128]	@ (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	4a1e      	ldr	r2, [pc, #120]	@ (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a28:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <prvAddNewTaskToReadyList+0xd4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d903      	bls.n	8009a38 <prvAddNewTaskToReadyList+0x74>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a34:	4a18      	ldr	r2, [pc, #96]	@ (8009a98 <prvAddNewTaskToReadyList+0xd4>)
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4a15      	ldr	r2, [pc, #84]	@ (8009a9c <prvAddNewTaskToReadyList+0xd8>)
 8009a46:	441a      	add	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7ff f8f9 	bl	8008c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a54:	f001 f9ea 	bl	800ae2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a58:	4b0d      	ldr	r3, [pc, #52]	@ (8009a90 <prvAddNewTaskToReadyList+0xcc>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00e      	beq.n	8009a7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d207      	bcs.n	8009a7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <prvAddNewTaskToReadyList+0xdc>)
 8009a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000f64 	.word	0x20000f64
 8009a8c:	20000a90 	.word	0x20000a90
 8009a90:	20000f70 	.word	0x20000f70
 8009a94:	20000f80 	.word	0x20000f80
 8009a98:	20000f6c 	.word	0x20000f6c
 8009a9c:	20000a94 	.word	0x20000a94
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d018      	beq.n	8009ae8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ab6:	4b14      	ldr	r3, [pc, #80]	@ (8009b08 <vTaskDelay+0x64>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <vTaskDelay+0x32>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ad6:	f000 f88b 	bl	8009bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fd0f 	bl	800a500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ae2:	f000 f893 	bl	8009c0c <xTaskResumeAll>
 8009ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d107      	bne.n	8009afe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009aee:	4b07      	ldr	r3, [pc, #28]	@ (8009b0c <vTaskDelay+0x68>)
 8009af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000f8c 	.word	0x20000f8c
 8009b0c:	e000ed04 	.word	0xe000ed04

08009b10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	@ 0x28
 8009b14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b1e:	463a      	mov	r2, r7
 8009b20:	1d39      	adds	r1, r7, #4
 8009b22:	f107 0308 	add.w	r3, r7, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff f830 	bl	8008b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	9202      	str	r2, [sp, #8]
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	2300      	movs	r3, #0
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	460a      	mov	r2, r1
 8009b3e:	4924      	ldr	r1, [pc, #144]	@ (8009bd0 <vTaskStartScheduler+0xc0>)
 8009b40:	4824      	ldr	r0, [pc, #144]	@ (8009bd4 <vTaskStartScheduler+0xc4>)
 8009b42:	f7ff fdfb 	bl	800973c <xTaskCreateStatic>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4a23      	ldr	r2, [pc, #140]	@ (8009bd8 <vTaskStartScheduler+0xc8>)
 8009b4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b4c:	4b22      	ldr	r3, [pc, #136]	@ (8009bd8 <vTaskStartScheduler+0xc8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b54:	2301      	movs	r3, #1
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	e001      	b.n	8009b5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d102      	bne.n	8009b6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b64:	f000 fd20 	bl	800a5a8 <xTimerCreateTimerTask>
 8009b68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d11b      	bne.n	8009ba8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b84:	4b15      	ldr	r3, [pc, #84]	@ (8009bdc <vTaskStartScheduler+0xcc>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3354      	adds	r3, #84	@ 0x54
 8009b8a:	4a15      	ldr	r2, [pc, #84]	@ (8009be0 <vTaskStartScheduler+0xd0>)
 8009b8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b8e:	4b15      	ldr	r3, [pc, #84]	@ (8009be4 <vTaskStartScheduler+0xd4>)
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b96:	4b14      	ldr	r3, [pc, #80]	@ (8009be8 <vTaskStartScheduler+0xd8>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009b9c:	4b13      	ldr	r3, [pc, #76]	@ (8009bec <vTaskStartScheduler+0xdc>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ba2:	f001 f8a1 	bl	800ace8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ba6:	e00f      	b.n	8009bc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bae:	d10b      	bne.n	8009bc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	60fb      	str	r3, [r7, #12]
}
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	e7fd      	b.n	8009bc4 <vTaskStartScheduler+0xb4>
}
 8009bc8:	bf00      	nop
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	0800be34 	.word	0x0800be34
 8009bd4:	0800a225 	.word	0x0800a225
 8009bd8:	20000f88 	.word	0x20000f88
 8009bdc:	20000a90 	.word	0x20000a90
 8009be0:	20000138 	.word	0x20000138
 8009be4:	20000f84 	.word	0x20000f84
 8009be8:	20000f70 	.word	0x20000f70
 8009bec:	20000f68 	.word	0x20000f68

08009bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009bf4:	4b04      	ldr	r3, [pc, #16]	@ (8009c08 <vTaskSuspendAll+0x18>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a03      	ldr	r2, [pc, #12]	@ (8009c08 <vTaskSuspendAll+0x18>)
 8009bfc:	6013      	str	r3, [r2, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc80      	pop	{r7}
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000f8c 	.word	0x20000f8c

08009c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c1a:	4b42      	ldr	r3, [pc, #264]	@ (8009d24 <xTaskResumeAll+0x118>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <xTaskResumeAll+0x2e>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	603b      	str	r3, [r7, #0]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c3a:	f001 f8c7 	bl	800adcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c3e:	4b39      	ldr	r3, [pc, #228]	@ (8009d24 <xTaskResumeAll+0x118>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	4a37      	ldr	r2, [pc, #220]	@ (8009d24 <xTaskResumeAll+0x118>)
 8009c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c48:	4b36      	ldr	r3, [pc, #216]	@ (8009d24 <xTaskResumeAll+0x118>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d162      	bne.n	8009d16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c50:	4b35      	ldr	r3, [pc, #212]	@ (8009d28 <xTaskResumeAll+0x11c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d05e      	beq.n	8009d16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c58:	e02f      	b.n	8009cba <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c5a:	4b34      	ldr	r3, [pc, #208]	@ (8009d2c <xTaskResumeAll+0x120>)
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3318      	adds	r3, #24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff f848 	bl	8008cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff f843 	bl	8008cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d30 <xTaskResumeAll+0x124>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d903      	bls.n	8009c8a <xTaskResumeAll+0x7e>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	4a2a      	ldr	r2, [pc, #168]	@ (8009d30 <xTaskResumeAll+0x124>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4a27      	ldr	r2, [pc, #156]	@ (8009d34 <xTaskResumeAll+0x128>)
 8009c98:	441a      	add	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fe ffd0 	bl	8008c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009caa:	4b23      	ldr	r3, [pc, #140]	@ (8009d38 <xTaskResumeAll+0x12c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d302      	bcc.n	8009cba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009cb4:	4b21      	ldr	r3, [pc, #132]	@ (8009d3c <xTaskResumeAll+0x130>)
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cba:	4b1c      	ldr	r3, [pc, #112]	@ (8009d2c <xTaskResumeAll+0x120>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1cb      	bne.n	8009c5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cc8:	f000 fb68 	bl	800a39c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8009d40 <xTaskResumeAll+0x134>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d010      	beq.n	8009cfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cd8:	f000 f844 	bl	8009d64 <xTaskIncrementTick>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ce2:	4b16      	ldr	r3, [pc, #88]	@ (8009d3c <xTaskResumeAll+0x130>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1f1      	bne.n	8009cd8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009cf4:	4b12      	ldr	r3, [pc, #72]	@ (8009d40 <xTaskResumeAll+0x134>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <xTaskResumeAll+0x130>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d009      	beq.n	8009d16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d02:	2301      	movs	r3, #1
 8009d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d06:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <xTaskResumeAll+0x138>)
 8009d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d16:	f001 f889 	bl	800ae2c <vPortExitCritical>

	return xAlreadyYielded;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000f8c 	.word	0x20000f8c
 8009d28:	20000f64 	.word	0x20000f64
 8009d2c:	20000f24 	.word	0x20000f24
 8009d30:	20000f6c 	.word	0x20000f6c
 8009d34:	20000a94 	.word	0x20000a94
 8009d38:	20000a90 	.word	0x20000a90
 8009d3c:	20000f78 	.word	0x20000f78
 8009d40:	20000f74 	.word	0x20000f74
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d4e:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <xTaskGetTickCount+0x18>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d54:	687b      	ldr	r3, [r7, #4]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr
 8009d60:	20000f68 	.word	0x20000f68

08009d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d6e:	4b52      	ldr	r3, [pc, #328]	@ (8009eb8 <xTaskIncrementTick+0x154>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 808f 	bne.w	8009e96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d78:	4b50      	ldr	r3, [pc, #320]	@ (8009ebc <xTaskIncrementTick+0x158>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d80:	4a4e      	ldr	r2, [pc, #312]	@ (8009ebc <xTaskIncrementTick+0x158>)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d121      	bne.n	8009dd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8009ec0 <xTaskIncrementTick+0x15c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	603b      	str	r3, [r7, #0]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <xTaskIncrementTick+0x46>
 8009dae:	4b44      	ldr	r3, [pc, #272]	@ (8009ec0 <xTaskIncrementTick+0x15c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	4b43      	ldr	r3, [pc, #268]	@ (8009ec4 <xTaskIncrementTick+0x160>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a41      	ldr	r2, [pc, #260]	@ (8009ec0 <xTaskIncrementTick+0x15c>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	4a41      	ldr	r2, [pc, #260]	@ (8009ec4 <xTaskIncrementTick+0x160>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	4b41      	ldr	r3, [pc, #260]	@ (8009ec8 <xTaskIncrementTick+0x164>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8009ec8 <xTaskIncrementTick+0x164>)
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	f000 fae6 	bl	800a39c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8009ecc <xTaskIncrementTick+0x168>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d34e      	bcc.n	8009e78 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dda:	4b39      	ldr	r3, [pc, #228]	@ (8009ec0 <xTaskIncrementTick+0x15c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <xTaskIncrementTick+0x84>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <xTaskIncrementTick+0x86>
 8009de8:	2300      	movs	r3, #0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dee:	4b37      	ldr	r3, [pc, #220]	@ (8009ecc <xTaskIncrementTick+0x168>)
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009df4:	601a      	str	r2, [r3, #0]
					break;
 8009df6:	e03f      	b.n	8009e78 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009df8:	4b31      	ldr	r3, [pc, #196]	@ (8009ec0 <xTaskIncrementTick+0x15c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d203      	bcs.n	8009e18 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e10:	4a2e      	ldr	r2, [pc, #184]	@ (8009ecc <xTaskIncrementTick+0x168>)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6013      	str	r3, [r2, #0]
						break;
 8009e16:	e02f      	b.n	8009e78 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe ff6d 	bl	8008cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	3318      	adds	r3, #24
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe ff64 	bl	8008cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e38:	4b25      	ldr	r3, [pc, #148]	@ (8009ed0 <xTaskIncrementTick+0x16c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d903      	bls.n	8009e48 <xTaskIncrementTick+0xe4>
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e44:	4a22      	ldr	r2, [pc, #136]	@ (8009ed0 <xTaskIncrementTick+0x16c>)
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4a1f      	ldr	r2, [pc, #124]	@ (8009ed4 <xTaskIncrementTick+0x170>)
 8009e56:	441a      	add	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fe fef1 	bl	8008c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed8 <xTaskIncrementTick+0x174>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d3b3      	bcc.n	8009dda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e76:	e7b0      	b.n	8009dda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e78:	4b17      	ldr	r3, [pc, #92]	@ (8009ed8 <xTaskIncrementTick+0x174>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7e:	4915      	ldr	r1, [pc, #84]	@ (8009ed4 <xTaskIncrementTick+0x170>)
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d907      	bls.n	8009ea0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e004      	b.n	8009ea0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e96:	4b11      	ldr	r3, [pc, #68]	@ (8009edc <xTaskIncrementTick+0x178>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8009edc <xTaskIncrementTick+0x178>)
 8009e9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee0 <xTaskIncrementTick+0x17c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009eac:	697b      	ldr	r3, [r7, #20]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000f8c 	.word	0x20000f8c
 8009ebc:	20000f68 	.word	0x20000f68
 8009ec0:	20000f1c 	.word	0x20000f1c
 8009ec4:	20000f20 	.word	0x20000f20
 8009ec8:	20000f7c 	.word	0x20000f7c
 8009ecc:	20000f84 	.word	0x20000f84
 8009ed0:	20000f6c 	.word	0x20000f6c
 8009ed4:	20000a94 	.word	0x20000a94
 8009ed8:	20000a90 	.word	0x20000a90
 8009edc:	20000f74 	.word	0x20000f74
 8009ee0:	20000f78 	.word	0x20000f78

08009ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eea:	4b2a      	ldr	r3, [pc, #168]	@ (8009f94 <vTaskSwitchContext+0xb0>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ef2:	4b29      	ldr	r3, [pc, #164]	@ (8009f98 <vTaskSwitchContext+0xb4>)
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ef8:	e047      	b.n	8009f8a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009efa:	4b27      	ldr	r3, [pc, #156]	@ (8009f98 <vTaskSwitchContext+0xb4>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f00:	4b26      	ldr	r3, [pc, #152]	@ (8009f9c <vTaskSwitchContext+0xb8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	e011      	b.n	8009f2c <vTaskSwitchContext+0x48>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10b      	bne.n	8009f26 <vTaskSwitchContext+0x42>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <vTaskSwitchContext+0x3e>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	491c      	ldr	r1, [pc, #112]	@ (8009fa0 <vTaskSwitchContext+0xbc>)
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0e3      	beq.n	8009f08 <vTaskSwitchContext+0x24>
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4a15      	ldr	r2, [pc, #84]	@ (8009fa0 <vTaskSwitchContext+0xbc>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	3308      	adds	r3, #8
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d104      	bne.n	8009f70 <vTaskSwitchContext+0x8c>
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	605a      	str	r2, [r3, #4]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	4a0b      	ldr	r2, [pc, #44]	@ (8009fa4 <vTaskSwitchContext+0xc0>)
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	4a08      	ldr	r2, [pc, #32]	@ (8009f9c <vTaskSwitchContext+0xb8>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f80:	4b08      	ldr	r3, [pc, #32]	@ (8009fa4 <vTaskSwitchContext+0xc0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3354      	adds	r3, #84	@ 0x54
 8009f86:	4a08      	ldr	r2, [pc, #32]	@ (8009fa8 <vTaskSwitchContext+0xc4>)
 8009f88:	6013      	str	r3, [r2, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr
 8009f94:	20000f8c 	.word	0x20000f8c
 8009f98:	20000f78 	.word	0x20000f78
 8009f9c:	20000f6c 	.word	0x20000f6c
 8009fa0:	20000a94 	.word	0x20000a94
 8009fa4:	20000a90 	.word	0x20000a90
 8009fa8:	20000138 	.word	0x20000138

08009fac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	60fb      	str	r3, [r7, #12]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fd4:	4b07      	ldr	r3, [pc, #28]	@ (8009ff4 <vTaskPlaceOnEventList+0x48>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3318      	adds	r3, #24
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7fe fe55 	bl	8008c8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	6838      	ldr	r0, [r7, #0]
 8009fe6:	f000 fa8b 	bl	800a500 <prvAddCurrentTaskToDelayedList>
}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20000a90 	.word	0x20000a90

08009ff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	617b      	str	r3, [r7, #20]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a022:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <vTaskPlaceOnEventListRestricted+0x54>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3318      	adds	r3, #24
 800a028:	4619      	mov	r1, r3
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7fe fe0b 	bl	8008c46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a03a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	68b8      	ldr	r0, [r7, #8]
 800a040:	f000 fa5e 	bl	800a500 <prvAddCurrentTaskToDelayedList>
	}
 800a044:	bf00      	nop
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000a90 	.word	0x20000a90

0800a050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60fb      	str	r3, [r7, #12]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3318      	adds	r3, #24
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fe3a 	bl	8008cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a088:	4b1d      	ldr	r3, [pc, #116]	@ (800a100 <xTaskRemoveFromEventList+0xb0>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11d      	bne.n	800a0cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fe31 	bl	8008cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	4b19      	ldr	r3, [pc, #100]	@ (800a104 <xTaskRemoveFromEventList+0xb4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d903      	bls.n	800a0ae <xTaskRemoveFromEventList+0x5e>
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0aa:	4a16      	ldr	r2, [pc, #88]	@ (800a104 <xTaskRemoveFromEventList+0xb4>)
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4a13      	ldr	r2, [pc, #76]	@ (800a108 <xTaskRemoveFromEventList+0xb8>)
 800a0bc:	441a      	add	r2, r3
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7fe fdbe 	bl	8008c46 <vListInsertEnd>
 800a0ca:	e005      	b.n	800a0d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	480e      	ldr	r0, [pc, #56]	@ (800a10c <xTaskRemoveFromEventList+0xbc>)
 800a0d4:	f7fe fdb7 	bl	8008c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <xTaskRemoveFromEventList+0xc0>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d905      	bls.n	800a0f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a114 <xTaskRemoveFromEventList+0xc4>)
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	e001      	b.n	800a0f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0f6:	697b      	ldr	r3, [r7, #20]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20000f8c 	.word	0x20000f8c
 800a104:	20000f6c 	.word	0x20000f6c
 800a108:	20000a94 	.word	0x20000a94
 800a10c:	20000f24 	.word	0x20000f24
 800a110:	20000a90 	.word	0x20000a90
 800a114:	20000f78 	.word	0x20000f78

0800a118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a120:	4b06      	ldr	r3, [pc, #24]	@ (800a13c <vTaskInternalSetTimeOutState+0x24>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <vTaskInternalSetTimeOutState+0x28>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	605a      	str	r2, [r3, #4]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20000f7c 	.word	0x20000f7c
 800a140:	20000f68 	.word	0x20000f68

0800a144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10b      	bne.n	800a16c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	613b      	str	r3, [r7, #16]
}
 800a166:	bf00      	nop
 800a168:	bf00      	nop
 800a16a:	e7fd      	b.n	800a168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10b      	bne.n	800a18a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60fb      	str	r3, [r7, #12]
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a18a:	f000 fe1f 	bl	800adcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a18e:	4b1d      	ldr	r3, [pc, #116]	@ (800a204 <xTaskCheckForTimeOut+0xc0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1a6:	d102      	bne.n	800a1ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	e023      	b.n	800a1f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4b15      	ldr	r3, [pc, #84]	@ (800a208 <xTaskCheckForTimeOut+0xc4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d007      	beq.n	800a1ca <xTaskCheckForTimeOut+0x86>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d302      	bcc.n	800a1ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	e015      	b.n	800a1f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d20b      	bcs.n	800a1ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	1ad2      	subs	r2, r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff99 	bl	800a118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	e004      	b.n	800a1f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1f6:	f000 fe19 	bl	800ae2c <vPortExitCritical>

	return xReturn;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000f68 	.word	0x20000f68
 800a208:	20000f7c 	.word	0x20000f7c

0800a20c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a210:	4b03      	ldr	r3, [pc, #12]	@ (800a220 <vTaskMissedYield+0x14>)
 800a212:	2201      	movs	r2, #1
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	46bd      	mov	sp, r7
 800a21a:	bc80      	pop	{r7}
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20000f78 	.word	0x20000f78

0800a224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a22c:	f000 f852 	bl	800a2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a230:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <prvIdleTask+0x28>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d9f9      	bls.n	800a22c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a238:	4b05      	ldr	r3, [pc, #20]	@ (800a250 <prvIdleTask+0x2c>)
 800a23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a248:	e7f0      	b.n	800a22c <prvIdleTask+0x8>
 800a24a:	bf00      	nop
 800a24c:	20000a94 	.word	0x20000a94
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	e00c      	b.n	800a27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a12      	ldr	r2, [pc, #72]	@ (800a2b4 <prvInitialiseTaskLists+0x60>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fcbe 	bl	8008bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3301      	adds	r3, #1
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b37      	cmp	r3, #55	@ 0x37
 800a27e:	d9ef      	bls.n	800a260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a280:	480d      	ldr	r0, [pc, #52]	@ (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a282:	f7fe fcb5 	bl	8008bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a286:	480d      	ldr	r0, [pc, #52]	@ (800a2bc <prvInitialiseTaskLists+0x68>)
 800a288:	f7fe fcb2 	bl	8008bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a28c:	480c      	ldr	r0, [pc, #48]	@ (800a2c0 <prvInitialiseTaskLists+0x6c>)
 800a28e:	f7fe fcaf 	bl	8008bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a292:	480c      	ldr	r0, [pc, #48]	@ (800a2c4 <prvInitialiseTaskLists+0x70>)
 800a294:	f7fe fcac 	bl	8008bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a298:	480b      	ldr	r0, [pc, #44]	@ (800a2c8 <prvInitialiseTaskLists+0x74>)
 800a29a:	f7fe fca9 	bl	8008bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a29e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2cc <prvInitialiseTaskLists+0x78>)
 800a2a0:	4a05      	ldr	r2, [pc, #20]	@ (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <prvInitialiseTaskLists+0x7c>)
 800a2a6:	4a05      	ldr	r2, [pc, #20]	@ (800a2bc <prvInitialiseTaskLists+0x68>)
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000a94 	.word	0x20000a94
 800a2b8:	20000ef4 	.word	0x20000ef4
 800a2bc:	20000f08 	.word	0x20000f08
 800a2c0:	20000f24 	.word	0x20000f24
 800a2c4:	20000f38 	.word	0x20000f38
 800a2c8:	20000f50 	.word	0x20000f50
 800a2cc:	20000f1c 	.word	0x20000f1c
 800a2d0:	20000f20 	.word	0x20000f20

0800a2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2da:	e019      	b.n	800a310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2dc:	f000 fd76 	bl	800adcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2e0:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <prvCheckTasksWaitingTermination+0x50>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fd05 	bl	8008cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3b01      	subs	r3, #1
 800a302:	4a0a      	ldr	r2, [pc, #40]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a306:	f000 fd91 	bl	800ae2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f810 	bl	800a330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <prvCheckTasksWaitingTermination+0x58>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e1      	bne.n	800a2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000f38 	.word	0x20000f38
 800a328:	20000f64 	.word	0x20000f64
 800a32c:	20000f4c 	.word	0x20000f4c

0800a330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3354      	adds	r3, #84	@ 0x54
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 fc89 	bl	800bc54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d108      	bne.n	800a35e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a350:	4618      	mov	r0, r3
 800a352:	f000 ff05 	bl	800b160 <vPortFree>
				vPortFree( pxTCB );
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 ff02 	bl	800b160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a35c:	e019      	b.n	800a392 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a364:	2b01      	cmp	r3, #1
 800a366:	d103      	bne.n	800a370 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fef9 	bl	800b160 <vPortFree>
	}
 800a36e:	e010      	b.n	800a392 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a376:	2b02      	cmp	r3, #2
 800a378:	d00b      	beq.n	800a392 <prvDeleteTCB+0x62>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	60fb      	str	r3, [r7, #12]
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	e7fd      	b.n	800a38e <prvDeleteTCB+0x5e>
	}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3dc <prvResetNextTaskUnblockTime+0x40>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <prvResetNextTaskUnblockTime+0x14>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <prvResetNextTaskUnblockTime+0x16>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e0 <prvResetNextTaskUnblockTime+0x44>)
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3be:	e008      	b.n	800a3d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3c0:	4b06      	ldr	r3, [pc, #24]	@ (800a3dc <prvResetNextTaskUnblockTime+0x40>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4a04      	ldr	r2, [pc, #16]	@ (800a3e0 <prvResetNextTaskUnblockTime+0x44>)
 800a3d0:	6013      	str	r3, [r2, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr
 800a3dc:	20000f1c 	.word	0x20000f1c
 800a3e0:	20000f84 	.word	0x20000f84

0800a3e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a418 <xTaskGetSchedulerState+0x34>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d102      	bne.n	800a3f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	607b      	str	r3, [r7, #4]
 800a3f6:	e008      	b.n	800a40a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f8:	4b08      	ldr	r3, [pc, #32]	@ (800a41c <xTaskGetSchedulerState+0x38>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a400:	2302      	movs	r3, #2
 800a402:	607b      	str	r3, [r7, #4]
 800a404:	e001      	b.n	800a40a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a406:	2300      	movs	r3, #0
 800a408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a40a:	687b      	ldr	r3, [r7, #4]
	}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000f70 	.word	0x20000f70
 800a41c:	20000f8c 	.word	0x20000f8c

0800a420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d058      	beq.n	800a4e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a436:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f4 <xTaskPriorityDisinherit+0xd4>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d00b      	beq.n	800a458 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	60fb      	str	r3, [r7, #12]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10b      	bne.n	800a478 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	60bb      	str	r3, [r7, #8]
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	e7fd      	b.n	800a474 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a47c:	1e5a      	subs	r2, r3, #1
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d02c      	beq.n	800a4e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a492:	2b00      	cmp	r3, #0
 800a494:	d128      	bne.n	800a4e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	3304      	adds	r3, #4
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fc2e 	bl	8008cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f8 <xTaskPriorityDisinherit+0xd8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d903      	bls.n	800a4c8 <xTaskPriorityDisinherit+0xa8>
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a4f8 <xTaskPriorityDisinherit+0xd8>)
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4a09      	ldr	r2, [pc, #36]	@ (800a4fc <xTaskPriorityDisinherit+0xdc>)
 800a4d6:	441a      	add	r2, r3
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fe fbb1 	bl	8008c46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4e8:	697b      	ldr	r3, [r7, #20]
	}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20000a90 	.word	0x20000a90
 800a4f8:	20000f6c 	.word	0x20000f6c
 800a4fc:	20000a94 	.word	0x20000a94

0800a500 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a50a:	4b21      	ldr	r3, [pc, #132]	@ (800a590 <prvAddCurrentTaskToDelayedList+0x90>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a510:	4b20      	ldr	r3, [pc, #128]	@ (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3304      	adds	r3, #4
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fbf0 	bl	8008cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a522:	d10a      	bne.n	800a53a <prvAddCurrentTaskToDelayedList+0x3a>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a52a:	4b1a      	ldr	r3, [pc, #104]	@ (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4819      	ldr	r0, [pc, #100]	@ (800a598 <prvAddCurrentTaskToDelayedList+0x98>)
 800a534:	f7fe fb87 	bl	8008c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a538:	e026      	b.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d209      	bcs.n	800a566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a552:	4b12      	ldr	r3, [pc, #72]	@ (800a59c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	4b0f      	ldr	r3, [pc, #60]	@ (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3304      	adds	r3, #4
 800a55c:	4619      	mov	r1, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	f7fe fb94 	bl	8008c8c <vListInsert>
}
 800a564:	e010      	b.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a566:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b0a      	ldr	r3, [pc, #40]	@ (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7fe fb8a 	bl	8008c8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a578:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d202      	bcs.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a582:	4a08      	ldr	r2, [pc, #32]	@ (800a5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	6013      	str	r3, [r2, #0]
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000f68 	.word	0x20000f68
 800a594:	20000a90 	.word	0x20000a90
 800a598:	20000f50 	.word	0x20000f50
 800a59c:	20000f20 	.word	0x20000f20
 800a5a0:	20000f1c 	.word	0x20000f1c
 800a5a4:	20000f84 	.word	0x20000f84

0800a5a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5b2:	f000 fad9 	bl	800ab68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <xTimerCreateTimerTask+0x84>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d021      	beq.n	800a602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5c6:	1d3a      	adds	r2, r7, #4
 800a5c8:	f107 0108 	add.w	r1, r7, #8
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe faf3 	bl	8008bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	460a      	mov	r2, r1
 800a5e8:	4911      	ldr	r1, [pc, #68]	@ (800a630 <xTimerCreateTimerTask+0x88>)
 800a5ea:	4812      	ldr	r0, [pc, #72]	@ (800a634 <xTimerCreateTimerTask+0x8c>)
 800a5ec:	f7ff f8a6 	bl	800973c <xTaskCreateStatic>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <xTimerCreateTimerTask+0x90>)
 800a5f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5f6:	4b10      	ldr	r3, [pc, #64]	@ (800a638 <xTimerCreateTimerTask+0x90>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5fe:	2301      	movs	r3, #1
 800a600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	613b      	str	r3, [r7, #16]
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a620:	697b      	ldr	r3, [r7, #20]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000fc0 	.word	0x20000fc0
 800a630:	0800be3c 	.word	0x0800be3c
 800a634:	0800a75d 	.word	0x0800a75d
 800a638:	20000fc4 	.word	0x20000fc4

0800a63c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08a      	sub	sp, #40	@ 0x28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10b      	bne.n	800a66c <xTimerGenericCommand+0x30>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	623b      	str	r3, [r7, #32]
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	e7fd      	b.n	800a668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a66c:	4b19      	ldr	r3, [pc, #100]	@ (800a6d4 <xTimerGenericCommand+0x98>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d02a      	beq.n	800a6ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b05      	cmp	r3, #5
 800a684:	dc18      	bgt.n	800a6b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a686:	f7ff fead 	bl	800a3e4 <xTaskGetSchedulerState>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d109      	bne.n	800a6a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a690:	4b10      	ldr	r3, [pc, #64]	@ (800a6d4 <xTimerGenericCommand+0x98>)
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	f107 0110 	add.w	r1, r7, #16
 800a698:	2300      	movs	r3, #0
 800a69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a69c:	f7fe fc62 	bl	8008f64 <xQueueGenericSend>
 800a6a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6a2:	e012      	b.n	800a6ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <xTimerGenericCommand+0x98>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	f107 0110 	add.w	r1, r7, #16
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f7fe fc58 	bl	8008f64 <xQueueGenericSend>
 800a6b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6b6:	e008      	b.n	800a6ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6b8:	4b06      	ldr	r3, [pc, #24]	@ (800a6d4 <xTimerGenericCommand+0x98>)
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	f107 0110 	add.w	r1, r7, #16
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	f7fe fd50 	bl	8009168 <xQueueGenericSendFromISR>
 800a6c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3728      	adds	r7, #40	@ 0x28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000fc0 	.word	0x20000fc0

0800a6d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a758 <prvProcessExpiredTimer+0x80>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fb03 	bl	8008cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d123      	bne.n	800a746 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	18d1      	adds	r1, r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	f000 f8cc 	bl	800a8a8 <prvInsertTimerInActiveList>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d017      	beq.n	800a746 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a716:	2300      	movs	r3, #0
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	2100      	movs	r1, #0
 800a720:	6978      	ldr	r0, [r7, #20]
 800a722:	f7ff ff8b 	bl	800a63c <xTimerGenericCommand>
 800a726:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10b      	bne.n	800a746 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	4798      	blx	r3
}
 800a74e:	bf00      	nop
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000fb8 	.word	0x20000fb8

0800a75c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f859 	bl	800a820 <prvGetNextExpireTime>
 800a76e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f805 	bl	800a784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a77a:	f000 f8d7 	bl	800a92c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a77e:	bf00      	nop
 800a780:	e7f0      	b.n	800a764 <prvTimerTask+0x8>
	...

0800a784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a78e:	f7ff fa2f 	bl	8009bf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f866 	bl	800a868 <prvSampleTimeNow>
 800a79c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d130      	bne.n	800a806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <prvProcessTimerOrBlockTask+0x3c>
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d806      	bhi.n	800a7c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7b2:	f7ff fa2b 	bl	8009c0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff ff8d 	bl	800a6d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7be:	e024      	b.n	800a80a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d008      	beq.n	800a7d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <prvProcessTimerOrBlockTask+0x90>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf0c      	ite	eq
 800a7d0:	2301      	moveq	r3, #1
 800a7d2:	2300      	movne	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <prvProcessTimerOrBlockTask+0x94>)
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f7fe ff75 	bl	80096d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7ea:	f7ff fa0f 	bl	8009c0c <xTaskResumeAll>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7f4:	4b09      	ldr	r3, [pc, #36]	@ (800a81c <prvProcessTimerOrBlockTask+0x98>)
 800a7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	f3bf 8f6f 	isb	sy
}
 800a804:	e001      	b.n	800a80a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a806:	f7ff fa01 	bl	8009c0c <xTaskResumeAll>
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000fbc 	.word	0x20000fbc
 800a818:	20000fc0 	.word	0x20000fc0
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a828:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <prvGetNextExpireTime+0x44>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bf0c      	ite	eq
 800a832:	2301      	moveq	r3, #1
 800a834:	2300      	movne	r3, #0
 800a836:	b2db      	uxtb	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d105      	bne.n	800a852 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a846:	4b07      	ldr	r3, [pc, #28]	@ (800a864 <prvGetNextExpireTime+0x44>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e001      	b.n	800a856 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a856:	68fb      	ldr	r3, [r7, #12]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20000fb8 	.word	0x20000fb8

0800a868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a870:	f7ff fa6a 	bl	8009d48 <xTaskGetTickCount>
 800a874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a876:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <prvSampleTimeNow+0x3c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d205      	bcs.n	800a88c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a880:	f000 f910 	bl	800aaa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e002      	b.n	800a892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a892:	4a04      	ldr	r2, [pc, #16]	@ (800a8a4 <prvSampleTimeNow+0x3c>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a898:	68fb      	ldr	r3, [r7, #12]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000fc8 	.word	0x20000fc8

0800a8a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d812      	bhi.n	800a8f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e01b      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <prvInsertTimerInActiveList+0x7c>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fe f9cd 	bl	8008c8c <vListInsert>
 800a8f2:	e012      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d206      	bcs.n	800a90a <prvInsertTimerInActiveList+0x62>
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d302      	bcc.n	800a90a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e007      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a90a:	4b07      	ldr	r3, [pc, #28]	@ (800a928 <prvInsertTimerInActiveList+0x80>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f7fe f9b9 	bl	8008c8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a91a:	697b      	ldr	r3, [r7, #20]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000fbc 	.word	0x20000fbc
 800a928:	20000fb8 	.word	0x20000fb8

0800a92c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08e      	sub	sp, #56	@ 0x38
 800a930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a932:	e0a5      	b.n	800aa80 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	da19      	bge.n	800a96e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a93a:	1d3b      	adds	r3, r7, #4
 800a93c:	3304      	adds	r3, #4
 800a93e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10b      	bne.n	800a95e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	61fb      	str	r3, [r7, #28]
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	e7fd      	b.n	800a95a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a964:	6850      	ldr	r0, [r2, #4]
 800a966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a968:	6892      	ldr	r2, [r2, #8]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f2c0 8085 	blt.w	800aa80 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d004      	beq.n	800a98c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	3304      	adds	r3, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe f9b8 	bl	8008cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a98c:	463b      	mov	r3, r7
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff ff6a 	bl	800a868 <prvSampleTimeNow>
 800a994:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b09      	cmp	r3, #9
 800a99a:	d86c      	bhi.n	800aa76 <prvProcessReceivedCommands+0x14a>
 800a99c:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <prvProcessReceivedCommands+0x78>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9cd 	.word	0x0800a9cd
 800a9a8:	0800a9cd 	.word	0x0800a9cd
 800a9ac:	0800a9cd 	.word	0x0800a9cd
 800a9b0:	0800aa77 	.word	0x0800aa77
 800a9b4:	0800aa2b 	.word	0x0800aa2b
 800a9b8:	0800aa65 	.word	0x0800aa65
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800a9cd 	.word	0x0800a9cd
 800a9c4:	0800aa77 	.word	0x0800aa77
 800a9c8:	0800aa2b 	.word	0x0800aa2b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	18d1      	adds	r1, r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9da:	f7ff ff65 	bl	800a8a8 <prvInsertTimerInActiveList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d04a      	beq.n	800aa7a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d142      	bne.n	800aa7a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	441a      	add	r2, r3
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	2300      	movs	r3, #0
 800aa02:	2100      	movs	r1, #0
 800aa04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa06:	f7ff fe19 	bl	800a63c <xTimerGenericCommand>
 800aa0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d133      	bne.n	800aa7a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	61bb      	str	r3, [r7, #24]
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop
 800aa28:	e7fd      	b.n	800aa26 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10b      	bne.n	800aa50 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800aa38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	617b      	str	r3, [r7, #20]
}
 800aa4a:	bf00      	nop
 800aa4c:	bf00      	nop
 800aa4e:	e7fd      	b.n	800aa4c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	699a      	ldr	r2, [r3, #24]
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	18d1      	adds	r1, r2, r3
 800aa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa5e:	f7ff ff23 	bl	800a8a8 <prvInsertTimerInActiveList>
					break;
 800aa62:	e00d      	b.n	800aa80 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d107      	bne.n	800aa7e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800aa6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa70:	f000 fb76 	bl	800b160 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa74:	e003      	b.n	800aa7e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800aa76:	bf00      	nop
 800aa78:	e002      	b.n	800aa80 <prvProcessReceivedCommands+0x154>
					break;
 800aa7a:	bf00      	nop
 800aa7c:	e000      	b.n	800aa80 <prvProcessReceivedCommands+0x154>
					break;
 800aa7e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa80:	4b07      	ldr	r3, [pc, #28]	@ (800aaa0 <prvProcessReceivedCommands+0x174>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	1d39      	adds	r1, r7, #4
 800aa86:	2200      	movs	r2, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fc09 	bl	80092a0 <xQueueReceive>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f47f af4f 	bne.w	800a934 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	3730      	adds	r7, #48	@ 0x30
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000fc0 	.word	0x20000fc0

0800aaa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaaa:	e046      	b.n	800ab3a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaac:	4b2c      	ldr	r3, [pc, #176]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aab6:	4b2a      	ldr	r3, [pc, #168]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe f919 	bl	8008cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d12f      	bne.n	800ab3a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4413      	add	r3, r2
 800aae2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d90e      	bls.n	800ab0a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf8:	4b19      	ldr	r3, [pc, #100]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4619      	mov	r1, r3
 800ab02:	4610      	mov	r0, r2
 800ab04:	f7fe f8c2 	bl	8008c8c <vListInsert>
 800ab08:	e017      	b.n	800ab3a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	2100      	movs	r1, #0
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7ff fd91 	bl	800a63c <xTimerGenericCommand>
 800ab1a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10b      	bne.n	800ab3a <prvSwitchTimerLists+0x96>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	603b      	str	r3, [r7, #0]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab3a:	4b09      	ldr	r3, [pc, #36]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1b3      	bne.n	800aaac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab44:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab4a:	4b06      	ldr	r3, [pc, #24]	@ (800ab64 <prvSwitchTimerLists+0xc0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a04      	ldr	r2, [pc, #16]	@ (800ab60 <prvSwitchTimerLists+0xbc>)
 800ab50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab52:	4a04      	ldr	r2, [pc, #16]	@ (800ab64 <prvSwitchTimerLists+0xc0>)
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	6013      	str	r3, [r2, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000fb8 	.word	0x20000fb8
 800ab64:	20000fbc 	.word	0x20000fbc

0800ab68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab6e:	f000 f92d 	bl	800adcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab72:	4b15      	ldr	r3, [pc, #84]	@ (800abc8 <prvCheckForValidListAndQueue+0x60>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d120      	bne.n	800abbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab7a:	4814      	ldr	r0, [pc, #80]	@ (800abcc <prvCheckForValidListAndQueue+0x64>)
 800ab7c:	f7fe f838 	bl	8008bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab80:	4813      	ldr	r0, [pc, #76]	@ (800abd0 <prvCheckForValidListAndQueue+0x68>)
 800ab82:	f7fe f835 	bl	8008bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab86:	4b13      	ldr	r3, [pc, #76]	@ (800abd4 <prvCheckForValidListAndQueue+0x6c>)
 800ab88:	4a10      	ldr	r2, [pc, #64]	@ (800abcc <prvCheckForValidListAndQueue+0x64>)
 800ab8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab8c:	4b12      	ldr	r3, [pc, #72]	@ (800abd8 <prvCheckForValidListAndQueue+0x70>)
 800ab8e:	4a10      	ldr	r2, [pc, #64]	@ (800abd0 <prvCheckForValidListAndQueue+0x68>)
 800ab90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab92:	2300      	movs	r3, #0
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	4b11      	ldr	r3, [pc, #68]	@ (800abdc <prvCheckForValidListAndQueue+0x74>)
 800ab98:	4a11      	ldr	r2, [pc, #68]	@ (800abe0 <prvCheckForValidListAndQueue+0x78>)
 800ab9a:	2110      	movs	r1, #16
 800ab9c:	200a      	movs	r0, #10
 800ab9e:	f7fe f941 	bl	8008e24 <xQueueGenericCreateStatic>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4a08      	ldr	r2, [pc, #32]	@ (800abc8 <prvCheckForValidListAndQueue+0x60>)
 800aba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aba8:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <prvCheckForValidListAndQueue+0x60>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abb0:	4b05      	ldr	r3, [pc, #20]	@ (800abc8 <prvCheckForValidListAndQueue+0x60>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	490b      	ldr	r1, [pc, #44]	@ (800abe4 <prvCheckForValidListAndQueue+0x7c>)
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fd64 	bl	8009684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abbc:	f000 f936 	bl	800ae2c <vPortExitCritical>
}
 800abc0:	bf00      	nop
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000fc0 	.word	0x20000fc0
 800abcc:	20000f90 	.word	0x20000f90
 800abd0:	20000fa4 	.word	0x20000fa4
 800abd4:	20000fb8 	.word	0x20000fb8
 800abd8:	20000fbc 	.word	0x20000fbc
 800abdc:	2000106c 	.word	0x2000106c
 800abe0:	20000fcc 	.word	0x20000fcc
 800abe4:	0800be44 	.word	0x0800be44

0800abe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3b04      	subs	r3, #4
 800abf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3b04      	subs	r3, #4
 800ac06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f023 0201 	bic.w	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac18:	4a08      	ldr	r2, [pc, #32]	@ (800ac3c <pxPortInitialiseStack+0x54>)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3b14      	subs	r3, #20
 800ac22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3b20      	subs	r3, #32
 800ac2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac30:	68fb      	ldr	r3, [r7, #12]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr
 800ac3c:	0800ac41 	.word	0x0800ac41

0800ac40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac4a:	4b12      	ldr	r3, [pc, #72]	@ (800ac94 <prvTaskExitError+0x54>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac52:	d00b      	beq.n	800ac6c <prvTaskExitError+0x2c>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
}
 800ac66:	bf00      	nop
 800ac68:	bf00      	nop
 800ac6a:	e7fd      	b.n	800ac68 <prvTaskExitError+0x28>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60bb      	str	r3, [r7, #8]
}
 800ac7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac80:	bf00      	nop
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0fc      	beq.n	800ac82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr
 800ac94:	200000c4 	.word	0x200000c4
	...

0800aca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aca0:	4b07      	ldr	r3, [pc, #28]	@ (800acc0 <pxCurrentTCBConst2>)
 800aca2:	6819      	ldr	r1, [r3, #0]
 800aca4:	6808      	ldr	r0, [r1, #0]
 800aca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800acaa:	f380 8809 	msr	PSP, r0
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f04f 0000 	mov.w	r0, #0
 800acb6:	f380 8811 	msr	BASEPRI, r0
 800acba:	f04e 0e0d 	orr.w	lr, lr, #13
 800acbe:	4770      	bx	lr

0800acc0 <pxCurrentTCBConst2>:
 800acc0:	20000a90 	.word	0x20000a90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop

0800acc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800acc8:	4806      	ldr	r0, [pc, #24]	@ (800ace4 <prvPortStartFirstTask+0x1c>)
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	6800      	ldr	r0, [r0, #0]
 800acce:	f380 8808 	msr	MSP, r0
 800acd2:	b662      	cpsie	i
 800acd4:	b661      	cpsie	f
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	df00      	svc	0
 800ace0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ace2:	bf00      	nop
 800ace4:	e000ed08 	.word	0xe000ed08

0800ace8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acee:	4b32      	ldr	r3, [pc, #200]	@ (800adb8 <xPortStartScheduler+0xd0>)
 800acf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	22ff      	movs	r2, #255	@ 0xff
 800acfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	4b2a      	ldr	r3, [pc, #168]	@ (800adbc <xPortStartScheduler+0xd4>)
 800ad14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad16:	4b2a      	ldr	r3, [pc, #168]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad18:	2207      	movs	r2, #7
 800ad1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad1c:	e009      	b.n	800ad32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ad1e:	4b28      	ldr	r3, [pc, #160]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	4a26      	ldr	r2, [pc, #152]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3a:	2b80      	cmp	r3, #128	@ 0x80
 800ad3c:	d0ef      	beq.n	800ad1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad3e:	4b20      	ldr	r3, [pc, #128]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f1c3 0307 	rsb	r3, r3, #7
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d00b      	beq.n	800ad62 <xPortStartScheduler+0x7a>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	60bb      	str	r3, [r7, #8]
}
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	e7fd      	b.n	800ad5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad62:	4b17      	ldr	r3, [pc, #92]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	4a15      	ldr	r2, [pc, #84]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad6c:	4b14      	ldr	r3, [pc, #80]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad74:	4a12      	ldr	r2, [pc, #72]	@ (800adc0 <xPortStartScheduler+0xd8>)
 800ad76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad80:	4b10      	ldr	r3, [pc, #64]	@ (800adc4 <xPortStartScheduler+0xdc>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a0f      	ldr	r2, [pc, #60]	@ (800adc4 <xPortStartScheduler+0xdc>)
 800ad86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ad8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad8c:	4b0d      	ldr	r3, [pc, #52]	@ (800adc4 <xPortStartScheduler+0xdc>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0c      	ldr	r2, [pc, #48]	@ (800adc4 <xPortStartScheduler+0xdc>)
 800ad92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ad96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad98:	f000 f8b8 	bl	800af0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	@ (800adc8 <xPortStartScheduler+0xe0>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ada2:	f7ff ff91 	bl	800acc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ada6:	f7ff f89d 	bl	8009ee4 <vTaskSwitchContext>
	prvTaskExitError();
 800adaa:	f7ff ff49 	bl	800ac40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	e000e400 	.word	0xe000e400
 800adbc:	200010bc 	.word	0x200010bc
 800adc0:	200010c0 	.word	0x200010c0
 800adc4:	e000ed20 	.word	0xe000ed20
 800adc8:	200000c4 	.word	0x200000c4

0800adcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	607b      	str	r3, [r7, #4]
}
 800ade4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ade6:	4b0f      	ldr	r3, [pc, #60]	@ (800ae24 <vPortEnterCritical+0x58>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3301      	adds	r3, #1
 800adec:	4a0d      	ldr	r2, [pc, #52]	@ (800ae24 <vPortEnterCritical+0x58>)
 800adee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ae24 <vPortEnterCritical+0x58>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d110      	bne.n	800ae1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae28 <vPortEnterCritical+0x5c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <vPortEnterCritical+0x4e>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	603b      	str	r3, [r7, #0]
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
 800ae18:	e7fd      	b.n	800ae16 <vPortEnterCritical+0x4a>
	}
}
 800ae1a:	bf00      	nop
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr
 800ae24:	200000c4 	.word	0x200000c4
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae32:	4b12      	ldr	r3, [pc, #72]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <vPortExitCritical+0x26>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	607b      	str	r3, [r7, #4]
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	e7fd      	b.n	800ae4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae52:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	4a08      	ldr	r2, [pc, #32]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae5c:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d105      	bne.n	800ae70 <vPortExitCritical+0x44>
 800ae64:	2300      	movs	r3, #0
 800ae66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f383 8811 	msr	BASEPRI, r3
}
 800ae6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	200000c4 	.word	0x200000c4

0800ae80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae80:	f3ef 8009 	mrs	r0, PSP
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <pxCurrentTCBConst>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae90:	6010      	str	r0, [r2, #0]
 800ae92:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ae96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ae9a:	f380 8811 	msr	BASEPRI, r0
 800ae9e:	f7ff f821 	bl	8009ee4 <vTaskSwitchContext>
 800aea2:	f04f 0000 	mov.w	r0, #0
 800aea6:	f380 8811 	msr	BASEPRI, r0
 800aeaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aeae:	6819      	ldr	r1, [r3, #0]
 800aeb0:	6808      	ldr	r0, [r1, #0]
 800aeb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aeb6:	f380 8809 	msr	PSP, r0
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	4770      	bx	lr

0800aec0 <pxCurrentTCBConst>:
 800aec0:	20000a90 	.word	0x20000a90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop

0800aec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	607b      	str	r3, [r7, #4]
}
 800aee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aee2:	f7fe ff3f 	bl	8009d64 <xTaskIncrementTick>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeec:	4b06      	ldr	r3, [pc, #24]	@ (800af08 <SysTick_Handler+0x40>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f383 8811 	msr	BASEPRI, r3
}
 800aefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af10:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <vPortSetupTimerInterrupt+0x30>)
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af16:	4b0a      	ldr	r3, [pc, #40]	@ (800af40 <vPortSetupTimerInterrupt+0x34>)
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af1c:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <vPortSetupTimerInterrupt+0x38>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a09      	ldr	r2, [pc, #36]	@ (800af48 <vPortSetupTimerInterrupt+0x3c>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	099b      	lsrs	r3, r3, #6
 800af28:	4a08      	ldr	r2, [pc, #32]	@ (800af4c <vPortSetupTimerInterrupt+0x40>)
 800af2a:	3b01      	subs	r3, #1
 800af2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af2e:	4b03      	ldr	r3, [pc, #12]	@ (800af3c <vPortSetupTimerInterrupt+0x30>)
 800af30:	2207      	movs	r2, #7
 800af32:	601a      	str	r2, [r3, #0]
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr
 800af3c:	e000e010 	.word	0xe000e010
 800af40:	e000e018 	.word	0xe000e018
 800af44:	20000000 	.word	0x20000000
 800af48:	10624dd3 	.word	0x10624dd3
 800af4c:	e000e014 	.word	0xe000e014

0800af50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af56:	f3ef 8305 	mrs	r3, IPSR
 800af5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b0f      	cmp	r3, #15
 800af60:	d915      	bls.n	800af8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af62:	4a17      	ldr	r2, [pc, #92]	@ (800afc0 <vPortValidateInterruptPriority+0x70>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af6c:	4b15      	ldr	r3, [pc, #84]	@ (800afc4 <vPortValidateInterruptPriority+0x74>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	7afa      	ldrb	r2, [r7, #11]
 800af72:	429a      	cmp	r2, r3
 800af74:	d20b      	bcs.n	800af8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	607b      	str	r3, [r7, #4]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af8e:	4b0e      	ldr	r3, [pc, #56]	@ (800afc8 <vPortValidateInterruptPriority+0x78>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af96:	4b0d      	ldr	r3, [pc, #52]	@ (800afcc <vPortValidateInterruptPriority+0x7c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d90b      	bls.n	800afb6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	603b      	str	r3, [r7, #0]
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	e7fd      	b.n	800afb2 <vPortValidateInterruptPriority+0x62>
	}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr
 800afc0:	e000e3f0 	.word	0xe000e3f0
 800afc4:	200010bc 	.word	0x200010bc
 800afc8:	e000ed0c 	.word	0xe000ed0c
 800afcc:	200010c0 	.word	0x200010c0

0800afd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	@ 0x28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afdc:	f7fe fe08 	bl	8009bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afe0:	4b5a      	ldr	r3, [pc, #360]	@ (800b14c <pvPortMalloc+0x17c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afe8:	f000 f916 	bl	800b218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afec:	4b58      	ldr	r3, [pc, #352]	@ (800b150 <pvPortMalloc+0x180>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4013      	ands	r3, r2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f040 8090 	bne.w	800b11a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01e      	beq.n	800b03e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b000:	2208      	movs	r2, #8
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4413      	add	r3, r2
 800b006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f003 0307 	and.w	r3, r3, #7
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d015      	beq.n	800b03e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f023 0307 	bic.w	r3, r3, #7
 800b018:	3308      	adds	r3, #8
 800b01a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00b      	beq.n	800b03e <pvPortMalloc+0x6e>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	617b      	str	r3, [r7, #20]
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	e7fd      	b.n	800b03a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d06a      	beq.n	800b11a <pvPortMalloc+0x14a>
 800b044:	4b43      	ldr	r3, [pc, #268]	@ (800b154 <pvPortMalloc+0x184>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d865      	bhi.n	800b11a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b04e:	4b42      	ldr	r3, [pc, #264]	@ (800b158 <pvPortMalloc+0x188>)
 800b050:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b052:	4b41      	ldr	r3, [pc, #260]	@ (800b158 <pvPortMalloc+0x188>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b058:	e004      	b.n	800b064 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d903      	bls.n	800b076 <pvPortMalloc+0xa6>
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1f1      	bne.n	800b05a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b076:	4b35      	ldr	r3, [pc, #212]	@ (800b14c <pvPortMalloc+0x17c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d04c      	beq.n	800b11a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2208      	movs	r2, #8
 800b086:	4413      	add	r3, r2
 800b088:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	1ad2      	subs	r2, r2, r3
 800b09a:	2308      	movs	r3, #8
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d920      	bls.n	800b0e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	f003 0307 	and.w	r3, r3, #7
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <pvPortMalloc+0xfc>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	613b      	str	r3, [r7, #16]
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	1ad2      	subs	r2, r2, r3
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0de:	69b8      	ldr	r0, [r7, #24]
 800b0e0:	f000 f8fc 	bl	800b2dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b154 <pvPortMalloc+0x184>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	4a19      	ldr	r2, [pc, #100]	@ (800b154 <pvPortMalloc+0x184>)
 800b0f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0f2:	4b18      	ldr	r3, [pc, #96]	@ (800b154 <pvPortMalloc+0x184>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	4b19      	ldr	r3, [pc, #100]	@ (800b15c <pvPortMalloc+0x18c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d203      	bcs.n	800b106 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0fe:	4b15      	ldr	r3, [pc, #84]	@ (800b154 <pvPortMalloc+0x184>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a16      	ldr	r2, [pc, #88]	@ (800b15c <pvPortMalloc+0x18c>)
 800b104:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <pvPortMalloc+0x180>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	431a      	orrs	r2, r3
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b11a:	f7fe fd77 	bl	8009c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <pvPortMalloc+0x170>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	60fb      	str	r3, [r7, #12]
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	e7fd      	b.n	800b13c <pvPortMalloc+0x16c>
	return pvReturn;
 800b140:	69fb      	ldr	r3, [r7, #28]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3728      	adds	r7, #40	@ 0x28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20001ccc 	.word	0x20001ccc
 800b150:	20001cd8 	.word	0x20001cd8
 800b154:	20001cd0 	.word	0x20001cd0
 800b158:	20001cc4 	.word	0x20001cc4
 800b15c:	20001cd4 	.word	0x20001cd4

0800b160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d04a      	beq.n	800b208 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b172:	2308      	movs	r3, #8
 800b174:	425b      	negs	r3, r3
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	4413      	add	r3, r2
 800b17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	4b22      	ldr	r3, [pc, #136]	@ (800b210 <vPortFree+0xb0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4013      	ands	r3, r2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <vPortFree+0x46>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60fb      	str	r3, [r7, #12]
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	e7fd      	b.n	800b1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <vPortFree+0x66>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60bb      	str	r3, [r7, #8]
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	e7fd      	b.n	800b1c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	4b11      	ldr	r3, [pc, #68]	@ (800b210 <vPortFree+0xb0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d019      	beq.n	800b208 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d115      	bne.n	800b208 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b210 <vPortFree+0xb0>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	43db      	mvns	r3, r3
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1ec:	f7fe fd00 	bl	8009bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	4b07      	ldr	r3, [pc, #28]	@ (800b214 <vPortFree+0xb4>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	4a06      	ldr	r2, [pc, #24]	@ (800b214 <vPortFree+0xb4>)
 800b1fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f000 f86c 	bl	800b2dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b204:	f7fe fd02 	bl	8009c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b208:	bf00      	nop
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20001cd8 	.word	0x20001cd8
 800b214:	20001cd0 	.word	0x20001cd0

0800b218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b21e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b224:	4b27      	ldr	r3, [pc, #156]	@ (800b2c4 <prvHeapInit+0xac>)
 800b226:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00c      	beq.n	800b24c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3307      	adds	r3, #7
 800b236:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c4 <prvHeapInit+0xac>)
 800b248:	4413      	add	r3, r2
 800b24a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b250:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c8 <prvHeapInit+0xb0>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b256:	4b1c      	ldr	r3, [pc, #112]	@ (800b2c8 <prvHeapInit+0xb0>)
 800b258:	2200      	movs	r2, #0
 800b25a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b264:	2208      	movs	r2, #8
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	1a9b      	subs	r3, r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	4a15      	ldr	r2, [pc, #84]	@ (800b2cc <prvHeapInit+0xb4>)
 800b278:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b27a:	4b14      	ldr	r3, [pc, #80]	@ (800b2cc <prvHeapInit+0xb4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2200      	movs	r2, #0
 800b280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b282:	4b12      	ldr	r3, [pc, #72]	@ (800b2cc <prvHeapInit+0xb4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b298:	4b0c      	ldr	r3, [pc, #48]	@ (800b2cc <prvHeapInit+0xb4>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4a0a      	ldr	r2, [pc, #40]	@ (800b2d0 <prvHeapInit+0xb8>)
 800b2a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4a09      	ldr	r2, [pc, #36]	@ (800b2d4 <prvHeapInit+0xbc>)
 800b2ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2b0:	4b09      	ldr	r3, [pc, #36]	@ (800b2d8 <prvHeapInit+0xc0>)
 800b2b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b2b6:	601a      	str	r2, [r3, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	200010c4 	.word	0x200010c4
 800b2c8:	20001cc4 	.word	0x20001cc4
 800b2cc:	20001ccc 	.word	0x20001ccc
 800b2d0:	20001cd4 	.word	0x20001cd4
 800b2d4:	20001cd0 	.word	0x20001cd0
 800b2d8:	20001cd8 	.word	0x20001cd8

0800b2dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2e4:	4b27      	ldr	r3, [pc, #156]	@ (800b384 <prvInsertBlockIntoFreeList+0xa8>)
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	e002      	b.n	800b2f0 <prvInsertBlockIntoFreeList+0x14>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d8f7      	bhi.n	800b2ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	4413      	add	r3, r2
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d108      	bne.n	800b31e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	441a      	add	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	441a      	add	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d118      	bne.n	800b364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <prvInsertBlockIntoFreeList+0xac>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d00d      	beq.n	800b35a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	441a      	add	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	e008      	b.n	800b36c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b35a:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <prvInsertBlockIntoFreeList+0xac>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	e003      	b.n	800b36c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d002      	beq.n	800b37a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	bc80      	pop	{r7}
 800b382:	4770      	bx	lr
 800b384:	20001cc4 	.word	0x20001cc4
 800b388:	20001ccc 	.word	0x20001ccc

0800b38c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b390:	2200      	movs	r2, #0
 800b392:	4912      	ldr	r1, [pc, #72]	@ (800b3dc <MX_USB_DEVICE_Init+0x50>)
 800b394:	4812      	ldr	r0, [pc, #72]	@ (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b396:	f7fc f9e9 	bl	800776c <USBD_Init>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3a0:	f7f5 f826 	bl	80003f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800b3a4:	490f      	ldr	r1, [pc, #60]	@ (800b3e4 <MX_USB_DEVICE_Init+0x58>)
 800b3a6:	480e      	ldr	r0, [pc, #56]	@ (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3a8:	f7fc fa0b 	bl	80077c2 <USBD_RegisterClass>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3b2:	f7f5 f81d 	bl	80003f0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800b3b6:	490c      	ldr	r1, [pc, #48]	@ (800b3e8 <MX_USB_DEVICE_Init+0x5c>)
 800b3b8:	4809      	ldr	r0, [pc, #36]	@ (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3ba:	f7fb f9b7 	bl	800672c <USBD_MSC_RegisterStorage>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3c4:	f7f5 f814 	bl	80003f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3c8:	4805      	ldr	r0, [pc, #20]	@ (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3ca:	f7fc fa13 	bl	80077f4 <USBD_Start>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3d4:	f7f5 f80c 	bl	80003f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3d8:	bf00      	nop
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	200000c8 	.word	0x200000c8
 800b3e0:	20001cdc 	.word	0x20001cdc
 800b3e4:	20000020 	.word	0x20000020
 800b3e8:	20000118 	.word	0x20000118

0800b3ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2212      	movs	r2, #18
 800b3fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3fe:	4b03      	ldr	r3, [pc, #12]	@ (800b40c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	bc80      	pop	{r7}
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	200000e4 	.word	0x200000e4

0800b410 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2204      	movs	r2, #4
 800b420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b422:	4b03      	ldr	r3, [pc, #12]	@ (800b430 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	200000f8 	.word	0x200000f8

0800b434 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4907      	ldr	r1, [pc, #28]	@ (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
 800b44a:	4808      	ldr	r0, [pc, #32]	@ (800b46c <USBD_FS_ProductStrDescriptor+0x38>)
 800b44c:	f7fd f947 	bl	80086de <USBD_GetString>
 800b450:	e004      	b.n	800b45c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	4904      	ldr	r1, [pc, #16]	@ (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
 800b456:	4805      	ldr	r0, [pc, #20]	@ (800b46c <USBD_FS_ProductStrDescriptor+0x38>)
 800b458:	f7fd f941 	bl	80086de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20001fa0 	.word	0x20001fa0
 800b46c:	0800be4c 	.word	0x0800be4c

0800b470 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	4904      	ldr	r1, [pc, #16]	@ (800b490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b480:	4804      	ldr	r0, [pc, #16]	@ (800b494 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b482:	f7fd f92c 	bl	80086de <USBD_GetString>
  return USBD_StrDesc;
 800b486:	4b02      	ldr	r3, [pc, #8]	@ (800b490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20001fa0 	.word	0x20001fa0
 800b494:	0800be60 	.word	0x0800be60

0800b498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	6039      	str	r1, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	221a      	movs	r2, #26
 800b4a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4aa:	f000 f843 	bl	800b534 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ae:	4b02      	ldr	r3, [pc, #8]	@ (800b4b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	200000fc 	.word	0x200000fc

0800b4bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d105      	bne.n	800b4da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	4907      	ldr	r1, [pc, #28]	@ (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4d2:	4808      	ldr	r0, [pc, #32]	@ (800b4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4d4:	f7fd f903 	bl	80086de <USBD_GetString>
 800b4d8:	e004      	b.n	800b4e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	4904      	ldr	r1, [pc, #16]	@ (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4de:	4805      	ldr	r0, [pc, #20]	@ (800b4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4e0:	f7fd f8fd 	bl	80086de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4e4:	4b02      	ldr	r3, [pc, #8]	@ (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20001fa0 	.word	0x20001fa0
 800b4f4:	0800be74 	.word	0x0800be74

0800b4f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d105      	bne.n	800b516 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4907      	ldr	r1, [pc, #28]	@ (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b50e:	4808      	ldr	r0, [pc, #32]	@ (800b530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b510:	f7fd f8e5 	bl	80086de <USBD_GetString>
 800b514:	e004      	b.n	800b520 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4904      	ldr	r1, [pc, #16]	@ (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b51a:	4805      	ldr	r0, [pc, #20]	@ (800b530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b51c:	f7fd f8df 	bl	80086de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b520:	4b02      	ldr	r3, [pc, #8]	@ (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20001fa0 	.word	0x20001fa0
 800b530:	0800be80 	.word	0x0800be80

0800b534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b53a:	4b0f      	ldr	r3, [pc, #60]	@ (800b578 <Get_SerialNum+0x44>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b540:	4b0e      	ldr	r3, [pc, #56]	@ (800b57c <Get_SerialNum+0x48>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <Get_SerialNum+0x4c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b55a:	2208      	movs	r2, #8
 800b55c:	4909      	ldr	r1, [pc, #36]	@ (800b584 <Get_SerialNum+0x50>)
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f814 	bl	800b58c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b564:	2204      	movs	r2, #4
 800b566:	4908      	ldr	r1, [pc, #32]	@ (800b588 <Get_SerialNum+0x54>)
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	f000 f80f 	bl	800b58c <IntToUnicode>
  }
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	1ffff7e8 	.word	0x1ffff7e8
 800b57c:	1ffff7ec 	.word	0x1ffff7ec
 800b580:	1ffff7f0 	.word	0x1ffff7f0
 800b584:	200000fe 	.word	0x200000fe
 800b588:	2000010e 	.word	0x2000010e

0800b58c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75fb      	strb	r3, [r7, #23]
 800b5a2:	e027      	b.n	800b5f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	2b09      	cmp	r3, #9
 800b5aa:	d80b      	bhi.n	800b5c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0f1b      	lsrs	r3, r3, #28
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3230      	adds	r2, #48	@ 0x30
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e00a      	b.n	800b5da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	0f1b      	lsrs	r3, r3, #28
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3237      	adds	r2, #55	@ 0x37
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	7dfa      	ldrb	r2, [r7, #23]
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3d3      	bcc.n	800b5a4 <IntToUnicode+0x18>
  }
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	bc80      	pop	{r7}
 800b606:	4770      	bx	lr

0800b608 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800b612:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr

0800b61e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800b61e:	b480      	push	{r7}
 800b620:	b085      	sub	sp, #20
 800b622:	af00      	add	r7, sp, #0
 800b624:	4603      	mov	r3, r0
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b632:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b63a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800b63c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr

0800b648 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b652:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	bc80      	pop	{r7}
 800b65c:	4770      	bx	lr

0800b65e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	4603      	mov	r3, r0
 800b666:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b668:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	bc80      	pop	{r7}
 800b672:	4770      	bx	lr

0800b674 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	461a      	mov	r2, r3
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
 800b684:	4613      	mov	r3, r2
 800b686:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800b688:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr

0800b694 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800b6a8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800b6b8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b708 <HAL_PCD_MspInit+0x44>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d113      	bne.n	800b6fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b70c <HAL_PCD_MspInit+0x48>)
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	4a0c      	ldr	r2, [pc, #48]	@ (800b70c <HAL_PCD_MspInit+0x48>)
 800b6dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b6e0:	61d3      	str	r3, [r2, #28]
 800b6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <HAL_PCD_MspInit+0x48>)
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2105      	movs	r1, #5
 800b6f2:	2014      	movs	r0, #20
 800b6f4:	f7f5 f927 	bl	8000946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b6f8:	2014      	movs	r0, #20
 800b6fa:	f7f5 f940 	bl	800097e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b6fe:	bf00      	nop
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	40005c00 	.word	0x40005c00
 800b70c:	40021000 	.word	0x40021000

0800b710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fc f8ac 	bl	8007884 <USBD_LL_SetupStage>
}
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b746:	78fa      	ldrb	r2, [r7, #3]
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	440b      	add	r3, r1
 800b754:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f7fc f8de 	bl	800791e <USBD_LL_DataOutStage>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b77c:	78fa      	ldrb	r2, [r7, #3]
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	440b      	add	r3, r1
 800b78a:	333c      	adds	r3, #60	@ 0x3c
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	4619      	mov	r1, r3
 800b792:	f7fc f935 	bl	8007a00 <USBD_LL_DataInStage>
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fc fa45 	bl	8007c3c <USBD_LL_SOF>
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d001      	beq.n	800b7d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7ce:	f7f4 fe0f 	bl	80003f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7d8:	7bfa      	ldrb	r2, [r7, #15]
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc f9f5 	bl	8007bcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fc f9ae 	bl	8007b4a <USBD_LL_Reset>
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b806:	4618      	mov	r0, r3
 800b808:	f7fc f9ef 	bl	8007bea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b814:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <HAL_PCD_SuspendCallback+0x30>)
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	4a03      	ldr	r2, [pc, #12]	@ (800b828 <HAL_PCD_SuspendCallback+0x30>)
 800b81a:	f043 0306 	orr.w	r3, r3, #6
 800b81e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed00 	.word	0xe000ed00

0800b82c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fc f9e9 	bl	8007c12 <USBD_LL_Resume>
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b850:	4a23      	ldr	r2, [pc, #140]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a21      	ldr	r2, [pc, #132]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b85c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b860:	4b1f      	ldr	r3, [pc, #124]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b862:	4a20      	ldr	r2, [pc, #128]	@ (800b8e4 <USBD_LL_Init+0x9c>)
 800b864:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b866:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b868:	2208      	movs	r2, #8
 800b86a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b86c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b86e:	2202      	movs	r2, #2
 800b870:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b872:	4b1b      	ldr	r3, [pc, #108]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b874:	2200      	movs	r2, #0
 800b876:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b878:	4b19      	ldr	r3, [pc, #100]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b87e:	4b18      	ldr	r3, [pc, #96]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b880:	2200      	movs	r2, #0
 800b882:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b884:	4816      	ldr	r0, [pc, #88]	@ (800b8e0 <USBD_LL_Init+0x98>)
 800b886:	f7f5 fb51 	bl	8000f2c <HAL_PCD_Init>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b890:	f7f4 fdae 	bl	80003f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b89a:	2318      	movs	r3, #24
 800b89c:	2200      	movs	r2, #0
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f7f7 f89c 	bl	80029dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b8aa:	2358      	movs	r3, #88	@ 0x58
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2180      	movs	r1, #128	@ 0x80
 800b8b0:	f7f7 f894 	bl	80029dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b8ba:	2398      	movs	r3, #152	@ 0x98
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2181      	movs	r1, #129	@ 0x81
 800b8c0:	f7f7 f88c 	bl	80029dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b8ca:	23d8      	movs	r3, #216	@ 0xd8
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	f7f7 f884 	bl	80029dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200021a0 	.word	0x200021a0
 800b8e4:	40005c00 	.word	0x40005c00

0800b8e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7f5 fc13 	bl	800112a <HAL_PCD_Start>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b908:	7bfb      	ldrb	r3, [r7, #15]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f96e 	bl	800bbec <USBD_Get_USB_Status>
 800b910:	4603      	mov	r3, r0
 800b912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b914:	7bbb      	ldrb	r3, [r7, #14]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	461a      	mov	r2, r3
 800b92c:	4603      	mov	r3, r0
 800b92e:	70fb      	strb	r3, [r7, #3]
 800b930:	460b      	mov	r3, r1
 800b932:	70bb      	strb	r3, [r7, #2]
 800b934:	4613      	mov	r3, r2
 800b936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b946:	78bb      	ldrb	r3, [r7, #2]
 800b948:	883a      	ldrh	r2, [r7, #0]
 800b94a:	78f9      	ldrb	r1, [r7, #3]
 800b94c:	f7f5 fd68 	bl	8001420 <HAL_PCD_EP_Open>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 f948 	bl	800bbec <USBD_Get_USB_Status>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b960:	7bbb      	ldrb	r3, [r7, #14]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	460b      	mov	r3, r1
 800b974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b984:	78fa      	ldrb	r2, [r7, #3]
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7f5 fda6 	bl	80014da <HAL_PCD_EP_Close>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	4618      	mov	r0, r3
 800b996:	f000 f929 	bl	800bbec <USBD_Get_USB_Status>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f5 ff02 	bl	80017d0 <HAL_PCD_EP_Flush>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 f90a 	bl	800bbec <USBD_Get_USB_Status>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba00:	78fa      	ldrb	r2, [r7, #3]
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7f5 fe2f 	bl	8001668 <HAL_PCD_EP_SetStall>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 f8eb 	bl	800bbec <USBD_Get_USB_Status>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba3e:	78fa      	ldrb	r2, [r7, #3]
 800ba40:	4611      	mov	r1, r2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f5 fe70 	bl	8001728 <HAL_PCD_EP_ClrStall>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f8cc 	bl	800bbec <USBD_Get_USB_Status>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba74:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da0c      	bge.n	800ba98 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba7e:	78fb      	ldrb	r3, [r7, #3]
 800ba80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba84:	68f9      	ldr	r1, [r7, #12]
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	440b      	add	r3, r1
 800ba92:	3302      	adds	r3, #2
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	e00b      	b.n	800bab0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	440b      	add	r3, r1
 800baaa:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800baae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bc80      	pop	{r7}
 800bab8:	4770      	bx	lr

0800baba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bad4:	78fa      	ldrb	r2, [r7, #3]
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f5 fc7c 	bl	80013d6 <HAL_PCD_SetAddress>
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f881 	bl	800bbec <USBD_Get_USB_Status>
 800baea:	4603      	mov	r3, r0
 800baec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baee:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	461a      	mov	r2, r3
 800bb04:	460b      	mov	r3, r1
 800bb06:	72fb      	strb	r3, [r7, #11]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bb1a:	893b      	ldrh	r3, [r7, #8]
 800bb1c:	7af9      	ldrb	r1, [r7, #11]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	f7f5 fd6b 	bl	80015fa <HAL_PCD_EP_Transmit>
 800bb24:	4603      	mov	r3, r0
 800bb26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 f85e 	bl	800bbec <USBD_Get_USB_Status>
 800bb30:	4603      	mov	r3, r0
 800bb32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb34:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b086      	sub	sp, #24
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	72fb      	strb	r3, [r7, #11]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bb60:	893b      	ldrh	r3, [r7, #8]
 800bb62:	7af9      	ldrb	r1, [r7, #11]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	f7f5 fd00 	bl	800156a <HAL_PCD_EP_Receive>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 f83b 	bl	800bbec <USBD_Get_USB_Status>
 800bb76:	4603      	mov	r3, r0
 800bb78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f5 fd16 	bl	80015cc <HAL_PCD_EP_GetRxCount>
 800bba0:	4603      	mov	r3, r0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbb4:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <USBD_static_malloc+0x14>)
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bc80      	pop	{r7}
 800bbbe:	4770      	bx	lr
 800bbc0:	20002490 	.word	0x20002490

0800bbc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc80      	pop	{r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bc80      	pop	{r7}
 800bbea:	4770      	bx	lr

0800bbec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbfa:	79fb      	ldrb	r3, [r7, #7]
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d817      	bhi.n	800bc30 <USBD_Get_USB_Status+0x44>
 800bc00:	a201      	add	r2, pc, #4	@ (adr r2, 800bc08 <USBD_Get_USB_Status+0x1c>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bc19 	.word	0x0800bc19
 800bc0c:	0800bc1f 	.word	0x0800bc1f
 800bc10:	0800bc25 	.word	0x0800bc25
 800bc14:	0800bc2b 	.word	0x0800bc2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1c:	e00b      	b.n	800bc36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc1e:	2302      	movs	r3, #2
 800bc20:	73fb      	strb	r3, [r7, #15]
    break;
 800bc22:	e008      	b.n	800bc36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc24:	2301      	movs	r3, #1
 800bc26:	73fb      	strb	r3, [r7, #15]
    break;
 800bc28:	e005      	b.n	800bc36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2e:	e002      	b.n	800bc36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc30:	2302      	movs	r3, #2
 800bc32:	73fb      	strb	r3, [r7, #15]
    break;
 800bc34:	bf00      	nop
  }
  return usb_status;
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bc80      	pop	{r7}
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop

0800bc44 <memset>:
 800bc44:	4603      	mov	r3, r0
 800bc46:	4402      	add	r2, r0
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d100      	bne.n	800bc4e <memset+0xa>
 800bc4c:	4770      	bx	lr
 800bc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc52:	e7f9      	b.n	800bc48 <memset+0x4>

0800bc54 <_reclaim_reent>:
 800bc54:	4b29      	ldr	r3, [pc, #164]	@ (800bcfc <_reclaim_reent+0xa8>)
 800bc56:	b570      	push	{r4, r5, r6, lr}
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4283      	cmp	r3, r0
 800bc5e:	d04b      	beq.n	800bcf8 <_reclaim_reent+0xa4>
 800bc60:	69c3      	ldr	r3, [r0, #28]
 800bc62:	b1ab      	cbz	r3, 800bc90 <_reclaim_reent+0x3c>
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	b16b      	cbz	r3, 800bc84 <_reclaim_reent+0x30>
 800bc68:	2500      	movs	r5, #0
 800bc6a:	69e3      	ldr	r3, [r4, #28]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	5959      	ldr	r1, [r3, r5]
 800bc70:	2900      	cmp	r1, #0
 800bc72:	d13b      	bne.n	800bcec <_reclaim_reent+0x98>
 800bc74:	3504      	adds	r5, #4
 800bc76:	2d80      	cmp	r5, #128	@ 0x80
 800bc78:	d1f7      	bne.n	800bc6a <_reclaim_reent+0x16>
 800bc7a:	69e3      	ldr	r3, [r4, #28]
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	68d9      	ldr	r1, [r3, #12]
 800bc80:	f000 f872 	bl	800bd68 <_free_r>
 800bc84:	69e3      	ldr	r3, [r4, #28]
 800bc86:	6819      	ldr	r1, [r3, #0]
 800bc88:	b111      	cbz	r1, 800bc90 <_reclaim_reent+0x3c>
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f86c 	bl	800bd68 <_free_r>
 800bc90:	6961      	ldr	r1, [r4, #20]
 800bc92:	b111      	cbz	r1, 800bc9a <_reclaim_reent+0x46>
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 f867 	bl	800bd68 <_free_r>
 800bc9a:	69e1      	ldr	r1, [r4, #28]
 800bc9c:	b111      	cbz	r1, 800bca4 <_reclaim_reent+0x50>
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 f862 	bl	800bd68 <_free_r>
 800bca4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bca6:	b111      	cbz	r1, 800bcae <_reclaim_reent+0x5a>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f000 f85d 	bl	800bd68 <_free_r>
 800bcae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcb0:	b111      	cbz	r1, 800bcb8 <_reclaim_reent+0x64>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 f858 	bl	800bd68 <_free_r>
 800bcb8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bcba:	b111      	cbz	r1, 800bcc2 <_reclaim_reent+0x6e>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f000 f853 	bl	800bd68 <_free_r>
 800bcc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bcc4:	b111      	cbz	r1, 800bccc <_reclaim_reent+0x78>
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 f84e 	bl	800bd68 <_free_r>
 800bccc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bcce:	b111      	cbz	r1, 800bcd6 <_reclaim_reent+0x82>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 f849 	bl	800bd68 <_free_r>
 800bcd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bcd8:	b111      	cbz	r1, 800bce0 <_reclaim_reent+0x8c>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 f844 	bl	800bd68 <_free_r>
 800bce0:	6a23      	ldr	r3, [r4, #32]
 800bce2:	b14b      	cbz	r3, 800bcf8 <_reclaim_reent+0xa4>
 800bce4:	4620      	mov	r0, r4
 800bce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bcea:	4718      	bx	r3
 800bcec:	680e      	ldr	r6, [r1, #0]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 f83a 	bl	800bd68 <_free_r>
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	e7bb      	b.n	800bc70 <_reclaim_reent+0x1c>
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000138 	.word	0x20000138

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	2600      	movs	r6, #0
 800bd04:	4d0c      	ldr	r5, [pc, #48]	@ (800bd38 <__libc_init_array+0x38>)
 800bd06:	4c0d      	ldr	r4, [pc, #52]	@ (800bd3c <__libc_init_array+0x3c>)
 800bd08:	1b64      	subs	r4, r4, r5
 800bd0a:	10a4      	asrs	r4, r4, #2
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	f000 f87e 	bl	800be10 <_init>
 800bd14:	2600      	movs	r6, #0
 800bd16:	4d0a      	ldr	r5, [pc, #40]	@ (800bd40 <__libc_init_array+0x40>)
 800bd18:	4c0a      	ldr	r4, [pc, #40]	@ (800bd44 <__libc_init_array+0x44>)
 800bd1a:	1b64      	subs	r4, r4, r5
 800bd1c:	10a4      	asrs	r4, r4, #2
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd28:	4798      	blx	r3
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd32:	4798      	blx	r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	0800bf1c 	.word	0x0800bf1c
 800bd3c:	0800bf1c 	.word	0x0800bf1c
 800bd40:	0800bf1c 	.word	0x0800bf1c
 800bd44:	0800bf20 	.word	0x0800bf20

0800bd48 <__retarget_lock_acquire_recursive>:
 800bd48:	4770      	bx	lr

0800bd4a <__retarget_lock_release_recursive>:
 800bd4a:	4770      	bx	lr

0800bd4c <memcpy>:
 800bd4c:	440a      	add	r2, r1
 800bd4e:	4291      	cmp	r1, r2
 800bd50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bd54:	d100      	bne.n	800bd58 <memcpy+0xc>
 800bd56:	4770      	bx	lr
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd5e:	4291      	cmp	r1, r2
 800bd60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd64:	d1f9      	bne.n	800bd5a <memcpy+0xe>
 800bd66:	bd10      	pop	{r4, pc}

0800bd68 <_free_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	d040      	beq.n	800bdf2 <_free_r+0x8a>
 800bd70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd74:	1f0c      	subs	r4, r1, #4
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	bfb8      	it	lt
 800bd7a:	18e4      	addlt	r4, r4, r3
 800bd7c:	f000 f83c 	bl	800bdf8 <__malloc_lock>
 800bd80:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf4 <_free_r+0x8c>)
 800bd82:	6813      	ldr	r3, [r2, #0]
 800bd84:	b933      	cbnz	r3, 800bd94 <_free_r+0x2c>
 800bd86:	6063      	str	r3, [r4, #4]
 800bd88:	6014      	str	r4, [r2, #0]
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd90:	f000 b838 	b.w	800be04 <__malloc_unlock>
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	d908      	bls.n	800bdaa <_free_r+0x42>
 800bd98:	6820      	ldr	r0, [r4, #0]
 800bd9a:	1821      	adds	r1, r4, r0
 800bd9c:	428b      	cmp	r3, r1
 800bd9e:	bf01      	itttt	eq
 800bda0:	6819      	ldreq	r1, [r3, #0]
 800bda2:	685b      	ldreq	r3, [r3, #4]
 800bda4:	1809      	addeq	r1, r1, r0
 800bda6:	6021      	streq	r1, [r4, #0]
 800bda8:	e7ed      	b.n	800bd86 <_free_r+0x1e>
 800bdaa:	461a      	mov	r2, r3
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	b10b      	cbz	r3, 800bdb4 <_free_r+0x4c>
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	d9fa      	bls.n	800bdaa <_free_r+0x42>
 800bdb4:	6811      	ldr	r1, [r2, #0]
 800bdb6:	1850      	adds	r0, r2, r1
 800bdb8:	42a0      	cmp	r0, r4
 800bdba:	d10b      	bne.n	800bdd4 <_free_r+0x6c>
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	4401      	add	r1, r0
 800bdc0:	1850      	adds	r0, r2, r1
 800bdc2:	4283      	cmp	r3, r0
 800bdc4:	6011      	str	r1, [r2, #0]
 800bdc6:	d1e0      	bne.n	800bd8a <_free_r+0x22>
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	4408      	add	r0, r1
 800bdce:	6010      	str	r0, [r2, #0]
 800bdd0:	6053      	str	r3, [r2, #4]
 800bdd2:	e7da      	b.n	800bd8a <_free_r+0x22>
 800bdd4:	d902      	bls.n	800bddc <_free_r+0x74>
 800bdd6:	230c      	movs	r3, #12
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	e7d6      	b.n	800bd8a <_free_r+0x22>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	1821      	adds	r1, r4, r0
 800bde0:	428b      	cmp	r3, r1
 800bde2:	bf01      	itttt	eq
 800bde4:	6819      	ldreq	r1, [r3, #0]
 800bde6:	685b      	ldreq	r3, [r3, #4]
 800bde8:	1809      	addeq	r1, r1, r0
 800bdea:	6021      	streq	r1, [r4, #0]
 800bdec:	6063      	str	r3, [r4, #4]
 800bdee:	6054      	str	r4, [r2, #4]
 800bdf0:	e7cb      	b.n	800bd8a <_free_r+0x22>
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	2000283c 	.word	0x2000283c

0800bdf8 <__malloc_lock>:
 800bdf8:	4801      	ldr	r0, [pc, #4]	@ (800be00 <__malloc_lock+0x8>)
 800bdfa:	f7ff bfa5 	b.w	800bd48 <__retarget_lock_acquire_recursive>
 800bdfe:	bf00      	nop
 800be00:	20002838 	.word	0x20002838

0800be04 <__malloc_unlock>:
 800be04:	4801      	ldr	r0, [pc, #4]	@ (800be0c <__malloc_unlock+0x8>)
 800be06:	f7ff bfa0 	b.w	800bd4a <__retarget_lock_release_recursive>
 800be0a:	bf00      	nop
 800be0c:	20002838 	.word	0x20002838

0800be10 <_init>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr

0800be1c <_fini>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr
