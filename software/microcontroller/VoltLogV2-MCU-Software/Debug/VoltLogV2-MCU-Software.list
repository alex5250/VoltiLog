
VoltLogV2-MCU-Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d878  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000179c  0800d988  0800d988  0000e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f124  0800f124  0001118c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f124  0800f124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f12c  0800f12c  0001118c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f12c  0800f12c  0001012c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f130  0800f130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800f134  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002118  2000018c  0800f2c0  0001118c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022a4  0800f2c0  000112a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001118c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023020  00000000  00000000  000111b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d4f  00000000  00000000  000341d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167b  00000000  00000000  0003bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f703  00000000  00000000  0003d32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b97  00000000  00000000  0005ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d20b  00000000  00000000  000835c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001207d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e4c  00000000  00000000  00120814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00128660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000018c 	.word	0x2000018c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d970 	.word	0x0800d970

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000190 	.word	0x20000190
 800014c:	0800d970 	.word	0x0800d970

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <buttonStateDebounced>:
static const uint32_t DOUBLE_GAP_MILLIS_MAX = 250;
static const uint32_t LONG_MILLIS_MIN = 800;

// Function to handle debouncing for a given button pin
static bool buttonStateDebounced(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
    static uint32_t last_debounce_ts = 0;
    bool stable_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET;
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	4619      	mov	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f001 fcfd 	bl	800234c <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	bf0c      	ite	eq
 8000958:	2301      	moveq	r3, #1
 800095a:	2300      	movne	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
    uint32_t now = HAL_GetTick();
 800095e:	f001 fa63 	bl	8001e28 <HAL_GetTick>
 8000962:	60b8      	str	r0, [r7, #8]

    // Debounce handling
    if (now - last_debounce_ts > DEBOUNCE_MILLIS) {
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <buttonStateDebounced+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2214      	movs	r2, #20
 800096e:	4293      	cmp	r3, r2
 8000970:	d90d      	bls.n	800098e <buttonStateDebounced+0x52>
        stable_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET;
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f001 fce8 	bl	800234c <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]
        last_debounce_ts = now;
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <buttonStateDebounced+0x5c>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	6013      	str	r3, [r2, #0]
    }
    return stable_state;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001a8 	.word	0x200001a8

0800099c <getButtonEvent>:

// Generalized function to detect button press events for any button
static eButtonEvent getButtonEvent(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
    static uint32_t button_up_ts = 0;
    static bool double_pending = false;
    static bool long_press_pending = false;
    static bool button_down = false;

    eButtonEvent button_event = NO_PRESS;
 80009a8:	2300      	movs	r3, #0
 80009aa:	75fb      	strb	r3, [r7, #23]
    uint32_t now = HAL_GetTick();
 80009ac:	f001 fa3c 	bl	8001e28 <HAL_GetTick>
 80009b0:	6138      	str	r0, [r7, #16]

    // Check for state change (debounced)
    bool current_state = buttonStateDebounced(GPIOx, GPIO_Pin);
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	4619      	mov	r1, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffc0 	bl	800093c <buttonStateDebounced>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]
    if (button_down != current_state) {
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <getButtonEvent+0xa4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	7bfa      	ldrb	r2, [r7, #15]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d01d      	beq.n	8000a06 <getButtonEvent+0x6a>
        button_down = current_state;
 80009ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000a40 <getButtonEvent+0xa4>)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	7013      	strb	r3, [r2, #0]
        if (button_down) {
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <getButtonEvent+0xa4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <getButtonEvent+0x44>
            // Button pressed down
            button_down_ts = now;
 80009d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a44 <getButtonEvent+0xa8>)
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e012      	b.n	8000a06 <getButtonEvent+0x6a>
        } else {
            // Button released
            button_up_ts = now;
 80009e0:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <getButtonEvent+0xac>)
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	6013      	str	r3, [r2, #0]

            // Handle double press
            if (double_pending) {
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <getButtonEvent+0xb0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <getButtonEvent+0x5e>
                button_event = DOUBLE_PRESS;
 80009ee:	2303      	movs	r3, #3
 80009f0:	75fb      	strb	r3, [r7, #23]
                double_pending = false;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <getButtonEvent+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e002      	b.n	8000a00 <getButtonEvent+0x64>
            } else {
                double_pending = true;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <getButtonEvent+0xb0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
            }

            // Cancel any long press pending
            long_press_pending = false;
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <getButtonEvent+0xb4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
        }
    }

    // Handle single press if double press gap time expired
    if (!button_down && double_pending && (now - button_up_ts > DOUBLE_GAP_MILLIS_MAX)) {
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <getButtonEvent+0xa4>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f083 0301 	eor.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00f      	beq.n	8000a34 <getButtonEvent+0x98>
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <getButtonEvent+0xb0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00b      	beq.n	8000a34 <getButtonEvent+0x98>
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <getButtonEvent+0xac>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	22fa      	movs	r2, #250	@ 0xfa
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d904      	bls.n	8000a34 <getButtonEvent+0x98>
        double_pending = false;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <getButtonEvent+0xb0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
        button_event = SINGLE_PRESS;
 8000a30:	2301      	movs	r3, #1
 8000a32:	75fb      	strb	r3, [r7, #23]
    }
    // Handle long press detection


    return button_event;
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001ac 	.word	0x200001ac
 8000a44:	200001b0 	.word	0x200001b0
 8000a48:	200001b4 	.word	0x200001b4
 8000a4c:	200001b8 	.word	0x200001b8
 8000a50:	200001b9 	.word	0x200001b9

08000a54 <getLeftButtonEvent>:

// Wrapper function for detecting left button events
eButtonEvent getLeftButtonEvent()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    return getButtonEvent(GPIOA, GPIO_PIN_6); // Assuming GPIOB and pin 7 for the left button
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <getLeftButtonEvent+0x14>)
 8000a5c:	f7ff ff9e 	bl	800099c <getButtonEvent>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010800 	.word	0x40010800

08000a6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t** ppxIdleTaskTCBBuffer, StackType_t** ppxIdleTaskStackBuffer, uint32_t* pulIdleTaskStackSize)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <vApplicationGetIdleTaskMemory+0x28>)
 8000a7c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a82:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2280      	movs	r2, #128	@ 0x80
 8000a88:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	200001bc 	.word	0x200001bc
 8000a98:	2000025c 	.word	0x2000025c

08000a9c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa2:	f001 f999 	bl	8001dd8 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aa6:	f000 f877 	bl	8000b98 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aaa:	f000 f957 	bl	8000d5c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000aae:	f000 f8cf 	bl	8000c50 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000ab2:	f000 f8fb 	bl	8000cac <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000ab6:	f000 f927 	bl	8000d08 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000aba:	f008 f883 	bl	8008bc4 <MX_FATFS_Init>
	/* USER CODE END 2 */
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	scan_I2C_bus();
 8000abe:	f000 fdeb 	bl	8001698 <scan_I2C_bus>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	INA219_Init(&ina219);
 8000ac2:	482c      	ldr	r0, [pc, #176]	@ (8000b74 <main+0xd8>)
 8000ac4:	f000 fd58 	bl	8001578 <INA219_Init>
	INA219_setCalibration_32V_2A(&ina219);
 8000ac8:	482a      	ldr	r0, [pc, #168]	@ (8000b74 <main+0xd8>)
 8000aca:	f000 fd2f 	bl	800152c <INA219_setCalibration_32V_2A>
	ssd1306_Init();
 8000ace:	f000 fe59 	bl	8001784 <ssd1306_Init>
	/* USER CODE BEGIN RTOS_QUEUES */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <main+0xdc>)
 8000ad4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000ad8:	461d      	mov	r5, r3
 8000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ae6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a fbe6 	bl	800b2be <osThreadCreate>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <main+0xe0>)
 8000af6:	6013      	str	r3, [r2, #0]

	/* definition and creation of ui_button */
	osThreadDef(ui_button, ui_button_handle, osPriorityNormal, 0, 128);
 8000af8:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <main+0xe4>)
 8000afa:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000afe:	461d      	mov	r5, r3
 8000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ui_buttonHandle = osThreadCreate(osThread(ui_button), NULL);
 8000b0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00a fbd3 	bl	800b2be <osThreadCreate>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <main+0xe8>)
 8000b1c:	6013      	str	r3, [r2, #0]

	/* definition and creation of ui_screen_handl */
	osThreadDef(ui_screen_handl, StartTask03, osPriorityNormal, 0, 128);
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <main+0xec>)
 8000b20:	f107 041c 	add.w	r4, r7, #28
 8000b24:	461d      	mov	r5, r3
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ui_screen_handlHandle = osThreadCreate(osThread(ui_screen_handl), NULL);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00a fbc0 	bl	800b2be <osThreadCreate>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <main+0xf0>)
 8000b42:	6013      	str	r3, [r2, #0]

	/* definition and creation of eeprom_task */
	osThreadDef(eeprom_task, eeprom_task_func, osPriorityNormal, 0, 128);
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <main+0xf4>)
 8000b46:	463c      	mov	r4, r7
 8000b48:	461d      	mov	r5, r3
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	eeprom_taskHandle = osThreadCreate(osThread(eeprom_task), NULL);
 8000b56:	463b      	mov	r3, r7
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00a fbaf 	bl	800b2be <osThreadCreate>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <main+0xf8>)
 8000b64:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000b66:	f00a fba3 	bl	800b2b0 <osKernelStart>
 8000b6a:	2300      	movs	r3, #0

}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3770      	adds	r7, #112	@ 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bdb0      	pop	{r4, r5, r7, pc}
 8000b74:	20000504 	.word	0x20000504
 8000b78:	0800d994 	.word	0x0800d994
 8000b7c:	2000055c 	.word	0x2000055c
 8000b80:	0800d9bc 	.word	0x0800d9bc
 8000b84:	20000560 	.word	0x20000560
 8000b88:	0800d9e8 	.word	0x0800d9e8
 8000b8c:	20000564 	.word	0x20000564
 8000b90:	0800da10 	.word	0x0800da10
 8000b94:	20000568 	.word	0x20000568

08000b98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	@ 0x50
 8000b9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba2:	2228      	movs	r2, #40	@ 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f00c fa16 	bl	800cfd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000be4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fafe 	bl	80051f0 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x66>
		Error_Handler();
 8000bfa:	f000 f9eb 	bl	8000fd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fd6b 	bl	80056f4 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x90>
		Error_Handler();
 8000c24:	f000 f9d6 	bl	8000fd4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c30:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 ff43 	bl	8005ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xac>
		Error_Handler();
 8000c40:	f000 f9c8 	bl	8000fd4 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000c44:	f004 fe40 	bl	80058c8 <HAL_RCC_EnableCSS>
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	@ 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <MX_I2C1_Init+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <MX_I2C1_Init+0x58>)
 8000c5e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c72:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_I2C1_Init+0x50>)
 8000c8e:	f001 fb8d 	bl	80023ac <HAL_I2C_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000c98:	f000 f99c 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000045c 	.word	0x2000045c
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	00061a80 	.word	0x00061a80

08000cac <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C2_Init 0 */
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */
	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb2:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <MX_I2C2_Init+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_I2C2_Init+0x58>)
 8000cba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cea:	f001 fb5f 	bl	80023ac <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000cf4:	f000 f96e 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */
	/* USER CODE END I2C2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200004b0 	.word	0x200004b0
 8000d00:	40005800 	.word	0x40005800
 8000d04:	00061a80 	.word	0x00061a80

08000d08 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_Init 0 */
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */
	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_USART1_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f005 f9be 	bl	80060c0 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000d4a:	f000 f943 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* USER CODE END USART1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000514 	.word	0x20000514
 8000d58:	40013800 	.word	0x40013800

08000d5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a16      	ldr	r2, [pc, #88]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_GPIO_Init+0xa4>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2110      	movs	r1, #16
 8000dbc:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <MX_GPIO_Init+0xa8>)
 8000dbe:	f001 fadc 	bl	800237a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000dc2:	23c0      	movs	r3, #192	@ 0xc0
 8000dc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <MX_GPIO_Init+0xac>)
 8000dd6:	f001 f935 	bl	8002044 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_GPIO_Init+0xa8>)
 8000df2:	f001 f927 	bl	8002044 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40010800 	.word	0x40010800

08000e0c <StartDefaultTask>:
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000e14:	f00b fc4a 	bl	800c6ac <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */

	for (;;) {
		osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f00a fa9c 	bl	800b356 <osDelay>
 8000e1e:	e7fb      	b.n	8000e18 <StartDefaultTask+0xc>

08000e20 <ui_button_handle>:
 * @brief Function implementing the ui_button thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ui_button_handle */
void ui_button_handle(void const *argument) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ui_button_handle */
	/* Infinite loop */
	for (;;) {

		eButtonEvent event_left = getLeftButtonEvent(); // Get the button event
 8000e28:	f7ff fe14 	bl	8000a54 <getLeftButtonEvent>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
		eButtonEvent event_right = getLeftButtonEvent(); // Get the button event
 8000e30:	f7ff fe10 	bl	8000a54 <getLeftButtonEvent>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73bb      	strb	r3, [r7, #14]
		// is_menu_is_activated
		switch (event_left) {
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d82b      	bhi.n	8000e96 <ui_button_handle+0x76>
 8000e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <ui_button_handle+0x24>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e97 	.word	0x08000e97
 8000e48:	08000e55 	.word	0x08000e55
 8000e4c:	08000e97 	.word	0x08000e97
 8000e50:	08000e77 	.word	0x08000e77

		case SINGLE_PRESS:
			// Handle single press event
			// uart_send_message("Single Press Detected\r\n");
			// Add your logic here, e.g., toggle an LED or send a message
			is_menu_is_activated = true;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <ui_button_handle+0xb0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
			// Clear screen
			ssd1306_Fill(Black);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 fcfc 	bl	8001858 <ssd1306_Fill>

			// Flush buffer to screen
			ssd1306_UpdateScreen();
 8000e60:	f000 fd12 	bl	8001888 <ssd1306_UpdateScreen>
			draw_settings_screen(100, 100, 100);
 8000e64:	2264      	movs	r2, #100	@ 0x64
 8000e66:	2164      	movs	r1, #100	@ 0x64
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f000 fefd 	bl	8001c68 <draw_settings_screen>

			uart_send_message("switch to menu by button click ");
 8000e6e:	4819      	ldr	r0, [pc, #100]	@ (8000ed4 <ui_button_handle+0xb4>)
 8000e70:	f000 fbfc 	bl	800166c <uart_send_message>

			break;
 8000e74:	e012      	b.n	8000e9c <ui_button_handle+0x7c>
		case DOUBLE_PRESS:
			// Handle double press event
			// uart_send_message("Double Press Detected\r\n");
			// Add your logic here, e.g., toggle a different LED or send another message

			if (is_menu_is_activated) {
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <ui_button_handle+0xb0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00d      	beq.n	8000e9a <ui_button_handle+0x7a>
				ssd1306_Fill(Black);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fcea 	bl	8001858 <ssd1306_Fill>

				// Flush buffer to screen
				ssd1306_UpdateScreen();
 8000e84:	f000 fd00 	bl	8001888 <ssd1306_UpdateScreen>
				is_menu_is_activated = false;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <ui_button_handle+0xb0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
				uart_send_message("switch to main by button click ");
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <ui_button_handle+0xb8>)
 8000e90:	f000 fbec 	bl	800166c <uart_send_message>

			}
			break;
 8000e94:	e001      	b.n	8000e9a <ui_button_handle+0x7a>
			break;

		default:
			// Optionally handle unexpected events
			// uart_send_message("Unknown Button Event\r\n");
			break;
 8000e96:	bf00      	nop
 8000e98:	e000      	b.n	8000e9c <ui_button_handle+0x7c>
			break;
 8000e9a:	bf00      	nop
		}

		switch (event_right) {
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d811      	bhi.n	8000ec6 <ui_button_handle+0xa6>
 8000ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea8 <ui_button_handle+0x88>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ec7 	.word	0x08000ec7
 8000eac:	08000eb9 	.word	0x08000eb9
 8000eb0:	08000ec7 	.word	0x08000ec7
 8000eb4:	08000ec7 	.word	0x08000ec7

		case SINGLE_PRESS:
			// Handle single press event
			// uart_send_message("Single Press Detected\r\n");
			// Add your logic here, e.g., toggle an LED or send a message
			uart_send_message("long press starting recording");
 8000eb8:	4808      	ldr	r0, [pc, #32]	@ (8000edc <ui_button_handle+0xbc>)
 8000eba:	f000 fbd7 	bl	800166c <uart_send_message>
			allowed_record_to_memory = true;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <ui_button_handle+0xc0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
			break;
 8000ec4:	e000      	b.n	8000ec8 <ui_button_handle+0xa8>
			break;

		default:
			// Optionally handle unexpected events
			// uart_send_message("Unknown Button Event\r\n");
			break;
 8000ec6:	bf00      	nop
		}

		osDelay(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f00a fa44 	bl	800b356 <osDelay>
	for (;;) {
 8000ece:	e7ab      	b.n	8000e28 <ui_button_handle+0x8>
 8000ed0:	20000512 	.word	0x20000512
 8000ed4:	0800da2c 	.word	0x0800da2c
 8000ed8:	0800da4c 	.word	0x0800da4c
 8000edc:	0800da6c 	.word	0x0800da6c
 8000ee0:	20000513 	.word	0x20000513

08000ee4 <StartTask03>:
	/* USER CODE END ui_button_handle */
}

/* USER CODE BEGIN Header_StartTask03 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		if (!is_menu_is_activated) {
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <StartTask03+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f8      	beq.n	8000eec <StartTask03+0x8>
			char buf[40];
			vbus = INA219_ReadBusVoltage(&ina219);
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <StartTask03+0x5c>)
 8000efc:	f000 fa84 	bl	8001408 <INA219_ReadBusVoltage>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <StartTask03+0x60>)
 8000f06:	801a      	strh	r2, [r3, #0]
			vshunt = INA219_ReadShuntVolage(&ina219);
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <StartTask03+0x5c>)
 8000f0a:	f000 fab9 	bl	8001480 <INA219_ReadShuntVolage>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <StartTask03+0x64>)
 8000f14:	801a      	strh	r2, [r3, #0]
			current = INA219_ReadCurrent(&ina219);
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <StartTask03+0x5c>)
 8000f18:	f000 fa9a 	bl	8001450 <INA219_ReadCurrent>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <StartTask03+0x68>)
 8000f22:	801a      	strh	r2, [r3, #0]
			// sprintf(buf,"%d\n",vbus);
			// uart_send_message(buf);
			draw_main_screen(vbus, current, 12, true);
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <StartTask03+0x60>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <StartTask03+0x68>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2301      	movs	r3, #1
 8000f32:	220c      	movs	r2, #12
 8000f34:	f000 fe22 	bl	8001b7c <draw_main_screen>
		if (!is_menu_is_activated) {
 8000f38:	e7d8      	b.n	8000eec <StartTask03+0x8>
 8000f3a:	bf00      	nop
 8000f3c:	20000512 	.word	0x20000512
 8000f40:	20000504 	.word	0x20000504
 8000f44:	2000050c 	.word	0x2000050c
 8000f48:	2000050e 	.word	0x2000050e
 8000f4c:	20000510 	.word	0x20000510

08000f50 <eeprom_task_func>:
 * @brief Function implementing the eeprom_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_eeprom_task_func */
void eeprom_task_func(void const *argument) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]

	for (;;) {

		if (allowed_record_to_memory) {
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <eeprom_task_func+0x54>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01d      	beq.n	8000f9c <eeprom_task_func+0x4c>
			Write_EEPROM();
 8000f60:	f000 fb3a 	bl	80015d8 <Write_EEPROM>
			osDelay(5);
 8000f64:	2005      	movs	r0, #5
 8000f66:	f00a f9f6 	bl	800b356 <osDelay>
			Read_EEPROM();
 8000f6a:	f000 fb5f 	bl	800162c <Read_EEPROM>
			char buf[40];
			sprintf(buf, "a:%d b:%d c:%d", (int) RdBuffer[0], (int) RdBuffer[1],
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <eeprom_task_func+0x58>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <eeprom_task_func+0x58>)
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	4619      	mov	r1, r3
					(int) RdBuffer[2]);
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <eeprom_task_func+0x58>)
 8000f7c:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "a:%d b:%d c:%d", (int) RdBuffer[0], (int) RdBuffer[1],
 8000f7e:	f107 0008 	add.w	r0, r7, #8
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	4909      	ldr	r1, [pc, #36]	@ (8000fac <eeprom_task_func+0x5c>)
 8000f88:	f00b ffec 	bl	800cf64 <siprintf>
			uart_send_message(buf);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb6b 	bl	800166c <uart_send_message>
			allowed_record_to_memory = false;
 8000f96:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <eeprom_task_func+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f00a f9da 	bl	800b356 <osDelay>
		if (allowed_record_to_memory) {
 8000fa2:	e7d9      	b.n	8000f58 <eeprom_task_func+0x8>
 8000fa4:	20000513 	.word	0x20000513
 8000fa8:	200005c0 	.word	0x200005c0
 8000fac:	0800da8c 	.word	0x0800da8c

08000fb0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fc2:	f000 ff1f 	bl	8001e04 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	/* USER CODE END Callback 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00

08000fd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_MspInit+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <HAL_MspInit+0x68>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_MspInit+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_MspInit+0x68>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <HAL_MspInit+0x68>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_MspInit+0x68>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	210f      	movs	r1, #15
 800101a:	f06f 0001 	mvn.w	r0, #1
 800101e:	f000 ffe6 	bl	8001fee <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_MspInit+0x6c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_MspInit+0x6c>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <HAL_I2C_MspInit+0xc8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d124      	bne.n	80010ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a29      	ldr	r2, [pc, #164]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001088:	23c0      	movs	r3, #192	@ 0xc0
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4619      	mov	r1, r3
 800109a:	4821      	ldr	r0, [pc, #132]	@ (8001120 <HAL_I2C_MspInit+0xd0>)
 800109c:	f000 ffd2 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010aa:	61d3      	str	r3, [r2, #28]
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010b8:	e029      	b.n	800110e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a19      	ldr	r2, [pc, #100]	@ (8001124 <HAL_I2C_MspInit+0xd4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d124      	bne.n	800110e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <HAL_I2C_MspInit+0xd0>)
 80010f2:	f000 ffa7 	bl	8002044 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_I2C_MspInit+0xcc>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005400 	.word	0x40005400
 800111c:	40021000 	.word	0x40021000
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40005800 	.word	0x40005800

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <HAL_UART_MspInit+0x8c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d131      	bne.n	80011ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_UART_MspInit+0x90>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001178:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	@ (80011bc <HAL_UART_MspInit+0x94>)
 800118e:	f000 ff59 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_UART_MspInit+0x94>)
 80011a8:	f000 ff4c 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800

080011c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <HAL_InitTick+0xd0>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <HAL_InitTick+0xd0>)
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001290 <HAL_InitTick+0xd0>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fbf9 	bl	80059f0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011fe:	f004 fbe3 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8001202:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_InitTick+0xd4>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0c9b      	lsrs	r3, r3, #18
 800120e:	3b01      	subs	r3, #1
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <HAL_InitTick+0xd8>)
 8001214:	4a21      	ldr	r2, [pc, #132]	@ (800129c <HAL_InitTick+0xdc>)
 8001216:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <HAL_InitTick+0xd8>)
 800121a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001220:	4a1d      	ldr	r2, [pc, #116]	@ (8001298 <HAL_InitTick+0xd8>)
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_InitTick+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_InitTick+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_InitTick+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001238:	4817      	ldr	r0, [pc, #92]	@ (8001298 <HAL_InitTick+0xd8>)
 800123a:	f004 fcf7 	bl	8005c2c <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11b      	bne.n	8001284 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800124c:	4812      	ldr	r0, [pc, #72]	@ (8001298 <HAL_InitTick+0xd8>)
 800124e:	f004 fd45 	bl	8005cdc <HAL_TIM_Base_Start_IT>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800125c:	2b00      	cmp	r3, #0
 800125e:	d111      	bne.n	8001284 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001260:	2019      	movs	r0, #25
 8001262:	f000 fee0 	bl	8002026 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d808      	bhi.n	800127e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2019      	movs	r0, #25
 8001272:	f000 febc 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_InitTick+0xe0>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e002      	b.n	8001284 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001284:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001288:	4618      	mov	r0, r3
 800128a:	3730      	adds	r7, #48	@ 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	431bde83 	.word	0x431bde83
 8001298:	2000056c 	.word	0x2000056c
 800129c:	40012c00 	.word	0x40012c00
 80012a0:	20000008 	.word	0x20000008

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80012a8:	f004 fbd2 	bl	8005a50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x8>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012e2:	f002 fb0f 	bl	8003904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20001bfc 	.word	0x20001bfc

080012f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM1_UP_IRQHandler+0x10>)
 80012f6:	f004 fd43 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000056c 	.word	0x2000056c

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
    const uint8_t* max_heap = (uint8_t*)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
    uint8_t* prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
        errno = ENOMEM;
 8001334:	f00b feae 	bl	800d094 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20005000 	.word	0x20005000
 8001364:	00000400 	.word	0x00000400
 8001368:	200005b4 	.word	0x200005b4
 800136c:	200022a8 	.word	0x200022a8

08001370 <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <Read16>:

uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;
uint16_t Read16(INA219_t* ina219, uint8_t Register)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af04      	add	r7, sp, #16
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
    uint8_t Value[2];

    HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS << 1), Register, 1, Value, 2, 1000);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	b29a      	uxth	r2, r3
 8001390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2302      	movs	r3, #2
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	f001 fa40 	bl	8002828 <HAL_I2C_Mem_Read>

    return ((Value[0] << 8) | Value[1]);
 80013a8:	7b3b      	ldrb	r3, [r7, #12]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29b      	uxth	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <Write16>:

void Write16(INA219_t* ina219, uint8_t Register, uint16_t Value)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
 80013cc:	4613      	mov	r3, r2
 80013ce:	803b      	strh	r3, [r7, #0]
    uint8_t addr[2];
    addr[0] = (Value >> 8) & 0xff; // upper byte
 80013d0:	883b      	ldrh	r3, [r7, #0]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	733b      	strb	r3, [r7, #12]
    addr[1] = (Value >> 0) & 0xff; // lower byte
 80013da:	883b      	ldrh	r3, [r7, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS << 1), Register, 1, (uint8_t*)addr, 2, 1000);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2302      	movs	r3, #2
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	2180      	movs	r1, #128	@ 0x80
 80013fc:	f001 f91a 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t* ina219)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001410:	2102      	movs	r1, #2
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffb2 	bl	800137c <Read16>
 8001418:	4603      	mov	r3, r0
 800141a:	81fb      	strh	r3, [r7, #14]

    return ((result >> 3) * 4);
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	b29b      	uxth	r3, r3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	b29b      	uxth	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t* ina219)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
    int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001436:	2104      	movs	r1, #4
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff9f 	bl	800137c <Read16>
 800143e:	4603      	mov	r3, r0
 8001440:	81fb      	strh	r3, [r7, #14]

    return (result);
 8001442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t* ina219)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    int16_t result = INA219_ReadCurrent_raw(ina219);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffe8 	bl	800142e <INA219_ReadCurrent_raw>
 800145e:	4603      	mov	r3, r0
 8001460:	81fb      	strh	r3, [r7, #14]

    return (result / ina219_currentDivider_mA);
 8001462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <INA219_ReadCurrent+0x2c>)
 8001468:	f9b2 2000 	ldrsh.w	r2, [r2]
 800146c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001470:	b21b      	sxth	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200005ba 	.word	0x200005ba

08001480 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t* ina219)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001488:	2101      	movs	r1, #1
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff76 	bl	800137c <Read16>
 8001490:	4603      	mov	r3, r0
 8001492:	81fb      	strh	r3, [r7, #14]

    return (result * 0.01);
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffb4 	bl	8000404 <__aeabi_i2d>
 800149c:	a308      	add	r3, pc, #32	@ (adr r3, 80014c0 <INA219_ReadShuntVolage+0x40>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f819 	bl	80004d8 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fa25 	bl	80008fc <__aeabi_d2uiz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29b      	uxth	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	47ae147b 	.word	0x47ae147b
 80014c4:	3f847ae1 	.word	0x3f847ae1

080014c8 <INA219_Reset>:

void INA219_Reset(INA219_t* ina219)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80014d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d4:	2100      	movs	r1, #0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff72 	bl	80013c0 <Write16>
    HAL_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fcad 	bl	8001e3c <HAL_Delay>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <INA219_setCalibration>:

void INA219_setCalibration(INA219_t* ina219, uint16_t CalibrationData)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
    Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	461a      	mov	r2, r3
 80014fa:	2105      	movs	r1, #5
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff5f 	bl	80013c0 <Write16>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <INA219_setConfig>:
    uint16_t result = Read16(ina219, INA219_REG_CONFIG);
    return result;
}

void INA219_setConfig(INA219_t* ina219, uint16_t Config)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
    Write16(ina219, INA219_REG_CONFIG, Config);
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	461a      	mov	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff4f 	bl	80013c0 <Write16>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t* ina219)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V | INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT | INA219_CONFIG_SADCRES_12BIT_1S_532US | INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
 8001534:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001538:	81fb      	strh	r3, [r7, #14]

    ina219_calibrationValue = 4096;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <INA219_setCalibration_32V_2A+0x40>)
 800153c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001540:	801a      	strh	r2, [r3, #0]
    ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <INA219_setCalibration_32V_2A+0x44>)
 8001544:	220a      	movs	r2, #10
 8001546:	801a      	strh	r2, [r3, #0]
    ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <INA219_setCalibration_32V_2A+0x48>)
 800154a:	2202      	movs	r2, #2
 800154c:	801a      	strh	r2, [r3, #0]

    INA219_setCalibration(ina219, ina219_calibrationValue);
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <INA219_setCalibration_32V_2A+0x40>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffc8 	bl	80014ea <INA219_setCalibration>
    INA219_setConfig(ina219, config);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffd3 	bl	800150a <INA219_setConfig>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200005b8 	.word	0x200005b8
 8001570:	200005ba 	.word	0x200005ba
 8001574:	200005bc 	.word	0x200005bc

08001578 <INA219_Init>:
        break;
    }
}

uint8_t INA219_Init(INA219_t* ina219)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    ina219->ina219_i2c = &INA219_I2C_PORT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <INA219_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
    ina219->Address = INA219_ADDRESS;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	711a      	strb	r2, [r3, #4]

    ina219_currentDivider_mA = 0;
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <INA219_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
    ina219_powerMultiplier_mW = 0;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <INA219_Init+0x5c>)
 8001594:	2200      	movs	r2, #0
 8001596:	801a      	strh	r2, [r3, #0]

    uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(ina219->ina219_i2c, (INA219_ADDRESS << 1), 3, 2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	2302      	movs	r3, #2
 800159e:	2203      	movs	r2, #3
 80015a0:	2180      	movs	r1, #128	@ 0x80
 80015a2:	f001 fba9 	bl	8002cf8 <HAL_I2C_IsDeviceReady>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]

    if (ina219_isReady == HAL_OK) {
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <INA219_Init+0x48>
        INA219_Reset(ina219);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff89 	bl	80014c8 <INA219_Reset>
        INA219_setCalibration_32V_2A(ina219);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffb8 	bl	800152c <INA219_setCalibration_32V_2A>

        return 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <INA219_Init+0x4a>
    } else {
        return 0;
 80015c0:	2300      	movs	r3, #0
    }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004b0 	.word	0x200004b0
 80015d0:	200005ba 	.word	0x200005ba
 80015d4:	200005bc 	.word	0x200005bc

080015d8 <Write_EEPROM>:
 * @brief Write data to the EEPROM
 *
 * This function writes data from the WrBuffer to the EEPROM at the specified I2C address.
 */
void Write_EEPROM(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af04      	add	r7, sp, #16
    I2CMemAddress = 0;  // Set memory address to start at 0
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <Write_EEPROM+0x44>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]

    // Enable write to EEPROM by pulling write enable pin low
    HAL_GPIO_WritePin(EEPROM_WR_EN_PORT, EEPROM_WR_EN, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2104      	movs	r1, #4
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <Write_EEPROM+0x48>)
 80015ea:	f000 fec6 	bl	800237a <HAL_GPIO_WritePin>

    // Write data to EEPROM
    // Parameters: I2C handle, DevAddress, MemAddress, MemAddSize, data buffer pointer, Size, Timeout
    HAL_I2C_Mem_Write(&M24M02_I2C_PORT, I2C_DEV_SELECT_ADDR_WR, I2CMemAddress, EEPROM_MEM_ADDRESS_SIZE, WrBuffer, sizeof(WrBuffer), EEPROM_I2C_TIMEOUT);
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <Write_EEPROM+0x44>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	2364      	movs	r3, #100	@ 0x64
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2303      	movs	r3, #3
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <Write_EEPROM+0x4c>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	21a0      	movs	r1, #160	@ 0xa0
 8001604:	4808      	ldr	r0, [pc, #32]	@ (8001628 <Write_EEPROM+0x50>)
 8001606:	f001 f815 	bl	8002634 <HAL_I2C_Mem_Write>

    // Disable writing to EEPROM by setting the write enable pin high
    HAL_GPIO_WritePin(EEPROM_WR_EN_PORT, EEPROM_WR_EN, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2104      	movs	r1, #4
 800160e:	4804      	ldr	r0, [pc, #16]	@ (8001620 <Write_EEPROM+0x48>)
 8001610:	f000 feb3 	bl	800237a <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200005c4 	.word	0x200005c4
 8001620:	40010800 	.word	0x40010800
 8001624:	20000004 	.word	0x20000004
 8001628:	200004b0 	.word	0x200004b0

0800162c <Read_EEPROM>:
 * @brief Read data from the EEPROM
 *
 * This function reads data from the EEPROM into the RdBuffer at the specified I2C address.
 */
void Read_EEPROM(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af04      	add	r7, sp, #16
    I2CMemAddress = 0;  // Set memory address to start at 0
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <Read_EEPROM+0x34>)
 8001634:	2200      	movs	r2, #0
 8001636:	801a      	strh	r2, [r3, #0]

    // Read data from EEPROM
    // Parameters: I2C handle, DevAddress, MemAddress, MemAddSize, data buffer pointer, Size, Timeout
    HAL_I2C_Mem_Read(&M24M02_I2C_PORT, I2C_DEV_SELECT_ADDR_RD, I2CMemAddress, EEPROM_MEM_ADDRESS_SIZE, RdBuffer, sizeof(RdBuffer), EEPROM_I2C_TIMEOUT);
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <Read_EEPROM+0x34>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29a      	uxth	r2, r3
 800163e:	2364      	movs	r3, #100	@ 0x64
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2303      	movs	r3, #3
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <Read_EEPROM+0x38>)
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	21a1      	movs	r1, #161	@ 0xa1
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <Read_EEPROM+0x3c>)
 8001650:	f001 f8ea 	bl	8002828 <HAL_I2C_Mem_Read>

    // A small delay to ensure completion (if needed)
    HAL_Delay(5);
 8001654:	2005      	movs	r0, #5
 8001656:	f000 fbf1 	bl	8001e3c <HAL_Delay>

}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200005c4 	.word	0x200005c4
 8001664:	200005c0 	.word	0x200005c0
 8001668:	200004b0 	.word	0x200004b0

0800166c <uart_send_message>:
#include "stm32f1xx_hal.h"
#include <stdbool.h>
#include <stdint.h>

void uart_send_message(char* msg)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&UART_PORT, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe fd6b 	bl	8000150 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <uart_send_message+0x28>)
 8001686:	f004 fd6b 	bl	8006160 <HAL_UART_Transmit>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000514 	.word	0x20000514

08001698 <scan_I2C_bus>:

/* Function to scan I2C bus and output results over UART */
void scan_I2C_bus(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
    uart_send_message("\r\nScanning I2C bus:\r\n");
 800169e:	4818      	ldr	r0, [pc, #96]	@ (8001700 <scan_I2C_bus+0x68>)
 80016a0:	f7ff ffe4 	bl	800166c <uart_send_message>

    HAL_StatusTypeDef result;
    uint8_t i;
    char buffer[20];

    for (i = 1; i < 128; i++) {
 80016a4:	2301      	movs	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
 80016a8:	e01e      	b.n	80016e8 <scan_I2C_bus+0x50>

        result = HAL_I2C_IsDeviceReady(&I2C_PORT, (uint16_t)(i << 1), 2, 2);
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	b299      	uxth	r1, r3
 80016b2:	2302      	movs	r3, #2
 80016b4:	2202      	movs	r2, #2
 80016b6:	4813      	ldr	r0, [pc, #76]	@ (8001704 <scan_I2C_bus+0x6c>)
 80016b8:	f001 fb1e 	bl	8002cf8 <HAL_I2C_IsDeviceReady>
 80016bc:	4603      	mov	r3, r0
 80016be:	75bb      	strb	r3, [r7, #22]

        if (result == HAL_OK) {
 80016c0:	7dbb      	ldrb	r3, [r7, #22]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <scan_I2C_bus+0x44>
            sprintf(buffer, "0x%X", i); // Format the address
 80016c6:	7dfa      	ldrb	r2, [r7, #23]
 80016c8:	463b      	mov	r3, r7
 80016ca:	490f      	ldr	r1, [pc, #60]	@ (8001708 <scan_I2C_bus+0x70>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00b fc49 	bl	800cf64 <siprintf>
            uart_send_message(buffer); // Send address over UART
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ffc9 	bl	800166c <uart_send_message>
 80016da:	e002      	b.n	80016e2 <scan_I2C_bus+0x4a>
        } else {
            uart_send_message("."); // No device found at this address
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <scan_I2C_bus+0x74>)
 80016de:	f7ff ffc5 	bl	800166c <uart_send_message>
    for (i = 1; i < 128; i++) {
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	3301      	adds	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]
 80016e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	dadc      	bge.n	80016aa <scan_I2C_bus+0x12>
        }
    }
    uart_send_message("\r\n");
 80016f0:	4807      	ldr	r0, [pc, #28]	@ (8001710 <scan_I2C_bus+0x78>)
 80016f2:	f7ff ffbb 	bl	800166c <uart_send_message>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	0800da9c 	.word	0x0800da9c
 8001704:	200004b0 	.word	0x200004b0
 8001708:	0800dab4 	.word	0x0800dab4
 800170c:	0800dabc 	.word	0x0800dabc
 8001710:	0800dac0 	.word	0x0800dac0

08001714 <ssd1306_Reset>:
#include <string.h> // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af04      	add	r7, sp, #16
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	2200      	movs	r2, #0
 800173c:	2178      	movs	r1, #120	@ 0x78
 800173e:	4803      	ldr	r0, [pc, #12]	@ (800174c <ssd1306_WriteCommand+0x2c>)
 8001740:	f000 ff78 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200004b0 	.word	0x200004b0

08001750 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af04      	add	r7, sp, #16
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	2240      	movs	r2, #64	@ 0x40
 800176e:	2178      	movs	r1, #120	@ 0x78
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <ssd1306_WriteData+0x30>)
 8001772:	f000 ff5f 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200004b0 	.word	0x200004b0

08001784 <ssd1306_Init>:
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001788:	f7ff ffc4 	bl	8001714 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800178c:	2064      	movs	r0, #100	@ 0x64
 800178e:	f000 fb55 	bl	8001e3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); // display off
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f9d4 	bl	8001b40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); // Set Memory Addressing Mode
 8001798:	2020      	movs	r0, #32
 800179a:	f7ff ffc1 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff ffbe 	bl	8001720 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); // Set Page Start Address for Page Addressing Mode,0-7
 80017a4:	20b0      	movs	r0, #176	@ 0xb0
 80017a6:	f7ff ffbb 	bl	8001720 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); // Set COM Output Scan Direction
 80017aa:	20c8      	movs	r0, #200	@ 0xc8
 80017ac:	f7ff ffb8 	bl	8001720 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ffb5 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017b6:	2010      	movs	r0, #16
 80017b8:	f7ff ffb2 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017bc:	2040      	movs	r0, #64	@ 0x40
 80017be:	f7ff ffaf 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	f000 f9a8 	bl	8001b18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017c8:	20a1      	movs	r0, #161	@ 0xa1
 80017ca:	f7ff ffa9 	bl	8001720 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017ce:	20a6      	movs	r0, #166	@ 0xa6
 80017d0:	f7ff ffa6 	bl	8001720 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017d4:	20a8      	movs	r0, #168	@ 0xa8
 80017d6:	f7ff ffa3 	bl	8001720 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017da:	203f      	movs	r0, #63	@ 0x3f
 80017dc:	f7ff ffa0 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017e0:	20a4      	movs	r0, #164	@ 0xa4
 80017e2:	f7ff ff9d 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017e6:	20d3      	movs	r0, #211	@ 0xd3
 80017e8:	f7ff ff9a 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ff97 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017f2:	20d5      	movs	r0, #213	@ 0xd5
 80017f4:	f7ff ff94 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017f8:	20f0      	movs	r0, #240	@ 0xf0
 80017fa:	f7ff ff91 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017fe:	20d9      	movs	r0, #217	@ 0xd9
 8001800:	f7ff ff8e 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001804:	2022      	movs	r0, #34	@ 0x22
 8001806:	f7ff ff8b 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800180a:	20da      	movs	r0, #218	@ 0xda
 800180c:	f7ff ff88 	bl	8001720 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001810:	2012      	movs	r0, #18
 8001812:	f7ff ff85 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001816:	20db      	movs	r0, #219	@ 0xdb
 8001818:	f7ff ff82 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); // 0x20,0.77xVcc
 800181c:	2020      	movs	r0, #32
 800181e:	f7ff ff7f 	bl	8001720 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001822:	208d      	movs	r0, #141	@ 0x8d
 8001824:	f7ff ff7c 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001828:	2014      	movs	r0, #20
 800182a:	f7ff ff79 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800182e:	2001      	movs	r0, #1
 8001830:	f000 f986 	bl	8001b40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f80f 	bl	8001858 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800183a:	f000 f825 	bl	8001888 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <ssd1306_Init+0xd0>)
 8001840:	2200      	movs	r2, #0
 8001842:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <ssd1306_Init+0xd0>)
 8001846:	2200      	movs	r2, #0
 8001848:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800184a:	4b02      	ldr	r3, [pc, #8]	@ (8001854 <ssd1306_Init+0xd0>)
 800184c:	2201      	movs	r2, #1
 800184e:	711a      	strb	r2, [r3, #4]
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200009c8 	.word	0x200009c8

08001858 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <ssd1306_Fill+0x14>
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <ssd1306_Fill+0x16>
 800186c:	23ff      	movs	r3, #255	@ 0xff
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	4619      	mov	r1, r3
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <ssd1306_Fill+0x2c>)
 8001876:	f00b fbaf 	bl	800cfd8 <memset>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200005c8 	.word	0x200005c8

08001888 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	e016      	b.n	80018c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	3b50      	subs	r3, #80	@ 0x50
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff40 	bl	8001720 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff3d 	bl	8001720 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80018a6:	2010      	movs	r0, #16
 80018a8:	f7ff ff3a 	bl	8001720 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	01db      	lsls	r3, r3, #7
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <ssd1306_UpdateScreen+0x4c>)
 80018b2:	4413      	add	r3, r2
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff4a 	bl	8001750 <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	3301      	adds	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d9e5      	bls.n	8001894 <ssd1306_UpdateScreen+0xc>
    }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200005c8 	.word	0x200005c8

080018d8 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	460b      	mov	r3, r1
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	4613      	mov	r3, r2
 80018e8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db3d      	blt.n	800196e <ssd1306_DrawPixel+0x96>
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018f6:	d83a      	bhi.n	800196e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if (color == White) {
 80018f8:	797b      	ldrb	r3, [r7, #5]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d11a      	bne.n	8001934 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	4603      	mov	r3, r0
 8001908:	01db      	lsls	r3, r3, #7
 800190a:	4413      	add	r3, r2
 800190c:	4a1a      	ldr	r2, [pc, #104]	@ (8001978 <ssd1306_DrawPixel+0xa0>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	b25a      	sxtb	r2, r3
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b259      	sxtb	r1, r3
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <ssd1306_DrawPixel+0xa0>)
 8001930:	54d1      	strb	r1, [r2, r3]
 8001932:	e01d      	b.n	8001970 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	b2d8      	uxtb	r0, r3
 800193c:	4603      	mov	r3, r0
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	4413      	add	r3, r2
 8001942:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <ssd1306_DrawPixel+0xa0>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	b25a      	sxtb	r2, r3
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	b25b      	sxtb	r3, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	b25b      	sxtb	r3, r3
 800195a:	4013      	ands	r3, r2
 800195c:	b259      	sxtb	r1, r3
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	4603      	mov	r3, r0
 8001962:	01db      	lsls	r3, r3, #7
 8001964:	4413      	add	r3, r2
 8001966:	b2c9      	uxtb	r1, r1
 8001968:	4a03      	ldr	r2, [pc, #12]	@ (8001978 <ssd1306_DrawPixel+0xa0>)
 800196a:	54d1      	strb	r1, [r2, r3]
 800196c:	e000      	b.n	8001970 <ssd1306_DrawPixel+0x98>
        return;
 800196e:	bf00      	nop
    }
}
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	200005c8 	.word	0x200005c8

0800197c <ssd1306_WriteChar>:
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4604      	mov	r4, r0
 8001984:	4638      	mov	r0, r7
 8001986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800198a:	4623      	mov	r3, r4
 800198c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b1f      	cmp	r3, #31
 8001992:	d902      	bls.n	800199a <ssd1306_WriteChar+0x1e>
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b7e      	cmp	r3, #126	@ 0x7e
 8001998:	d901      	bls.n	800199e <ssd1306_WriteChar+0x22>
        return 0;
 800199a:	2300      	movs	r3, #0
 800199c:	e077      	b.n	8001a8e <ssd1306_WriteChar+0x112>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) || SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 800199e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	783b      	ldrb	r3, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	2b80      	cmp	r3, #128	@ 0x80
 80019aa:	dc06      	bgt.n	80019ba <ssd1306_WriteChar+0x3e>
 80019ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 80019ae:	885b      	ldrh	r3, [r3, #2]
 80019b0:	461a      	mov	r2, r3
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	4413      	add	r3, r2
 80019b6:	2b40      	cmp	r3, #64	@ 0x40
 80019b8:	dd01      	ble.n	80019be <ssd1306_WriteChar+0x42>
        // Not enough space on current line
        return 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e067      	b.n	8001a8e <ssd1306_WriteChar+0x112>
    }

    // Use the font to write
    for (i = 0; i < Font.height; i++) {
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e04e      	b.n	8001a62 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	3b20      	subs	r3, #32
 80019ca:	7879      	ldrb	r1, [r7, #1]
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	440b      	add	r3, r1
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.width; j++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	e036      	b.n	8001a52 <ssd1306_WriteChar+0xd6>
            if ((b << j) & 0x8000) {
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)color);
 80019f4:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	b2d8      	uxtb	r0, r3
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <ssd1306_DrawPixel>
 8001a1a:	e017      	b.n	8001a4c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b2d8      	uxtb	r0, r3
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 8001a2c:	885b      	ldrh	r3, [r3, #2]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b2d9      	uxtb	r1, r3
 8001a38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	f7ff ff46 	bl	80018d8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.width; j++) {
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	783b      	ldrb	r3, [r7, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d3c3      	bcc.n	80019e4 <ssd1306_WriteChar+0x68>
    for (i = 0; i < Font.height; i++) {
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	787b      	ldrb	r3, [r7, #1]
 8001a64:	461a      	mov	r2, r3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d3ab      	bcc.n	80019c4 <ssd1306_WriteChar+0x48>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d005      	beq.n	8001a82 <ssd1306_WriteChar+0x106>
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	3a20      	subs	r2, #32
 8001a7c:	440a      	add	r2, r1
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	e000      	b.n	8001a84 <ssd1306_WriteChar+0x108>
 8001a82:	783a      	ldrb	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <ssd1306_WriteChar+0x11c>)
 8001a8a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200009c8 	.word	0x200009c8

08001a9c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4638      	mov	r0, r7
 8001aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001aaa:	e013      	b.n	8001ad4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7818      	ldrb	r0, [r3, #0]
 8001ab0:	7e3b      	ldrb	r3, [r7, #24]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	f7ff ff60 	bl	800197c <ssd1306_WriteChar>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d002      	beq.n	8001ace <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	e008      	b.n	8001ae0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e7      	bne.n	8001aac <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <ssd1306_SetCursor+0x2c>)
 8001afe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <ssd1306_SetCursor+0x2c>)
 8001b06:	805a      	strh	r2, [r3, #2]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200009c8 	.word	0x200009c8

08001b18 <ssd1306_SetContrast>:
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b22:	2381      	movs	r3, #129	@ 0x81
 8001b24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fdf9 	bl	8001720 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fdf5 	bl	8001720 <ssd1306_WriteCommand>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF; // Display on
 8001b50:	23af      	movs	r3, #175	@ 0xaf
 8001b52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <ssd1306_SetDisplayOn+0x38>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	715a      	strb	r2, [r3, #5]
 8001b5a:	e004      	b.n	8001b66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE; // Display off
 8001b5c:	23ae      	movs	r3, #174	@ 0xae
 8001b5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <ssd1306_SetDisplayOn+0x38>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fdd9 	bl	8001720 <ssd1306_WriteCommand>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200009c8 	.word	0x200009c8

08001b7c <draw_main_screen>:
#include "../ssd1306/ssd1306.h"
#include "../ssd1306/ssd1306_fonts.h"
#include <stdbool.h>
#include <stdio.h>
void draw_main_screen(int voltage, int current, int memory_percentage, bool is_recording)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b090      	sub	sp, #64	@ 0x40
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	70fb      	strb	r3, [r7, #3]
    // ssd1306_Fill(Black);

    // Display Voltage
    ssd1306_SetCursor(5, 5);
 8001b8a:	2105      	movs	r1, #5
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f7ff ffab 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Voltage:", Font_7x10, White);
 8001b92:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <draw_main_screen+0xd0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9a:	482d      	ldr	r0, [pc, #180]	@ (8001c50 <draw_main_screen+0xd4>)
 8001b9c:	f7ff ff7e 	bl	8001a9c <ssd1306_WriteString>
    char voltage_str[10];
    sprintf(voltage_str, "%d mV", voltage); // Format voltage with 2 decimal points
 8001ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	492b      	ldr	r1, [pc, #172]	@ (8001c54 <draw_main_screen+0xd8>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00b f9db 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(75, 5);
 8001bae:	2105      	movs	r1, #5
 8001bb0:	204b      	movs	r0, #75	@ 0x4b
 8001bb2:	f7ff ff99 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(voltage_str, Font_7x10, White);
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <draw_main_screen+0xd0>)
 8001bb8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc2:	f7ff ff6b 	bl	8001a9c <ssd1306_WriteString>

    // Display Current
    ssd1306_SetCursor(5, 25);
 8001bc6:	2119      	movs	r1, #25
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f7ff ff8d 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Current:", Font_7x10, White);
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <draw_main_screen+0xd0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd6:	4820      	ldr	r0, [pc, #128]	@ (8001c58 <draw_main_screen+0xdc>)
 8001bd8:	f7ff ff60 	bl	8001a9c <ssd1306_WriteString>
    char current_str[10];
    sprintf(current_str, "%d mA", current); // Format current with 3 decimal points
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	491e      	ldr	r1, [pc, #120]	@ (8001c5c <draw_main_screen+0xe0>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00b f9bd 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(75, 25);
 8001bea:	2119      	movs	r1, #25
 8001bec:	204b      	movs	r0, #75	@ 0x4b
 8001bee:	f7ff ff7b 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(current_str, Font_7x10, White);
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <draw_main_screen+0xd0>)
 8001bf4:	f107 0020 	add.w	r0, r7, #32
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfe:	f7ff ff4d 	bl	8001a9c <ssd1306_WriteString>

    // Display Memory taken
    ssd1306_SetCursor(5, 45);
 8001c02:	212d      	movs	r1, #45	@ 0x2d
 8001c04:	2005      	movs	r0, #5
 8001c06:	f7ff ff6f 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Memory taken:", Font_7x10, White);
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <draw_main_screen+0xd0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	9200      	str	r2, [sp, #0]
 8001c10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c12:	4813      	ldr	r0, [pc, #76]	@ (8001c60 <draw_main_screen+0xe4>)
 8001c14:	f7ff ff42 	bl	8001a9c <ssd1306_WriteString>
    char memory_str[10];
    sprintf(memory_str, "%d%%", memory_percentage); // Format memory as percentage
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4911      	ldr	r1, [pc, #68]	@ (8001c64 <draw_main_screen+0xe8>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00b f99f 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(95, 45);
 8001c26:	212d      	movs	r1, #45	@ 0x2d
 8001c28:	205f      	movs	r0, #95	@ 0x5f
 8001c2a:	f7ff ff5d 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(memory_str, Font_7x10, White);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <draw_main_screen+0xd0>)
 8001c30:	f107 0014 	add.w	r0, r7, #20
 8001c34:	2201      	movs	r2, #1
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	f7ff ff2f 	bl	8001a9c <ssd1306_WriteString>

    // Display Recording Status

    ssd1306_UpdateScreen();
 8001c3e:	f7ff fe23 	bl	8001888 <ssd1306_UpdateScreen>
}
 8001c42:	bf00      	nop
 8001c44:	3738      	adds	r7, #56	@ 0x38
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800f088 	.word	0x0800f088
 8001c50:	0800dac4 	.word	0x0800dac4
 8001c54:	0800dad0 	.word	0x0800dad0
 8001c58:	0800dad8 	.word	0x0800dad8
 8001c5c:	0800dae4 	.word	0x0800dae4
 8001c60:	0800daec 	.word	0x0800daec
 8001c64:	0800dafc 	.word	0x0800dafc

08001c68 <draw_settings_screen>:

void draw_settings_screen(int sample_rate, int sample_amount, int shunt_calibration)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b090      	sub	sp, #64	@ 0x40
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
    ssd1306_Fill(Black);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fdef 	bl	8001858 <ssd1306_Fill>

    // Display Sample rate
    ssd1306_SetCursor(5, 5);
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	2005      	movs	r0, #5
 8001c7e:	f7ff ff33 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Sample rate:", Font_7x10, White);
 8001c82:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <draw_settings_screen+0x100>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	9200      	str	r2, [sp, #0]
 8001c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8a:	4838      	ldr	r0, [pc, #224]	@ (8001d6c <draw_settings_screen+0x104>)
 8001c8c:	f7ff ff06 	bl	8001a9c <ssd1306_WriteString>
    char sample_rate_str[10];
    sprintf(sample_rate_str, "%ds", sample_rate);
 8001c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4936      	ldr	r1, [pc, #216]	@ (8001d70 <draw_settings_screen+0x108>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00b f963 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(95, 5);
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	205f      	movs	r0, #95	@ 0x5f
 8001ca2:	f7ff ff21 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(sample_rate_str, Font_11x18, White);
 8001ca6:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <draw_settings_screen+0x10c>)
 8001ca8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001cac:	2201      	movs	r2, #1
 8001cae:	9200      	str	r2, [sp, #0]
 8001cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb2:	f7ff fef3 	bl	8001a9c <ssd1306_WriteString>

    // Display Sample amount
    ssd1306_SetCursor(5, 25);
 8001cb6:	2119      	movs	r1, #25
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f7ff ff15 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Sample amount:", Font_7x10, White);
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <draw_settings_screen+0x100>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc6:	482c      	ldr	r0, [pc, #176]	@ (8001d78 <draw_settings_screen+0x110>)
 8001cc8:	f7ff fee8 	bl	8001a9c <ssd1306_WriteString>
    char sample_amount_str[10];
    sprintf(sample_amount_str, "%d", sample_amount);
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	492a      	ldr	r1, [pc, #168]	@ (8001d7c <draw_settings_screen+0x114>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b f945 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(95, 25);
 8001cda:	2119      	movs	r1, #25
 8001cdc:	205f      	movs	r0, #95	@ 0x5f
 8001cde:	f7ff ff03 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(sample_amount_str, Font_11x18, White);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <draw_settings_screen+0x10c>)
 8001ce4:	f107 0020 	add.w	r0, r7, #32
 8001ce8:	2201      	movs	r2, #1
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cee:	f7ff fed5 	bl	8001a9c <ssd1306_WriteString>

    // Display Shunt calibration
    ssd1306_SetCursor(5, 45);
 8001cf2:	212d      	movs	r1, #45	@ 0x2d
 8001cf4:	2005      	movs	r0, #5
 8001cf6:	f7ff fef7 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("Shunt calibration:", Font_7x10, White);
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <draw_settings_screen+0x100>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d02:	481f      	ldr	r0, [pc, #124]	@ (8001d80 <draw_settings_screen+0x118>)
 8001d04:	f7ff feca 	bl	8001a9c <ssd1306_WriteString>
    char shunt_calibration_str[10];
    sprintf(shunt_calibration_str, "%d", shunt_calibration);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	491b      	ldr	r1, [pc, #108]	@ (8001d7c <draw_settings_screen+0x114>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00b f927 	bl	800cf64 <siprintf>
    ssd1306_SetCursor(95, 45);
 8001d16:	212d      	movs	r1, #45	@ 0x2d
 8001d18:	205f      	movs	r0, #95	@ 0x5f
 8001d1a:	f7ff fee5 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString(shunt_calibration_str, Font_11x18, White);
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <draw_settings_screen+0x10c>)
 8001d20:	f107 0014 	add.w	r0, r7, #20
 8001d24:	2201      	movs	r2, #1
 8001d26:	9200      	str	r2, [sp, #0]
 8001d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2a:	f7ff feb7 	bl	8001a9c <ssd1306_WriteString>

    // Display About
    ssd1306_SetCursor(5, 65);
 8001d2e:	2141      	movs	r1, #65	@ 0x41
 8001d30:	2005      	movs	r0, #5
 8001d32:	f7ff fed9 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("About", Font_7x10, White);
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <draw_settings_screen+0x100>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <draw_settings_screen+0x11c>)
 8001d40:	f7ff feac 	bl	8001a9c <ssd1306_WriteString>

    // Display USB Transmit Mode
    ssd1306_SetCursor(5, 85);
 8001d44:	2155      	movs	r1, #85	@ 0x55
 8001d46:	2005      	movs	r0, #5
 8001d48:	f7ff fece 	bl	8001ae8 <ssd1306_SetCursor>
    ssd1306_WriteString("USB Transmit mode", Font_7x10, White);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <draw_settings_screen+0x100>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	9200      	str	r2, [sp, #0]
 8001d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <draw_settings_screen+0x120>)
 8001d56:	f7ff fea1 	bl	8001a9c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001d5a:	f7ff fd95 	bl	8001888 <ssd1306_UpdateScreen>
}
 8001d5e:	bf00      	nop
 8001d60:	3738      	adds	r7, #56	@ 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	0800f088 	.word	0x0800f088
 8001d6c:	0800db04 	.word	0x0800db04
 8001d70:	0800db14 	.word	0x0800db14
 8001d74:	0800f094 	.word	0x0800f094
 8001d78:	0800db18 	.word	0x0800db18
 8001d7c:	0800db28 	.word	0x0800db28
 8001d80:	0800db2c 	.word	0x0800db2c
 8001d84:	0800db40 	.word	0x0800db40
 8001d88:	0800db48 	.word	0x0800db48

08001d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff faf0 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d92:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d94:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001da8:	4c09      	ldr	r4, [pc, #36]	@ (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f00b f973 	bl	800d0a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dba:	f7fe fe6f 	bl	8000a9c <main>
  bx lr
 8001dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001dc8:	0800f134 	.word	0x0800f134
  ldr r2, =_sbss
 8001dcc:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001dd0:	200022a4 	.word	0x200022a4

08001dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_2_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_Init+0x28>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <HAL_Init+0x28>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f8f5 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f7ff f9e6 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff f8f4 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x1c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	200009d0 	.word	0x200009d0

08001e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	@ (8001e38 <HAL_GetTick+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	200009d0 	.word	0x200009d0

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffe0 	bl	8001e28 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000000c 	.word	0x2000000c

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4906      	ldr	r1, [pc, #24]	@ (8001f1c <__NVIC_EnableIRQ+0x34>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	@ (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	@ (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	@ 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff4f 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff64 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ffb2 	bl	8001f74 <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff81 	bl	8001f20 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff57 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	@ 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	@ (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	@ 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	@ 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	492c      	ldr	r1, [pc, #176]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4922      	ldr	r1, [pc, #136]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4918      	ldr	r1, [pc, #96]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	490e      	ldr	r1, [pc, #56]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	@ 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	807b      	strh	r3, [r7, #2]
 8002386:	4613      	mov	r3, r2
 8002388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238a:	787b      	ldrb	r3, [r7, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	041a      	lsls	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e12b      	b.n	8002616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fe3c 	bl	8001050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002410:	f003 fac6 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a81      	ldr	r2, [pc, #516]	@ (8002620 <HAL_I2C_Init+0x274>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d807      	bhi.n	8002430 <HAL_I2C_Init+0x84>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a80      	ldr	r2, [pc, #512]	@ (8002624 <HAL_I2C_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e006      	b.n	800243e <HAL_I2C_Init+0x92>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_I2C_Init+0x27c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0e7      	b.n	8002616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a78      	ldr	r2, [pc, #480]	@ (800262c <HAL_I2C_Init+0x280>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_I2C_Init+0x274>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d802      	bhi.n	8002480 <HAL_I2C_Init+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	e009      	b.n	8002494 <HAL_I2C_Init+0xe8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a69      	ldr	r2, [pc, #420]	@ (8002630 <HAL_I2C_Init+0x284>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	3301      	adds	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495c      	ldr	r1, [pc, #368]	@ (8002620 <HAL_I2C_Init+0x274>)
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d819      	bhi.n	80024e8 <HAL_I2C_Init+0x13c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_I2C_Init+0x138>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e59      	subs	r1, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	e051      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x168>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x18e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x196>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1bc>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264e:	f7ff fbeb 	bl	8001e28 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	f040 80d9 	bne.w	8002814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2319      	movs	r3, #25
 8002668:	2201      	movs	r2, #1
 800266a:	496d      	ldr	r1, [pc, #436]	@ (8002820 <HAL_I2C_Mem_Write+0x1ec>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fdef 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	e0cc      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2C_Mem_Write+0x56>
 8002686:	2302      	movs	r3, #2
 8002688:	e0c5      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d007      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2221      	movs	r2, #33	@ 0x21
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002824 <HAL_I2C_Mem_Write+0x1f0>)
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f2:	88f8      	ldrh	r0, [r7, #6]
 80026f4:	893a      	ldrh	r2, [r7, #8]
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4603      	mov	r3, r0
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fc26 	bl	8002f54 <I2C_RequestMemoryWrite>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d052      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e081      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 feb4 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11b      	bne.n	80027b4 <HAL_I2C_Mem_Write+0x180>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1aa      	bne.n	8002712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fea7 	bl	8003514 <I2C_WaitOnBTFFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d107      	bne.n	80027e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e016      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	00100002 	.word	0x00100002
 8002824:	ffff0000 	.word	0xffff0000

08002828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	460b      	mov	r3, r1
 800283c:	813b      	strh	r3, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002846:	f7ff faef 	bl	8001e28 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	f040 8244 	bne.w	8002ce2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2319      	movs	r3, #25
 8002860:	2201      	movs	r2, #1
 8002862:	4982      	ldr	r1, [pc, #520]	@ (8002a6c <HAL_I2C_Mem_Read+0x244>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fcf3 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	e237      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Mem_Read+0x5a>
 800287e:	2302      	movs	r3, #2
 8002880:	e230      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d007      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2222      	movs	r2, #34	@ 0x22
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	@ 0x40
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a62      	ldr	r2, [pc, #392]	@ (8002a70 <HAL_I2C_Mem_Read+0x248>)
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ea:	88f8      	ldrh	r0, [r7, #6]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fbc0 	bl	8003080 <I2C_RequestMemoryRead>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1ec      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e1c0      	b.n	8002cbc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	2b01      	cmp	r3, #1
 8002940:	d11e      	bne.n	8002980 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002950:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002952:	b672      	cpsid	i
}
 8002954:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800297c:	b662      	cpsie	i
}
 800297e:	e035      	b.n	80029ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	d11e      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002996:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029c2:	b662      	cpsie	i
}
 80029c4:	e012      	b.n	80029ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e166      	b.n	8002cbc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 811f 	bhi.w	8002c36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fdcd 	bl	80035a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e167      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a46:	e139      	b.n	8002cbc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d152      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	@ (8002a74 <HAL_I2C_Mem_Read+0x24c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbf8 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e13c      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002abe:	b662      	cpsie	i
}
 8002ac0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002af4:	e0e2      	b.n	8002cbc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afc:	2200      	movs	r2, #0
 8002afe:	497b      	ldr	r1, [pc, #492]	@ (8002cec <HAL_I2C_Mem_Read+0x4c4>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fba5 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0e9      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b56:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_I2C_Mem_Read+0x4c8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_I2C_Mem_Read+0x4cc>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a1a      	lsrs	r2, r3, #8
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00da      	lsls	r2, r3, #3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9e:	b662      	cpsie	i
}
 8002ba0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e09a      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d1d9      	bne.n	8002b70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfe:	b662      	cpsie	i
}
 8002c00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c34:	e042      	b.n	8002cbc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fcb2 	bl	80035a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e04c      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d118      	bne.n	8002cbc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f ae94 	bne.w	80029ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3728      	adds	r7, #40	@ 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010004 	.word	0x00010004
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	14f8b589 	.word	0x14f8b589

08002cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff f88e 	bl	8001e28 <HAL_GetTick>
 8002d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8111 	bne.w	8002f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2319      	movs	r3, #25
 8002d26:	2201      	movs	r2, #1
 8002d28:	4988      	ldr	r1, [pc, #544]	@ (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fa90 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	e104      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2C_IsDeviceReady+0x50>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0fd      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d007      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2224      	movs	r2, #36	@ 0x24
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	@ (8002f50 <HAL_I2C_IsDeviceReady+0x258>)
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa4e 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc8:	d103      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0b6      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f81f 	bl	8001e28 <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e1a:	e025      	b.n	8002e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7ff f804 	bl	8001e28 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <HAL_I2C_IsDeviceReady+0x13a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22a0      	movs	r2, #160	@ 0xa0
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e72:	d005      	beq.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0cd      	beq.n	8002e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d129      	bne.n	8002eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4921      	ldr	r1, [pc, #132]	@ (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9c2 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e036      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e02c      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2319      	movs	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	490f      	ldr	r1, [pc, #60]	@ (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f99e 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e012      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f4ff af32 	bcc.w	8002d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f960 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa4:	d103      	bne.n	8002fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e05f      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	492d      	ldr	r1, [pc, #180]	@ (800307c <I2C_RequestMemoryWrite+0x128>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9bb 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04c      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa46 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02b      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e021      	b.n	8003070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa20 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e005      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	893b      	ldrh	r3, [r7, #8]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8c2 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e0:	d103      	bne.n	80030ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0aa      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	4952      	ldr	r1, [pc, #328]	@ (800324c <I2C_RequestMemoryRead+0x1cc>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f91d 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e097      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f9a8 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e076      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e021      	b.n	80031ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f982 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e050      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ae:	6a39      	ldr	r1, [r7, #32]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f967 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e035      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f82b 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320e:	d103      	bne.n	8003218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e013      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	6a3a      	ldr	r2, [r7, #32]
 8003230:	4906      	ldr	r1, [pc, #24]	@ (800324c <I2C_RequestMemoryRead+0x1cc>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f886 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	00010002 	.word	0x00010002

08003250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003260:	e048      	b.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003268:	d044      	beq.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe fddd 	bl	8001e28 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d139      	bne.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10d      	bne.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	e00c      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d116      	bne.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e023      	b.n	800333c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10d      	bne.n	800331a <I2C_WaitOnFlagUntilTimeout+0xca>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	e00c      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	429a      	cmp	r2, r3
 8003338:	d093      	beq.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003352:	e071      	b.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003362:	d123      	bne.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800337c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e067      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b2:	d041      	beq.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe fd38 	bl	8001e28 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d136      	bne.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10c      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e00b      	b.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e021      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d10c      	bne.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	43da      	mvns	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e00b      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af6d 	bne.w	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003490:	e034      	b.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8e3 	bl	800365e <I2C_IsAcknowledgeFailed>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e034      	b.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034a8:	d028      	beq.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fcbd 	bl	8001e28 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d016      	beq.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b80      	cmp	r3, #128	@ 0x80
 8003508:	d1c3      	bne.n	8003492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003520:	e034      	b.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f89b 	bl	800365e <I2C_IsAcknowledgeFailed>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e034      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003538:	d028      	beq.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fc75 	bl	8001e28 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11d      	bne.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d016      	beq.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e007      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d1c3      	bne.n	8003522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035b0:	e049      	b.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d119      	bne.n	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0210 	mvn.w	r2, #16
 80035c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e030      	b.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fc18 	bl	8001e28 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d016      	beq.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d1ae      	bne.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003674:	d11b      	bne.n	80036ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800367e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036bc:	b08b      	sub	sp, #44	@ 0x2c
 80036be:	af06      	add	r7, sp, #24
 80036c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0f1      	b.n	80038b0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f009 f97f 	bl	800c9e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 feda 	bl	80064ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	687e      	ldr	r6, [r7, #4]
 8003700:	466d      	mov	r5, sp
 8003702:	f106 0410 	add.w	r4, r6, #16
 8003706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	602b      	str	r3, [r5, #0]
 800370e:	1d33      	adds	r3, r6, #4
 8003710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f002 fea4 	bl	8006460 <USB_CoreInit>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0c2      	b.n	80038b0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fed5 	bl	80064e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e040      	b.n	80037be <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	3301      	adds	r3, #1
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	3303      	adds	r3, #3
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	3338      	adds	r3, #56	@ 0x38
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	333c      	adds	r3, #60	@ 0x3c
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	3340      	adds	r3, #64	@ 0x40
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	3301      	adds	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3b9      	bcc.n	800373c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e044      	b.n	8003858 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3301      	adds	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3b5      	bcc.n	80037ce <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	687e      	ldr	r6, [r7, #4]
 800386a:	466d      	mov	r5, sp
 800386c:	f106 0410 	add.w	r4, r6, #16
 8003870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	1d33      	adds	r3, r6, #4
 800387a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387c:	6838      	ldr	r0, [r7, #0]
 800387e:	f002 fe3b 	bl	80064f8 <USB_DevInit>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e00d      	b.n	80038b0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f005 f8d2 	bl	8008a52 <USB_DevDisconnect>

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_PCD_Start+0x16>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e016      	b.n	80038fc <HAL_PCD_Start+0x44>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 fdd0 	bl	8006480 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80038e0:	2101      	movs	r1, #1
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f009 fb07 	bl	800cef6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 f8a6 	bl	8008a3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f005 f8a8 	bl	8008a66 <USB_ReadInterrupts>
 8003916:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb48 	bl	8003fb8 <PCD_EP_ISR_Handler>

    return;
 8003928:	e119      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003946:	b292      	uxth	r2, r2
 8003948:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f009 f8c4 	bl	800cada <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f905 	bl	8003b64 <HAL_PCD_SetAddress>

    return;
 800395a:	e100      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003978:	b292      	uxth	r2, r2
 800397a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800397e:	e0ee      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399c:	b292      	uxth	r2, r2
 800399e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039a2:	e0dc      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d027      	beq.n	80039fe <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	b292      	uxth	r2, r2
 80039c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	b292      	uxth	r2, r2
 80039da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f009 f8b4 	bl	800cb4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039fc:	e0af      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8083 	beq.w	8003b10 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e010      	b.n	8003a32 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	b292      	uxth	r2, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	3320      	adds	r3, #32
 8003a26:	443b      	add	r3, r7
 8003a28:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003a2c:	7ffb      	ldrb	r3, [r7, #31]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d9eb      	bls.n	8003a10 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	b292      	uxth	r2, r2
 8003a64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003a68:	bf00      	nop
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f6      	beq.n	8003a6a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e00f      	b.n	8003aba <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003a9a:	7ffb      	ldrb	r3, [r7, #31]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	7ffa      	ldrb	r2, [r7, #31]
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	440a      	add	r2, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	3320      	adds	r3, #32
 8003aac:	443b      	add	r3, r7
 8003aae:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ab2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003ab4:	7ffb      	ldrb	r3, [r7, #31]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d9ec      	bls.n	8003a9a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aea:	b292      	uxth	r2, r2
 8003aec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0204 	orr.w	r2, r2, #4
 8003b02:	b292      	uxth	r2, r2
 8003b04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f009 f805 	bl	800cb18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b0e:	e026      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00f      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f008 ffc3 	bl	800cabe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b38:	e011      	b.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b56:	b292      	uxth	r2, r2
 8003b58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b5c:	bf00      	nop
  }
}
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_PCD_SetAddress+0x1a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e013      	b.n	8003ba6 <HAL_PCD_SetAddress+0x42>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 ff3e 	bl	8008a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	70fb      	strb	r3, [r7, #3]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	803b      	strh	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0e      	bge.n	8003bf2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	705a      	strb	r2, [r3, #1]
 8003bf0:	e00e      	b.n	8003c10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 0207 	and.w	r2, r3, #7
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c1c:	883a      	ldrh	r2, [r7, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	78ba      	ldrb	r2, [r7, #2]
 8003c26:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c28:	78bb      	ldrb	r3, [r7, #2]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d102      	bne.n	8003c34 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_PCD_EP_Open+0x94>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e00e      	b.n	8003c60 <HAL_PCD_EP_Open+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fc87 	bl	8006564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da0e      	bge.n	8003c9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	705a      	strb	r2, [r3, #1]
 8003c98:	e00e      	b.n	8003cb8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	f003 0207 	and.w	r2, r3, #7
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_EP_Close+0x6a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e00e      	b.n	8003cf0 <HAL_PCD_EP_Close+0x88>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f002 ffff 	bl	8006ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	f003 0207 	and.w	r2, r3, #7
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 f9b6 	bl	80070bc <USB_EPStartXfer>

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 0207 	and.w	r2, r3, #7
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003d7c:	681b      	ldr	r3, [r3, #0]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	460b      	mov	r3, r1
 8003d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 f968 	bl	80070bc <USB_EPStartXfer>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 0207 	and.w	r2, r3, #7
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d901      	bls.n	8003e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e04c      	b.n	8003eae <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da0e      	bge.n	8003e3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	705a      	strb	r2, [r3, #1]
 8003e38:	e00c      	b.n	8003e54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_SetStall+0x7e>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e01c      	b.n	8003eae <HAL_PCD_EP_SetStall+0xb8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fccb 	bl	800881e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f004 fdf0 	bl	8008a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d901      	bls.n	8003ed4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e040      	b.n	8003f56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	da0e      	bge.n	8003efa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	705a      	strb	r2, [r3, #1]
 8003ef8:	e00e      	b.n	8003f18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 0207 	and.w	r2, r3, #7
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_PCD_EP_ClrStall+0x82>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e00e      	b.n	8003f56 <HAL_PCD_EP_ClrStall+0xa0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fcb9 	bl	80088be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_PCD_EP_Flush+0x1a>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e01b      	b.n	8003fb0 <HAL_PCD_EP_Flush+0x52>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8003f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da09      	bge.n	8003f9c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f002 facf 	bl	8006538 <USB_FlushTxFifo>
 8003f9a:	e004      	b.n	8003fa6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 fad4 	bl	800654e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b096      	sub	sp, #88	@ 0x58
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fc0:	e3be      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003fdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8178 	bne.w	80042d6 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d151      	bne.n	8004096 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	81fb      	strh	r3, [r7, #14]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3328      	adds	r3, #40	@ 0x28
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	3302      	adds	r3, #2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004046:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	441a      	add	r2, r3
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004056:	2100      	movs	r1, #0
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f008 fd16 	bl	800ca8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 836a 	beq.w	8004740 <PCD_EP_ISR_Handler+0x788>
 800406c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f040 8365 	bne.w	8004740 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004082:	b2da      	uxtb	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004094:	e354      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800409c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80040a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d034      	beq.n	800411e <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040bc:	b29b      	uxth	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	3306      	adds	r3, #6
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f004 fd16 	bl	8008b24 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004104:	4013      	ands	r3, r2
 8004106:	823b      	strh	r3, [r7, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	8a3a      	ldrh	r2, [r7, #16]
 800410e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004112:	b292      	uxth	r2, r2
 8004114:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f008 fc8a 	bl	800ca30 <HAL_PCD_SetupStageCallback>
 800411c:	e310      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800411e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004122:	2b00      	cmp	r3, #0
 8004124:	f280 830c 	bge.w	8004740 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29a      	uxth	r2, r3
 8004130:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004134:	4013      	ands	r3, r2
 8004136:	83fb      	strh	r3, [r7, #30]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	8bfa      	ldrh	r2, [r7, #30]
 800413e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004142:	b292      	uxth	r2, r2
 8004144:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	3306      	adds	r3, #6
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d019      	beq.n	80041ae <PCD_EP_ISR_Handler+0x1f6>
 800417a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	6959      	ldr	r1, [r3, #20]
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004192:	b29b      	uxth	r3, r3
 8004194:	f004 fcc6 	bl	8008b24 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	441a      	add	r2, r3
 80041a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041a6:	2100      	movs	r1, #0
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f008 fc53 	bl	800ca54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80041b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 82bd 	bne.w	8004740 <PCD_EP_ISR_Handler+0x788>
 80041c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80041ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041d2:	f000 82b5 	beq.w	8004740 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4413      	add	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004200:	b29a      	uxth	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b3e      	cmp	r3, #62	@ 0x3e
 800420c:	d91d      	bls.n	800424a <PCD_EP_ISR_Handler+0x292>
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <PCD_EP_ISR_Handler+0x270>
 8004222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004224:	3b01      	subs	r3, #1
 8004226:	647b      	str	r3, [r7, #68]	@ 0x44
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29a      	uxth	r2, r3
 800422e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004230:	b29b      	uxth	r3, r3
 8004232:	029b      	lsls	r3, r3, #10
 8004234:	b29b      	uxth	r3, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800423e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004242:	b29a      	uxth	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	e026      	b.n	8004298 <PCD_EP_ISR_Handler+0x2e0>
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <PCD_EP_ISR_Handler+0x2b0>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004260:	b29a      	uxth	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	e017      	b.n	8004298 <PCD_EP_ISR_Handler+0x2e0>
 8004268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <PCD_EP_ISR_Handler+0x2ca>
 800427c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427e:	3301      	adds	r3, #1
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29a      	uxth	r2, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428a:	b29b      	uxth	r3, r3
 800428c:	029b      	lsls	r3, r3, #10
 800428e:	b29b      	uxth	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	b29a      	uxth	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a8:	827b      	strh	r3, [r7, #18]
 80042aa:	8a7b      	ldrh	r3, [r7, #18]
 80042ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80042b0:	827b      	strh	r3, [r7, #18]
 80042b2:	8a7b      	ldrh	r3, [r7, #18]
 80042b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042b8:	827b      	strh	r3, [r7, #18]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	8a7b      	ldrh	r3, [r7, #18]
 80042c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8013      	strh	r3, [r2, #0]
 80042d4:	e234      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f280 80fc 	bge.w	80044ec <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29a      	uxth	r2, r3
 8004306:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800430a:	4013      	ands	r3, r2
 800430c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004322:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004326:	b292      	uxth	r2, r2
 8004328:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800432a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004342:	7b1b      	ldrb	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d125      	bne.n	8004394 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	3306      	adds	r3, #6
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004370:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004374:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8092 	beq.w	80044a2 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004384:	6959      	ldr	r1, [r3, #20]
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	88da      	ldrh	r2, [r3, #6]
 800438a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800438e:	f004 fbc9 	bl	8008b24 <USB_ReadPMA>
 8004392:	e086      	b.n	80044a2 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	78db      	ldrb	r3, [r3, #3]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d10a      	bne.n	80043b2 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800439c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043a0:	461a      	mov	r2, r3
 80043a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f9d9 	bl	800475c <HAL_PCD_EP_DB_Receive>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80043b0:	e077      	b.n	80044a2 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043cc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d024      	beq.n	800445a <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004418:	b29b      	uxth	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	3302      	adds	r3, #2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004438:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800443c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02e      	beq.n	80044a2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	891a      	ldrh	r2, [r3, #8]
 8004450:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004454:	f004 fb66 	bl	8008b24 <USB_ReadPMA>
 8004458:	e023      	b.n	80044a2 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	3306      	adds	r3, #6
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004482:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004486:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	6959      	ldr	r1, [r3, #20]
 8004496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004498:	895a      	ldrh	r2, [r3, #10]
 800449a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800449e:	f004 fb41 	bl	8008b24 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80044a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80044aa:	441a      	add	r2, r3
 80044ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80044b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80044b8:	441a      	add	r2, r3
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80044be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <PCD_EP_ISR_Handler+0x51a>
 80044c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d206      	bcs.n	80044e0 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80044d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f008 fabb 	bl	800ca54 <HAL_PCD_DataOutStageCallback>
 80044de:	e005      	b.n	80044ec <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044e6:	4618      	mov	r0, r3
 80044e8:	f002 fde8 	bl	80070bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80044ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8123 	beq.w	8004740 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80044fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004528:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800454a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454c:	78db      	ldrb	r3, [r3, #3]
 800454e:	2b01      	cmp	r3, #1
 8004550:	f040 80a2 	bne.w	8004698 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800455a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455c:	7b1b      	ldrb	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8093 	beq.w	800468a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d046      	beq.n	80045fe <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d126      	bne.n	80045c6 <PCD_EP_ISR_Handler+0x60e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	4413      	add	r3, r2
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	4413      	add	r3, r2
 800459a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e061      	b.n	800468a <PCD_EP_ISR_Handler+0x6d2>
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d15d      	bne.n	800468a <PCD_EP_ISR_Handler+0x6d2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	4413      	add	r3, r2
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	011a      	lsls	r2, r3, #4
 80045ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	2200      	movs	r2, #0
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e045      	b.n	800468a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d126      	bne.n	800465a <PCD_EP_ISR_Handler+0x6a2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	4413      	add	r3, r2
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
 8004624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462c:	4413      	add	r3, r2
 800462e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463e:	b29a      	uxth	r2, r3
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004652:	b29a      	uxth	r2, r3
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e017      	b.n	800468a <PCD_EP_ISR_Handler+0x6d2>
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d113      	bne.n	800468a <PCD_EP_ISR_Handler+0x6d2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004670:	4413      	add	r3, r2
 8004672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467c:	4413      	add	r3, r2
 800467e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	2200      	movs	r2, #0
 8004688:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f008 f9fa 	bl	800ca8a <HAL_PCD_DataInStageCallback>
 8004696:	e053      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004698:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800469c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d146      	bne.n	8004732 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	3302      	adds	r3, #2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80046d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046d8:	429a      	cmp	r2, r3
 80046da:	d907      	bls.n	80046ec <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80046dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046e4:	1ad2      	subs	r2, r2, r3
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	619a      	str	r2, [r3, #24]
 80046ea:	e002      	b.n	80046f2 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80046ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ee:	2200      	movs	r2, #0
 80046f0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80046f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f008 f9c2 	bl	800ca8a <HAL_PCD_DataInStageCallback>
 8004706:	e01b      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004710:	441a      	add	r2, r3
 8004712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004714:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800471e:	441a      	add	r2, r3
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800472a:	4618      	mov	r0, r3
 800472c:	f002 fcc6 	bl	80070bc <USB_EPStartXfer>
 8004730:	e006      	b.n	8004740 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004732:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004736:	461a      	mov	r2, r3
 8004738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f91b 	bl	8004976 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004748:	b29b      	uxth	r3, r3
 800474a:	b21b      	sxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	f6ff ac38 	blt.w	8003fc2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3758      	adds	r7, #88	@ 0x58
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d07e      	beq.n	8004872 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4413      	add	r3, r2
 8004788:	3302      	adds	r3, #2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	8b7b      	ldrh	r3, [r7, #26]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d306      	bcc.n	80047b6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	8b7b      	ldrh	r3, [r7, #26]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	619a      	str	r2, [r3, #24]
 80047b4:	e002      	b.n	80047bc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d123      	bne.n	800480c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047de:	833b      	strh	r3, [r7, #24]
 80047e0:	8b3b      	ldrh	r3, [r7, #24]
 80047e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047e6:	833b      	strh	r3, [r7, #24]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	8b3b      	ldrh	r3, [r7, #24]
 80047f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004808:	b29b      	uxth	r3, r3
 800480a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01f      	beq.n	8004856 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004830:	82fb      	strh	r3, [r7, #22]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	8afb      	ldrh	r3, [r7, #22]
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004856:	8b7b      	ldrh	r3, [r7, #26]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8087 	beq.w	800496c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6959      	ldr	r1, [r3, #20]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	891a      	ldrh	r2, [r3, #8]
 800486a:	8b7b      	ldrh	r3, [r7, #26]
 800486c:	f004 f95a 	bl	8008b24 <USB_ReadPMA>
 8004870:	e07c      	b.n	800496c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	3306      	adds	r3, #6
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	8b7b      	ldrh	r3, [r7, #26]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d306      	bcc.n	80048b4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	8b7b      	ldrh	r3, [r7, #26]
 80048ac:	1ad2      	subs	r2, r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	619a      	str	r2, [r3, #24]
 80048b2:	e002      	b.n	80048ba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d123      	bne.n	800490a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048dc:	83fb      	strh	r3, [r7, #30]
 80048de:	8bfb      	ldrh	r3, [r7, #30]
 80048e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048e4:	83fb      	strh	r3, [r7, #30]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d11f      	bne.n	8004954 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492e:	83bb      	strh	r3, [r7, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	8bbb      	ldrh	r3, [r7, #28]
 8004940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004954:	8b7b      	ldrh	r3, [r7, #26]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6959      	ldr	r1, [r3, #20]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	895a      	ldrh	r2, [r3, #10]
 8004966:	8b7b      	ldrh	r3, [r7, #26]
 8004968:	f004 f8dc 	bl	8008b24 <USB_ReadPMA>
    }
  }

  return count;
 800496c:	8b7b      	ldrh	r3, [r7, #26]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b0a4      	sub	sp, #144	@ 0x90
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 81dd 	beq.w	8004d4a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	3302      	adds	r3, #2
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d907      	bls.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	619a      	str	r2, [r3, #24]
 80049d6:	e002      	b.n	80049de <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 80b9 	bne.w	8004b5a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d126      	bne.n	8004a3e <HAL_PCD_EP_DB_Transmit+0xc8>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	4413      	add	r3, r2
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	011a      	lsls	r2, r3, #4
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e01a      	b.n	8004a74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d116      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	4413      	add	r3, r2
 8004a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	011a      	lsls	r2, r3, #4
 8004a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a66:	4413      	add	r3, r2
 8004a68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	2200      	movs	r2, #0
 8004a72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d126      	bne.n	8004ad0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	011a      	lsls	r2, r3, #4
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e017      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d113      	bne.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	4413      	add	r3, r2
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	4413      	add	r3, r2
 8004af4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	2200      	movs	r2, #0
 8004afe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f007 ffbf 	bl	800ca8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 82fc 	beq.w	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	82fb      	strh	r3, [r7, #22]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8afb      	ldrh	r3, [r7, #22]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
 8004b58:	e2da      	b.n	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d021      	beq.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	f040 82ae 	bne.w	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bca:	441a      	add	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d30b      	bcc.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bec:	1ad2      	subs	r2, r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	621a      	str	r2, [r3, #32]
 8004bf2:	e017      	b.n	8004c24 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d108      	bne.n	8004c0e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004bfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c0c:	e00a      	b.n	8004c24 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d165      	bne.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x382>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	4413      	add	r3, r2
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011a      	lsls	r2, r3, #4
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c6a:	d91d      	bls.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x332>
 8004c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_PCD_EP_DB_Transmit+0x310>
 8004c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c82:	3b01      	subs	r3, #1
 8004c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e044      	b.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <HAL_PCD_EP_DB_Transmit+0x350>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e035      	b.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cdc:	3301      	adds	r3, #1
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	e01c      	b.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d118      	bne.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d14:	4413      	add	r3, r2
 8004d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	011a      	lsls	r2, r3, #4
 8004d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d20:	4413      	add	r3, r2
 8004d22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d30:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6959      	ldr	r1, [r3, #20]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	891a      	ldrh	r2, [r3, #8]
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f003 fea9 	bl	8008a9a <USB_WritePMA>
 8004d48:	e1e2      	b.n	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3306      	adds	r3, #6
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d72:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d307      	bcc.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	619a      	str	r2, [r3, #24]
 8004d90:	e002      	b.n	8004d98 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 80c0 	bne.w	8004f22 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d126      	bne.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x482>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dbe:	4413      	add	r3, r2
 8004dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e01a      	b.n	8004e2e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d116      	bne.n	8004e2e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e14:	4413      	add	r3, r2
 8004e16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d12b      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e50:	4413      	add	r3, r2
 8004e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	011a      	lsls	r2, r3, #4
 8004e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e017      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d113      	bne.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eaa:	4413      	add	r3, r2
 8004eac:	677b      	str	r3, [r7, #116]	@ 0x74
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f007 fddd 	bl	800ca8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 811a 	bne.w	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
 8004f20:	e0f6      	b.n	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d121      	bne.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f040 80ca 	bne.w	8005110 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f84:	441a      	add	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f92:	441a      	add	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d30b      	bcc.n	8004fbc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fb4:	1ad2      	subs	r2, r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	621a      	str	r2, [r3, #32]
 8004fba:	e017      	b.n	8004fec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d108      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004fd4:	e00a      	b.n	8004fec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d165      	bne.n	80050c6 <HAL_PCD_EP_DB_Transmit+0x750>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800500e:	4413      	add	r3, r2
 8005010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800501a:	4413      	add	r3, r2
 800501c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800502c:	b29a      	uxth	r2, r3
 800502e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005036:	2b3e      	cmp	r3, #62	@ 0x3e
 8005038:	d91d      	bls.n	8005076 <HAL_PCD_EP_DB_Transmit+0x700>
 800503a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_PCD_EP_DB_Transmit+0x6de>
 800504e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005050:	3b01      	subs	r3, #1
 8005052:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29a      	uxth	r2, r3
 800505a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800505c:	b29b      	uxth	r3, r3
 800505e:	029b      	lsls	r3, r3, #10
 8005060:	b29b      	uxth	r3, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506e:	b29a      	uxth	r2, r3
 8005070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e041      	b.n	80050fa <HAL_PCD_EP_DB_Transmit+0x784>
 8005076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_PCD_EP_DB_Transmit+0x71e>
 800507e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e032      	b.n	80050fa <HAL_PCD_EP_DB_Transmit+0x784>
 8005094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_PCD_EP_DB_Transmit+0x738>
 80050a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050aa:	3301      	adds	r3, #1
 80050ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	029b      	lsls	r3, r3, #10
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e019      	b.n	80050fa <HAL_PCD_EP_DB_Transmit+0x784>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d115      	bne.n	80050fa <HAL_PCD_EP_DB_Transmit+0x784>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	4413      	add	r3, r2
 80050de:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	011a      	lsls	r2, r3, #4
 80050e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6959      	ldr	r1, [r3, #20]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	895a      	ldrh	r2, [r3, #10]
 8005106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800510a:	b29b      	uxth	r3, r3
 800510c:	f003 fcc5 	bl	8008a9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512a:	82bb      	strh	r3, [r7, #20]
 800512c:	8abb      	ldrh	r3, [r7, #20]
 800512e:	f083 0310 	eor.w	r3, r3, #16
 8005132:	82bb      	strh	r3, [r7, #20]
 8005134:	8abb      	ldrh	r3, [r7, #20]
 8005136:	f083 0320 	eor.w	r3, r3, #32
 800513a:	82bb      	strh	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	8abb      	ldrh	r3, [r7, #20]
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3790      	adds	r7, #144	@ 0x90
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800516a:	b480      	push	{r7}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	817b      	strh	r3, [r7, #10]
 8005178:	4613      	mov	r3, r2
 800517a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005188:	897b      	ldrh	r3, [r7, #10]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e009      	b.n	80051b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051a0:	897a      	ldrh	r2, [r7, #10]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80051b4:	893b      	ldrh	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	80da      	strh	r2, [r3, #6]
 80051c8:	e00b      	b.n	80051e2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2201      	movs	r2, #1
 80051ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	b29a      	uxth	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e272      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8087 	beq.w	800531e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005210:	4b92      	ldr	r3, [pc, #584]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b04      	cmp	r3, #4
 800521a:	d00c      	beq.n	8005236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800521c:	4b8f      	ldr	r3, [pc, #572]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d112      	bne.n	800524e <HAL_RCC_OscConfig+0x5e>
 8005228:	4b8c      	ldr	r3, [pc, #560]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005234:	d10b      	bne.n	800524e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005236:	4b89      	ldr	r3, [pc, #548]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d06c      	beq.n	800531c <HAL_RCC_OscConfig+0x12c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d168      	bne.n	800531c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e24c      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005256:	d106      	bne.n	8005266 <HAL_RCC_OscConfig+0x76>
 8005258:	4b80      	ldr	r3, [pc, #512]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a7f      	ldr	r2, [pc, #508]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e02e      	b.n	80052c4 <HAL_RCC_OscConfig+0xd4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0x98>
 800526e:	4b7b      	ldr	r3, [pc, #492]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7a      	ldr	r2, [pc, #488]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b78      	ldr	r3, [pc, #480]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a77      	ldr	r2, [pc, #476]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e01d      	b.n	80052c4 <HAL_RCC_OscConfig+0xd4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0xbc>
 8005292:	4b72      	ldr	r3, [pc, #456]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a71      	ldr	r2, [pc, #452]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6e      	ldr	r2, [pc, #440]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0xd4>
 80052ac:	4b6b      	ldr	r3, [pc, #428]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6a      	ldr	r2, [pc, #424]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b68      	ldr	r3, [pc, #416]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a67      	ldr	r2, [pc, #412]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fc fdac 	bl	8001e28 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fc fda8 	bl	8001e28 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e200      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b5d      	ldr	r3, [pc, #372]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0xe4>
 80052f2:	e014      	b.n	800531e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc fd98 	bl	8001e28 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fc fd94 	bl	8001e28 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e1ec      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530e:	4b53      	ldr	r3, [pc, #332]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x10c>
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d063      	beq.n	80053f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800532a:	4b4c      	ldr	r3, [pc, #304]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005336:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b08      	cmp	r3, #8
 8005340:	d11c      	bne.n	800537c <HAL_RCC_OscConfig+0x18c>
 8005342:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d116      	bne.n	800537c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	4b43      	ldr	r3, [pc, #268]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_RCC_OscConfig+0x176>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d001      	beq.n	8005366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e1c0      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005366:	4b3d      	ldr	r3, [pc, #244]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4939      	ldr	r1, [pc, #228]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537a:	e03a      	b.n	80053f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <HAL_RCC_OscConfig+0x270>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fc fd4d 	bl	8001e28 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005392:	f7fc fd49 	bl	8001e28 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1a1      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a4:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b0:	4b2a      	ldr	r3, [pc, #168]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4927      	ldr	r1, [pc, #156]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c6:	4b26      	ldr	r3, [pc, #152]	@ (8005460 <HAL_RCC_OscConfig+0x270>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fc fd2c 	bl	8001e28 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d4:	f7fc fd28 	bl	8001e28 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e180      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e6:	4b1d      	ldr	r3, [pc, #116]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03a      	beq.n	8005474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d019      	beq.n	800543a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005406:	4b17      	ldr	r3, [pc, #92]	@ (8005464 <HAL_RCC_OscConfig+0x274>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540c:	f7fc fd0c 	bl	8001e28 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005414:	f7fc fd08 	bl	8001e28 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e160      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005426:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <HAL_RCC_OscConfig+0x26c>)
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005432:	2001      	movs	r0, #1
 8005434:	f000 fb20 	bl	8005a78 <RCC_Delay>
 8005438:	e01c      	b.n	8005474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800543a:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <HAL_RCC_OscConfig+0x274>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005440:	f7fc fcf2 	bl	8001e28 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005446:	e00f      	b.n	8005468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005448:	f7fc fcee 	bl	8001e28 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d908      	bls.n	8005468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e146      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	42420000 	.word	0x42420000
 8005464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005468:	4b92      	ldr	r3, [pc, #584]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e9      	bne.n	8005448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a6 	beq.w	80055ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005486:	4b8b      	ldr	r3, [pc, #556]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b88      	ldr	r3, [pc, #544]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	4a87      	ldr	r2, [pc, #540]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	61d3      	str	r3, [r2, #28]
 800549e:	4b85      	ldr	r3, [pc, #532]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b82      	ldr	r3, [pc, #520]	@ (80056b8 <HAL_RCC_OscConfig+0x4c8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b7f      	ldr	r3, [pc, #508]	@ (80056b8 <HAL_RCC_OscConfig+0x4c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a7e      	ldr	r2, [pc, #504]	@ (80056b8 <HAL_RCC_OscConfig+0x4c8>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fc fcaf 	bl	8001e28 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fc fcab 	bl	8001e28 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b64      	cmp	r3, #100	@ 0x64
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e103      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b75      	ldr	r3, [pc, #468]	@ (80056b8 <HAL_RCC_OscConfig+0x4c8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x312>
 80054f4:	4b6f      	ldr	r3, [pc, #444]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4a6e      	ldr	r2, [pc, #440]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6213      	str	r3, [r2, #32]
 8005500:	e02d      	b.n	800555e <HAL_RCC_OscConfig+0x36e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x334>
 800550a:	4b6a      	ldr	r3, [pc, #424]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4a69      	ldr	r2, [pc, #420]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6213      	str	r3, [r2, #32]
 8005516:	4b67      	ldr	r3, [pc, #412]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4a66      	ldr	r2, [pc, #408]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	6213      	str	r3, [r2, #32]
 8005522:	e01c      	b.n	800555e <HAL_RCC_OscConfig+0x36e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b05      	cmp	r3, #5
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_OscConfig+0x356>
 800552c:	4b61      	ldr	r3, [pc, #388]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4a60      	ldr	r2, [pc, #384]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6213      	str	r3, [r2, #32]
 8005538:	4b5e      	ldr	r3, [pc, #376]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4a5d      	ldr	r2, [pc, #372]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6213      	str	r3, [r2, #32]
 8005544:	e00b      	b.n	800555e <HAL_RCC_OscConfig+0x36e>
 8005546:	4b5b      	ldr	r3, [pc, #364]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	4a5a      	ldr	r2, [pc, #360]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	6213      	str	r3, [r2, #32]
 8005552:	4b58      	ldr	r3, [pc, #352]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	4a57      	ldr	r2, [pc, #348]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005558:	f023 0304 	bic.w	r3, r3, #4
 800555c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fc fc5f 	bl	8001e28 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556c:	e00a      	b.n	8005584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f7fc fc5b 	bl	8001e28 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0b1      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	4b4b      	ldr	r3, [pc, #300]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ee      	beq.n	800556e <HAL_RCC_OscConfig+0x37e>
 8005590:	e014      	b.n	80055bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005592:	f7fc fc49 	bl	8001e28 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fc fc45 	bl	8001e28 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e09b      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b0:	4b40      	ldr	r3, [pc, #256]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ee      	bne.n	800559a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d105      	bne.n	80055ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c2:	4b3c      	ldr	r3, [pc, #240]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	4a3b      	ldr	r2, [pc, #236]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80055c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8087 	beq.w	80056e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d8:	4b36      	ldr	r3, [pc, #216]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d061      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d146      	bne.n	800567a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ec:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <HAL_RCC_OscConfig+0x4cc>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fc fc19 	bl	8001e28 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fa:	f7fc fc15 	bl	8001e28 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e06d      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800560c:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f0      	bne.n	80055fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d108      	bne.n	8005634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005622:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4921      	ldr	r1, [pc, #132]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005634:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a19      	ldr	r1, [r3, #32]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	430b      	orrs	r3, r1
 8005646:	491b      	ldr	r1, [pc, #108]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <HAL_RCC_OscConfig+0x4cc>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7fc fbe9 	bl	8001e28 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565a:	f7fc fbe5 	bl	8001e28 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e03d      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x46a>
 8005678:	e035      	b.n	80056e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <HAL_RCC_OscConfig+0x4cc>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fc fbd2 	bl	8001e28 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc fbce 	bl	8001e28 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e026      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800569a:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCC_OscConfig+0x4c4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x498>
 80056a6:	e01e      	b.n	80056e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e019      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40007000 	.word	0x40007000
 80056bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <HAL_RCC_OscConfig+0x500>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d106      	bne.n	80056e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0d0      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b6a      	ldr	r3, [pc, #424]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d910      	bls.n	8005738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b67      	ldr	r3, [pc, #412]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 0207 	bic.w	r2, r3, #7
 800571e:	4965      	ldr	r1, [pc, #404]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b63      	ldr	r3, [pc, #396]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b8      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005750:	4b59      	ldr	r3, [pc, #356]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4a58      	ldr	r2, [pc, #352]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800575a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005768:	4b53      	ldr	r3, [pc, #332]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4a52      	ldr	r2, [pc, #328]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800576e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005772:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b50      	ldr	r3, [pc, #320]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	494d      	ldr	r1, [pc, #308]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d040      	beq.n	8005814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	4b47      	ldr	r3, [pc, #284]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d115      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e07f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b41      	ldr	r3, [pc, #260]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e073      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06b      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4936      	ldr	r1, [pc, #216]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fc fb20 	bl	8001e28 <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fc fb1c 	bl	8001e28 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e053      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2d      	ldr	r3, [pc, #180]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b27      	ldr	r3, [pc, #156]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d210      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b24      	ldr	r3, [pc, #144]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 0207 	bic.w	r2, r3, #7
 800582a:	4922      	ldr	r1, [pc, #136]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e032      	b.n	80058aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4916      	ldr	r1, [pc, #88]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800586e:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	490e      	ldr	r1, [pc, #56]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005882:	f000 f82d 	bl	80058e0 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	490a      	ldr	r1, [pc, #40]	@ (80058bc <HAL_RCC_ClockConfig+0x1c8>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a09      	ldr	r2, [pc, #36]	@ (80058c0 <HAL_RCC_ClockConfig+0x1cc>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <HAL_RCC_ClockConfig+0x1d0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fb fc8c 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40022000 	.word	0x40022000
 80058b8:	40021000 	.word	0x40021000
 80058bc:	0800dba8 	.word	0x0800dba8
 80058c0:	20000000 	.word	0x20000000
 80058c4:	20000008 	.word	0x20000008

080058c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_RCC_EnableCSS+0x14>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	4242004c 	.word	0x4242004c

080058e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x94>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b04      	cmp	r3, #4
 8005908:	d002      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x30>
 800590a:	2b08      	cmp	r3, #8
 800590c:	d003      	beq.n	8005916 <HAL_RCC_GetSysClockFreq+0x36>
 800590e:	e027      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005910:	4b19      	ldr	r3, [pc, #100]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x98>)
 8005912:	613b      	str	r3, [r7, #16]
      break;
 8005914:	e027      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	0c9b      	lsrs	r3, r3, #18
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	4a17      	ldr	r2, [pc, #92]	@ (800597c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005920:	5cd3      	ldrb	r3, [r2, r3]
 8005922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800592e:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x94>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	0c5b      	lsrs	r3, r3, #17
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	4a11      	ldr	r2, [pc, #68]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800593a:	5cd3      	ldrb	r3, [r2, r3]
 800593c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a0d      	ldr	r2, [pc, #52]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x98>)
 8005942:	fb03 f202 	mul.w	r2, r3, r2
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e004      	b.n	800595a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	613b      	str	r3, [r7, #16]
      break;
 800595e:	e002      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005962:	613b      	str	r3, [r7, #16]
      break;
 8005964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005966:	693b      	ldr	r3, [r7, #16]
}
 8005968:	4618      	mov	r0, r3
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	00f42400 	.word	0x00f42400
 800597c:	0800f0a0 	.word	0x0800f0a0
 8005980:	0800f0b0 	.word	0x0800f0b0
 8005984:	003d0900 	.word	0x003d0900
 8005988:	007a1200 	.word	0x007a1200

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b02      	ldr	r3, [pc, #8]	@ (800599c <HAL_RCC_GetHCLKFreq+0x10>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	20000000 	.word	0x20000000

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff2 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	@ (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0800dbb8 	.word	0x0800dbb8

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffde 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	0800dbb8 	.word	0x0800dbb8

080059f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	220f      	movs	r2, #15
 80059fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a00:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <HAL_RCC_GetClockConfig+0x58>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <HAL_RCC_GetClockConfig+0x58>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_GetClockConfig+0x58>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005a24:	4b08      	ldr	r3, [pc, #32]	@ (8005a48 <HAL_RCC_GetClockConfig+0x58>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a32:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0207 	and.w	r2, r3, #7
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40022000 	.word	0x40022000

08005a50 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5c:	2b80      	cmp	r3, #128	@ 0x80
 8005a5e:	d104      	bne.n	8005a6a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005a60:	f000 f828 	bl	8005ab4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005a66:	2280      	movs	r2, #128	@ 0x80
 8005a68:	701a      	strb	r2, [r3, #0]
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	4002100a 	.word	0x4002100a

08005a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a80:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <RCC_Delay+0x34>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab0 <RCC_Delay+0x38>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0a5b      	lsrs	r3, r3, #9
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a94:	bf00      	nop
  }
  while (Delay --);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1e5a      	subs	r2, r3, #1
 8005a9a:	60fa      	str	r2, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f9      	bne.n	8005a94 <RCC_Delay+0x1c>
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	20000000 	.word	0x20000000
 8005ab0:	10624dd3 	.word	0x10624dd3

08005ab4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d07d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005adc:	2300      	movs	r3, #0
 8005ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aec:	4b4c      	ldr	r3, [pc, #304]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	4a4b      	ldr	r2, [pc, #300]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	61d3      	str	r3, [r2, #28]
 8005af8:	4b49      	ldr	r3, [pc, #292]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b08:	4b46      	ldr	r3, [pc, #280]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d118      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b14:	4b43      	ldr	r3, [pc, #268]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a42      	ldr	r2, [pc, #264]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b20:	f7fc f982 	bl	8001e28 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b26:	e008      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b28:	f7fc f97e 	bl	8001e28 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	@ 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e06d      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02e      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d027      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b64:	4b2e      	ldr	r3, [pc, #184]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b74:	4b2c      	ldr	r3, [pc, #176]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b7a:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d014      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fc f94d 	bl	8001e28 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fc f949 	bl	8001e28 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e036      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4917      	ldr	r1, [pc, #92]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bcc:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	490b      	ldr	r1, [pc, #44]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	4904      	ldr	r1, [pc, #16]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40007000 	.word	0x40007000
 8005c28:	42420440 	.word	0x42420440

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e041      	b.n	8005cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f839 	bl	8005cca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 f9b4 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e03a      	b.n	8005d6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <HAL_TIM_Base_Start_IT+0x98>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_TIM_Base_Start_IT+0x58>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIM_Base_Start_IT+0x58>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a14      	ldr	r2, [pc, #80]	@ (8005d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIM_Base_Start_IT+0x58>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d111      	bne.n	8005d58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d010      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d56:	e007      	b.n	8005d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800

08005d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0202 	mvn.w	r2, #2
 8005dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f8ed 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8e0 	bl	8005f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8ef 	bl	8005fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0204 	mvn.w	r2, #4
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8c3 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8b6 	bl	8005f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8c5 	bl	8005fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0208 	mvn.w	r2, #8
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f899 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f88c 	bl	8005f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f89b 	bl	8005fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0210 	mvn.w	r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2208      	movs	r2, #8
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f86f 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f862 	bl	8005f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f871 	bl	8005fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0201 	mvn.w	r2, #1
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb f856 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0e:	2b80      	cmp	r3, #128	@ 0x80
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	2b80      	cmp	r3, #128	@ 0x80
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8bf 	bl	80060ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f835 	bl	8005fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d10e      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0220 	mvn.w	r2, #32
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f88a 	bl	800609c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a29      	ldr	r2, [pc, #164]	@ (8006090 <TIM_Base_SetConfig+0xb8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_Base_SetConfig+0x30>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff6:	d007      	beq.n	8006008 <TIM_Base_SetConfig+0x30>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a26      	ldr	r2, [pc, #152]	@ (8006094 <TIM_Base_SetConfig+0xbc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0x30>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a25      	ldr	r2, [pc, #148]	@ (8006098 <TIM_Base_SetConfig+0xc0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <TIM_Base_SetConfig+0xb8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_Base_SetConfig+0x62>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0x62>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <TIM_Base_SetConfig+0xbc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0x62>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a18      	ldr	r2, [pc, #96]	@ (8006098 <TIM_Base_SetConfig+0xc0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a07      	ldr	r2, [pc, #28]	@ (8006090 <TIM_Base_SetConfig+0xb8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d103      	bne.n	8006080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40000400 	.word	0x40000400
 8006098:	40000800 	.word	0x40000800

0800609c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e042      	b.n	8006158 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb f81e 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	@ 0x24
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f91d 	bl	8006344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	@ 0x28
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	d16d      	bne.n	800625c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Transmit+0x2c>
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e066      	b.n	800625e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2221      	movs	r2, #33	@ 0x21
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619e:	f7fb fe43 	bl	8001e28 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x6c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d4:	e02a      	b.n	800622c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	@ 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f840 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e036      	b.n	800625e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3302      	adds	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e007      	b.n	800621e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	3301      	adds	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1cf      	bne.n	80061d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	2140      	movs	r1, #64	@ 0x40
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f810 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e006      	b.n	800625e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b090      	sub	sp, #64	@ 0x40
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006276:	e050      	b.n	800631a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800627e:	d04c      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0x30>
 8006286:	f7fb fdcf 	bl	8001e28 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006292:	429a      	cmp	r2, r3
 8006294:	d241      	bcs.n	800631a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80062b8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3314      	adds	r3, #20
 80062d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	613b      	str	r3, [r7, #16]
   return(result);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3314      	adds	r3, #20
 80062e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ea:	623a      	str	r2, [r7, #32]
 80062ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	69f9      	ldr	r1, [r7, #28]
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e00f      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	429a      	cmp	r2, r3
 8006336:	d09f      	beq.n	8006278 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3740      	adds	r7, #64	@ 0x40
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800637e:	f023 030c 	bic.w	r3, r3, #12
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	430b      	orrs	r3, r1
 800638a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006458 <UART_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d103      	bne.n	80063b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7ff fb0c 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	e002      	b.n	80063ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7ff faf4 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 80063b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009a      	lsls	r2, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	4a22      	ldr	r2, [pc, #136]	@ (800645c <UART_SetConfig+0x118>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	0119      	lsls	r1, r3, #4
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009a      	lsls	r2, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <UART_SetConfig+0x118>)
 80063f2:	fba3 0302 	umull	r0, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2064      	movs	r0, #100	@ 0x64
 80063fa:	fb00 f303 	mul.w	r3, r0, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	3332      	adds	r3, #50	@ 0x32
 8006404:	4a15      	ldr	r2, [pc, #84]	@ (800645c <UART_SetConfig+0x118>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006410:	4419      	add	r1, r3
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009a      	lsls	r2, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	fbb2 f2f3 	udiv	r2, r2, r3
 8006428:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <UART_SetConfig+0x118>)
 800642a:	fba3 0302 	umull	r0, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	2064      	movs	r0, #100	@ 0x64
 8006432:	fb00 f303 	mul.w	r3, r0, r3
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	3332      	adds	r3, #50	@ 0x32
 800643c:	4a07      	ldr	r2, [pc, #28]	@ (800645c <UART_SetConfig+0x118>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	f003 020f 	and.w	r2, r3, #15
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	440a      	add	r2, r1
 800644e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40013800 	.word	0x40013800
 800645c:	51eb851f 	.word	0x51eb851f

08006460 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006460:	b084      	sub	sp, #16
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	f107 0014 	add.w	r0, r7, #20
 800646e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	b004      	add	sp, #16
 800647e:	4770      	bx	lr

08006480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006490:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006494:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	b29a      	uxth	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064b4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	43db      	mvns	r3, r3
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4013      	ands	r3, r2
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064f8:	b084      	sub	sp, #16
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	f107 0014 	add.w	r0, r7, #20
 8006506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	b004      	add	sp, #16
 8006536:	4770      	bx	lr

08006538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
	...

08006564 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006564:	b480      	push	{r7}
 8006566:	b09d      	sub	sp, #116	@ 0x74
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	78db      	ldrb	r3, [r3, #3]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d81f      	bhi.n	80065d6 <USB_ActivateEndpoint+0x72>
 8006596:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <USB_ActivateEndpoint+0x38>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065df 	.word	0x080065df
 80065a8:	080065bb 	.word	0x080065bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065b8:	e012      	b.n	80065e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80065c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065c6:	e00b      	b.n	80065e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065d4:	e004      	b.n	80065e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065dc:	e000      	b.n	80065e0 <USB_ActivateEndpoint+0x7c>
      break;
 80065de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	b29b      	uxth	r3, r3
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800663e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	7b1b      	ldrb	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8178 	bne.w	8006940 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8084 	beq.w	8006762 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	4413      	add	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	011a      	lsls	r2, r3, #4
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	88db      	ldrh	r3, [r3, #6]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	827b      	strh	r3, [r7, #18]
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01b      	beq.n	80066de <USB_ActivateEndpoint+0x17a>
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066bc:	823b      	strh	r3, [r7, #16]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8a3b      	ldrh	r3, [r7, #16]
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	78db      	ldrb	r3, [r3, #3]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d020      	beq.n	8006728 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fc:	81bb      	strh	r3, [r7, #12]
 80066fe:	89bb      	ldrh	r3, [r7, #12]
 8006700:	f083 0320 	eor.w	r3, r3, #32
 8006704:	81bb      	strh	r3, [r7, #12]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	89bb      	ldrh	r3, [r7, #12]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
 8006726:	e2d5      	b.n	8006cd4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673e:	81fb      	strh	r3, [r7, #14]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	89fb      	ldrh	r3, [r7, #14]
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
 8006760:	e2b8      	b.n	8006cd4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676c:	b29b      	uxth	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	4413      	add	r3, r2
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	011a      	lsls	r2, r3, #4
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	4413      	add	r3, r2
 8006780:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	4413      	add	r3, r2
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	011a      	lsls	r2, r3, #4
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80067d0:	d91d      	bls.n	800680e <USB_ActivateEndpoint+0x2aa>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <USB_ActivateEndpoint+0x288>
 80067e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067e8:	3b01      	subs	r3, #1
 80067ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006806:	b29a      	uxth	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e026      	b.n	800685c <USB_ActivateEndpoint+0x2f8>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <USB_ActivateEndpoint+0x2c8>
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006824:	b29a      	uxth	r2, r3
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e017      	b.n	800685c <USB_ActivateEndpoint+0x2f8>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <USB_ActivateEndpoint+0x2e2>
 8006840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006842:	3301      	adds	r3, #1
 8006844:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29a      	uxth	r2, r3
 800684c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29b      	uxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	847b      	strh	r3, [r7, #34]	@ 0x22
 800686a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800686c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01b      	beq.n	80068ac <USB_ActivateEndpoint+0x348>
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688a:	843b      	strh	r3, [r7, #32]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	8c3b      	ldrh	r3, [r7, #32]
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d124      	bne.n	80068fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	83bb      	strh	r3, [r7, #28]
 80068cc:	8bbb      	ldrh	r3, [r7, #28]
 80068ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068d2:	83bb      	strh	r3, [r7, #28]
 80068d4:	8bbb      	ldrh	r3, [r7, #28]
 80068d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068da:	83bb      	strh	r3, [r7, #28]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	8bbb      	ldrh	r3, [r7, #28]
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]
 80068fc:	e1ea      	b.n	8006cd4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006914:	83fb      	strh	r3, [r7, #30]
 8006916:	8bfb      	ldrh	r3, [r7, #30]
 8006918:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800691c:	83fb      	strh	r3, [r7, #30]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	8bfb      	ldrh	r3, [r7, #30]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e1c9      	b.n	8006cd4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	78db      	ldrb	r3, [r3, #3]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d11e      	bne.n	8006986 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006978:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800697c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]
 8006984:	e01d      	b.n	80069c2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d2:	4413      	add	r3, r2
 80069d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	011a      	lsls	r2, r3, #4
 80069dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	891b      	ldrh	r3, [r3, #8]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a06:	4413      	add	r3, r2
 8006a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	895b      	ldrh	r3, [r3, #10]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a28:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 8093 	bne.w	8006b5a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01b      	beq.n	8006a88 <USB_ActivateEndpoint+0x524>
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01b      	beq.n	8006ad8 <USB_ActivateEndpoint+0x574>
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006af0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006af2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006af6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006af8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006afa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006afe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b36:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]
 8006b58:	e0bc      	b.n	8006cd4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01d      	beq.n	8006bb2 <USB_ActivateEndpoint+0x64e>
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006bc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01d      	beq.n	8006c0a <USB_ActivateEndpoint+0x6a6>
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	78db      	ldrb	r3, [r3, #3]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d024      	beq.n	8006c5c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c30:	f083 0320 	eor.w	r3, r3, #32
 8006c34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]
 8006c5a:	e01d      	b.n	8006c98 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3774      	adds	r7, #116	@ 0x74
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b08d      	sub	sp, #52	@ 0x34
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	7b1b      	ldrb	r3, [r3, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 808e 	bne.w	8006e14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d044      	beq.n	8006d8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	81bb      	strh	r3, [r7, #12]
 8006d0e:	89bb      	ldrh	r3, [r7, #12]
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <USB_DeactivateEndpoint+0x6c>
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2e:	817b      	strh	r3, [r7, #10]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	897b      	ldrh	r3, [r7, #10]
 8006d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d66:	813b      	strh	r3, [r7, #8]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	893b      	ldrh	r3, [r7, #8]
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
 8006d88:	e192      	b.n	80070b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	827b      	strh	r3, [r7, #18]
 8006d98:	8a7b      	ldrh	r3, [r7, #18]
 8006d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01b      	beq.n	8006dda <USB_DeactivateEndpoint+0xf6>
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db8:	823b      	strh	r3, [r7, #16]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8a3b      	ldrh	r3, [r7, #16]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df0:	81fb      	strh	r3, [r7, #14]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]
 8006e12:	e14d      	b.n	80070b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f040 80a5 	bne.w	8006f68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	843b      	strh	r3, [r7, #32]
 8006e2c:	8c3b      	ldrh	r3, [r7, #32]
 8006e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01b      	beq.n	8006e6e <USB_DeactivateEndpoint+0x18a>
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4c:	83fb      	strh	r3, [r7, #30]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	8bfb      	ldrh	r3, [r7, #30]
 8006e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	83bb      	strh	r3, [r7, #28]
 8006e7c:	8bbb      	ldrh	r3, [r7, #28]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01b      	beq.n	8006ebe <USB_DeactivateEndpoint+0x1da>
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9c:	837b      	strh	r3, [r7, #26]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	8b7b      	ldrh	r3, [r7, #26]
 8006eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed4:	833b      	strh	r3, [r7, #24]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	8b3b      	ldrh	r3, [r7, #24]
 8006ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0c:	82fb      	strh	r3, [r7, #22]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8afb      	ldrh	r3, [r7, #22]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f44:	82bb      	strh	r3, [r7, #20]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	8abb      	ldrh	r3, [r7, #20]
 8006f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	8013      	strh	r3, [r2, #0]
 8006f66:	e0a3      	b.n	80070b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01b      	beq.n	8006fb8 <USB_DeactivateEndpoint+0x2d4>
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	441a      	add	r2, r3
 8006fa2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006fc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <USB_DeactivateEndpoint+0x324>
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007000:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007004:	b29b      	uxth	r3, r3
 8007006:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800701e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800702c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703c:	b29b      	uxth	r3, r3
 800703e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007056:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3734      	adds	r7, #52	@ 0x34
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0c2      	sub	sp, #264	@ 0x108
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ca:	6018      	str	r0, [r3, #0]
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	f040 86b7 	bne.w	8007e56 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	429a      	cmp	r2, r3
 8007102:	d908      	bls.n	8007116 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007114:	e007      	b.n	8007126 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	7b1b      	ldrb	r3, [r3, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d13a      	bne.n	80071ac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6959      	ldr	r1, [r3, #20]
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	88da      	ldrh	r2, [r3, #6]
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	b29b      	uxth	r3, r3
 8007154:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007158:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800715c:	6800      	ldr	r0, [r0, #0]
 800715e:	f001 fc9c 	bl	8008a9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	4413      	add	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	011a      	lsls	r2, r3, #4
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	4413      	add	r3, r2
 8007198:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	f000 be1f 	b.w	8007dea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	78db      	ldrb	r3, [r3, #3]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f040 8462 	bne.w	8007a82 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f240 83df 	bls.w	800799a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007202:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800722c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007248:	1ad2      	subs	r2, r2, r3
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 81c7 	beq.w	800760c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	633b      	str	r3, [r7, #48]	@ 0x30
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d177      	bne.n	800738a <USB_EPStartXfer+0x2ce>
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	4413      	add	r3, r2
 80072bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	011a      	lsls	r2, r3, #4
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ec:	d921      	bls.n	8007332 <USB_EPStartXfer+0x276>
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <USB_EPStartXfer+0x252>
 8007304:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007308:	3b01      	subs	r3, #1
 800730a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29a      	uxth	r2, r3
 8007314:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007318:	b29b      	uxth	r3, r3
 800731a:	029b      	lsls	r3, r3, #10
 800731c:	b29b      	uxth	r3, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	b29b      	uxth	r3, r3
 8007322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732a:	b29a      	uxth	r2, r3
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	e050      	b.n	80073d4 <USB_EPStartXfer+0x318>
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <USB_EPStartXfer+0x294>
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e041      	b.n	80073d4 <USB_EPStartXfer+0x318>
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <USB_EPStartXfer+0x2b4>
 8007366:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800736a:	3301      	adds	r3, #1
 800736c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29b      	uxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e024      	b.n	80073d4 <USB_EPStartXfer+0x318>
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d11c      	bne.n	80073d4 <USB_EPStartXfer+0x318>
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	4413      	add	r3, r2
 80073b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	011a      	lsls	r2, r3, #4
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	4413      	add	r3, r2
 80073c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6959      	ldr	r1, [r3, #20]
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007402:	6800      	ldr	r0, [r0, #0]
 8007404:	f001 fb49 	bl	8008a9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695a      	ldr	r2, [r3, #20]
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	441a      	add	r2, r3
 800741a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a1a      	ldr	r2, [r3, #32]
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d90f      	bls.n	8007462 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6a1a      	ldr	r2, [r3, #32]
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	1ad2      	subs	r2, r2, r3
 8007454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	621a      	str	r2, [r3, #32]
 8007460:	e00e      	b.n	8007480 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2200      	movs	r2, #0
 800747e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d177      	bne.n	8007580 <USB_EPStartXfer+0x4c4>
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	4413      	add	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4413      	add	r3, r2
 80074c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	801a      	strh	r2, [r3, #0]
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e2:	d921      	bls.n	8007528 <USB_EPStartXfer+0x46c>
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USB_EPStartXfer+0x448>
 80074fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fe:	3b01      	subs	r3, #1
 8007500:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29a      	uxth	r2, r3
 800750a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29b      	uxth	r3, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	b29b      	uxth	r3, r3
 8007518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007520:	b29a      	uxth	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	e056      	b.n	80075d6 <USB_EPStartXfer+0x51a>
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <USB_EPStartXfer+0x48a>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e047      	b.n	80075d6 <USB_EPStartXfer+0x51a>
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <USB_EPStartXfer+0x4aa>
 800755c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007560:	3301      	adds	r3, #1
 8007562:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29a      	uxth	r2, r3
 800756c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29b      	uxth	r3, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	b29a      	uxth	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e02a      	b.n	80075d6 <USB_EPStartXfer+0x51a>
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d122      	bne.n	80075d6 <USB_EPStartXfer+0x51a>
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	623b      	str	r3, [r7, #32]
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	4413      	add	r3, r2
 80075b2:	623b      	str	r3, [r7, #32]
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	011a      	lsls	r2, r3, #4
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	891b      	ldrh	r3, [r3, #8]
 80075e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6959      	ldr	r1, [r3, #20]
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007600:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	f001 fa48 	bl	8008a9a <USB_WritePMA>
 800760a:	e3ee      	b.n	8007dea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d177      	bne.n	800770c <USB_EPStartXfer+0x650>
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800763c:	4413      	add	r3, r2
 800763e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	011a      	lsls	r2, r3, #4
 800764e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007650:	4413      	add	r3, r2
 8007652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007662:	b29a      	uxth	r2, r3
 8007664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	2b3e      	cmp	r3, #62	@ 0x3e
 800766e:	d921      	bls.n	80076b4 <USB_EPStartXfer+0x5f8>
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_EPStartXfer+0x5d4>
 8007686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800768a:	3b01      	subs	r3, #1
 800768c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800769a:	b29b      	uxth	r3, r3
 800769c:	029b      	lsls	r3, r3, #10
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e056      	b.n	8007762 <USB_EPStartXfer+0x6a6>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <USB_EPStartXfer+0x616>
 80076bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e047      	b.n	8007762 <USB_EPStartXfer+0x6a6>
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0x636>
 80076e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	029b      	lsls	r3, r3, #10
 8007700:	b29b      	uxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b29a      	uxth	r2, r3
 8007706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	e02a      	b.n	8007762 <USB_EPStartXfer+0x6a6>
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d122      	bne.n	8007762 <USB_EPStartXfer+0x6a6>
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	653b      	str	r3, [r7, #80]	@ 0x50
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007736:	b29b      	uxth	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773c:	4413      	add	r3, r2
 800773e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	011a      	lsls	r2, r3, #4
 800774e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007750:	4413      	add	r3, r2
 8007752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	b29a      	uxth	r2, r3
 800775e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	891b      	ldrh	r3, [r3, #8]
 800776e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6959      	ldr	r1, [r3, #20]
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007782:	b29b      	uxth	r3, r3
 8007784:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007788:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800778c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007790:	6800      	ldr	r0, [r0, #0]
 8007792:	f001 f982 	bl	8008a9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	441a      	add	r2, r3
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d90f      	bls.n	80077f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	621a      	str	r2, [r3, #32]
 80077ee:	e00e      	b.n	800780e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2200      	movs	r2, #0
 800780c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	643b      	str	r3, [r7, #64]	@ 0x40
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d177      	bne.n	800791a <USB_EPStartXfer+0x85e>
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007844:	b29b      	uxth	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784a:	4413      	add	r3, r2
 800784c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	011a      	lsls	r2, r3, #4
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	4413      	add	r3, r2
 8007860:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007870:	b29a      	uxth	r2, r3
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	2b3e      	cmp	r3, #62	@ 0x3e
 800787c:	d921      	bls.n	80078c2 <USB_EPStartXfer+0x806>
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <USB_EPStartXfer+0x7e2>
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	3b01      	subs	r3, #1
 800789a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800789e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	029b      	lsls	r3, r3, #10
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e050      	b.n	8007964 <USB_EPStartXfer+0x8a8>
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <USB_EPStartXfer+0x824>
 80078ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e041      	b.n	8007964 <USB_EPStartXfer+0x8a8>
 80078e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <USB_EPStartXfer+0x844>
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fa:	3301      	adds	r3, #1
 80078fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	b29b      	uxth	r3, r3
 800790c:	029b      	lsls	r3, r3, #10
 800790e:	b29b      	uxth	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b29a      	uxth	r2, r3
 8007914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e024      	b.n	8007964 <USB_EPStartXfer+0x8a8>
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d11c      	bne.n	8007964 <USB_EPStartXfer+0x8a8>
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793e:	4413      	add	r3, r2
 8007940:	643b      	str	r3, [r7, #64]	@ 0x40
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	011a      	lsls	r2, r3, #4
 8007950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007952:	4413      	add	r3, r2
 8007954:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	b29a      	uxth	r2, r3
 8007960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007962:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	895b      	ldrh	r3, [r3, #10]
 8007970:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6959      	ldr	r1, [r3, #20]
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	b29b      	uxth	r3, r3
 8007986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800798a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800798e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	f001 f881 	bl	8008a9a <USB_WritePMA>
 8007998:	e227      	b.n	8007dea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800799a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a26:	4413      	add	r3, r2
 8007a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	011a      	lsls	r2, r3, #4
 8007a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	891b      	ldrh	r3, [r3, #8]
 8007a58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6959      	ldr	r1, [r3, #20]
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	f001 f80d 	bl	8008a9a <USB_WritePMA>
 8007a80:	e1b3      	b.n	8007dea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	1ad2      	subs	r2, r2, r3
 8007a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80c6 	beq.w	8007c54 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d177      	bne.n	8007bd4 <USB_EPStartXfer+0xb18>
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b04:	4413      	add	r3, r2
 8007b06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	011a      	lsls	r2, r3, #4
 8007b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b36:	d921      	bls.n	8007b7c <USB_EPStartXfer+0xac0>
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <USB_EPStartXfer+0xa9c>
 8007b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b52:	3b01      	subs	r3, #1
 8007b54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	029b      	lsls	r3, r3, #10
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e050      	b.n	8007c1e <USB_EPStartXfer+0xb62>
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <USB_EPStartXfer+0xade>
 8007b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e041      	b.n	8007c1e <USB_EPStartXfer+0xb62>
 8007b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <USB_EPStartXfer+0xafe>
 8007bb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e024      	b.n	8007c1e <USB_EPStartXfer+0xb62>
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d11c      	bne.n	8007c1e <USB_EPStartXfer+0xb62>
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf8:	4413      	add	r3, r2
 8007bfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	011a      	lsls	r2, r3, #4
 8007c0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	895b      	ldrh	r3, [r3, #10]
 8007c2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6959      	ldr	r1, [r3, #20]
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f000 ff24 	bl	8008a9a <USB_WritePMA>
 8007c52:	e0ca      	b.n	8007dea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d177      	bne.n	8007d54 <USB_EPStartXfer+0xc98>
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c84:	4413      	add	r3, r2
 8007c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	011a      	lsls	r2, r3, #4
 8007c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cb6:	d921      	bls.n	8007cfc <USB_EPStartXfer+0xc40>
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <USB_EPStartXfer+0xc1c>
 8007cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	029b      	lsls	r3, r3, #10
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf8:	801a      	strh	r2, [r3, #0]
 8007cfa:	e05c      	b.n	8007db6 <USB_EPStartXfer+0xcfa>
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <USB_EPStartXfer+0xc5e>
 8007d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	e04d      	b.n	8007db6 <USB_EPStartXfer+0xcfa>
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <USB_EPStartXfer+0xc7e>
 8007d30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	e030      	b.n	8007db6 <USB_EPStartXfer+0xcfa>
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d128      	bne.n	8007db6 <USB_EPStartXfer+0xcfa>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	011a      	lsls	r2, r3, #4
 8007d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007da6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007db4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6959      	ldr	r1, [r3, #20]
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ddc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007de0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007de4:	6800      	ldr	r0, [r0, #0]
 8007de6:	f000 fe58 	bl	8008a9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e10:	817b      	strh	r3, [r7, #10]
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	f083 0310 	eor.w	r3, r3, #16
 8007e18:	817b      	strh	r3, [r7, #10]
 8007e1a:	897b      	ldrh	r3, [r7, #10]
 8007e1c:	f083 0320 	eor.w	r3, r3, #32
 8007e20:	817b      	strh	r3, [r7, #10]
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	897b      	ldrh	r3, [r7, #10]
 8007e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	8013      	strh	r3, [r2, #0]
 8007e52:	f000 bcde 	b.w	8008812 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	7b1b      	ldrb	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 80bb 	bne.w	8007fde <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d917      	bls.n	8007eb4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	619a      	str	r2, [r3, #24]
 8007eb2:	e00e      	b.n	8007ed2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	011a      	lsls	r2, r3, #4
 8007f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f0e:	4413      	add	r3, r2
 8007f10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f32:	d924      	bls.n	8007f7e <USB_EPStartXfer+0xec2>
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f42:	f003 031f 	and.w	r3, r3, #31
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <USB_EPStartXfer+0xe98>
 8007f4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	029b      	lsls	r3, r3, #10
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	4313      	orrs	r3, r2
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	f000 bc10 	b.w	800879e <USB_EPStartXfer+0x16e2>
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10c      	bne.n	8007fa0 <USB_EPStartXfer+0xee4>
 8007f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	e3fe      	b.n	800879e <USB_EPStartXfer+0x16e2>
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <USB_EPStartXfer+0xf04>
 8007fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fba:	3301      	adds	r3, #1
 8007fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	e3df      	b.n	800879e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	f040 8218 	bne.w	8008420 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 809d 	bne.w	800813c <USB_EPStartXfer+0x1080>
 8008002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800801e:	b29b      	uxth	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008026:	4413      	add	r3, r2
 8008028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800802c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	011a      	lsls	r2, r3, #4
 800803a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800803e:	4413      	add	r3, r2
 8008040:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b3e      	cmp	r3, #62	@ 0x3e
 800806a:	d92b      	bls.n	80080c4 <USB_EPStartXfer+0x1008>
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800807e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	2b00      	cmp	r3, #0
 8008090:	d104      	bne.n	800809c <USB_EPStartXfer+0xfe0>
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008096:	3b01      	subs	r3, #1
 8008098:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800809c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	029b      	lsls	r3, r3, #10
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e070      	b.n	80081a6 <USB_EPStartXfer+0x10ea>
 80080c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10c      	bne.n	80080ee <USB_EPStartXfer+0x1032>
 80080d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e05b      	b.n	80081a6 <USB_EPStartXfer+0x10ea>
 80080ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	085b      	lsrs	r3, r3, #1
 80080fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <USB_EPStartXfer+0x1062>
 8008114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008118:	3301      	adds	r3, #1
 800811a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800811e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812a:	b29b      	uxth	r3, r3
 800812c:	029b      	lsls	r3, r3, #10
 800812e:	b29b      	uxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	e034      	b.n	80081a6 <USB_EPStartXfer+0x10ea>
 800813c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d12c      	bne.n	80081a6 <USB_EPStartXfer+0x10ea>
 800814c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800815a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008170:	4413      	add	r3, r2
 8008172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	011a      	lsls	r2, r3, #4
 8008184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008188:	4413      	add	r3, r2
 800818a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800818e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 809d 	bne.w	8008300 <USB_EPStartXfer+0x1244>
 80081c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081ea:	4413      	add	r3, r2
 80081ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	011a      	lsls	r2, r3, #4
 80081fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008202:	4413      	add	r3, r2
 8008204:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800820c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b3e      	cmp	r3, #62	@ 0x3e
 800822e:	d92b      	bls.n	8008288 <USB_EPStartXfer+0x11cc>
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	2b00      	cmp	r3, #0
 8008254:	d104      	bne.n	8008260 <USB_EPStartXfer+0x11a4>
 8008256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800825a:	3b01      	subs	r3, #1
 800825c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29a      	uxth	r2, r3
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826c:	b29b      	uxth	r3, r3
 800826e:	029b      	lsls	r3, r3, #10
 8008270:	b29b      	uxth	r3, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800827a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827e:	b29a      	uxth	r2, r3
 8008280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008284:	801a      	strh	r2, [r3, #0]
 8008286:	e069      	b.n	800835c <USB_EPStartXfer+0x12a0>
 8008288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10c      	bne.n	80082b2 <USB_EPStartXfer+0x11f6>
 8008298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e054      	b.n	800835c <USB_EPStartXfer+0x12a0>
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <USB_EPStartXfer+0x1226>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082dc:	3301      	adds	r3, #1
 80082de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	029b      	lsls	r3, r3, #10
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	4313      	orrs	r3, r2
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	e02d      	b.n	800835c <USB_EPStartXfer+0x12a0>
 8008300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d125      	bne.n	800835c <USB_EPStartXfer+0x12a0>
 8008310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008326:	4413      	add	r3, r2
 8008328:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800832c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	011a      	lsls	r2, r3, #4
 800833a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800833e:	4413      	add	r3, r2
 8008340:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	b29a      	uxth	r2, r3
 8008356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800835a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 8218 	beq.w	800879e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800836e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800838e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <USB_EPStartXfer+0x12ea>
 800839a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f040 81f5 	bne.w	800879e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f040 81ee 	bne.w	800879e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80083c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	441a      	add	r2, r3
 8008406:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800840a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800841a:	b29b      	uxth	r3, r3
 800841c:	8013      	strh	r3, [r2, #0]
 800841e:	e1be      	b.n	800879e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	78db      	ldrb	r3, [r3, #3]
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 81b4 	bne.w	800879a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d917      	bls.n	800847e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800845e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	619a      	str	r2, [r3, #24]
 800847c:	e00e      	b.n	800849c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800847e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800849c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 8085 	bne.w	80085b8 <USB_EPStartXfer+0x14fc>
 80084ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084d2:	4413      	add	r3, r2
 80084d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	011a      	lsls	r2, r3, #4
 80084e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ea:	4413      	add	r3, r2
 80084ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008500:	b29a      	uxth	r2, r3
 8008502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	2b3e      	cmp	r3, #62	@ 0x3e
 800850e:	d923      	bls.n	8008558 <USB_EPStartXfer+0x149c>
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	f003 031f 	and.w	r3, r3, #31
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <USB_EPStartXfer+0x1474>
 8008526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800852a:	3b01      	subs	r3, #1
 800852c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29a      	uxth	r2, r3
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853c:	b29b      	uxth	r3, r3
 800853e:	029b      	lsls	r3, r3, #10
 8008540:	b29b      	uxth	r3, r3
 8008542:	4313      	orrs	r3, r2
 8008544:	b29b      	uxth	r3, r3
 8008546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	e060      	b.n	800861a <USB_EPStartXfer+0x155e>
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <USB_EPStartXfer+0x14be>
 8008560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008570:	b29a      	uxth	r2, r3
 8008572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	e04f      	b.n	800861a <USB_EPStartXfer+0x155e>
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857e:	085b      	lsrs	r3, r3, #1
 8008580:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <USB_EPStartXfer+0x14de>
 8008590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008594:	3301      	adds	r3, #1
 8008596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800859a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	029b      	lsls	r3, r3, #10
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	e030      	b.n	800861a <USB_EPStartXfer+0x155e>
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d128      	bne.n	800861a <USB_EPStartXfer+0x155e>
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085ec:	4413      	add	r3, r2
 80085ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	011a      	lsls	r2, r3, #4
 8008600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008604:	4413      	add	r3, r2
 8008606:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800860a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800860e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008612:	b29a      	uxth	r2, r3
 8008614:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f040 8085 	bne.w	8008744 <USB_EPStartXfer+0x1688>
 800863a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008656:	b29b      	uxth	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800865e:	4413      	add	r3, r2
 8008660:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	011a      	lsls	r2, r3, #4
 8008672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008676:	4413      	add	r3, r2
 8008678:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008698:	2b3e      	cmp	r3, #62	@ 0x3e
 800869a:	d923      	bls.n	80086e4 <USB_EPStartXfer+0x1628>
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <USB_EPStartXfer+0x1600>
 80086b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b6:	3b01      	subs	r3, #1
 80086b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	029b      	lsls	r3, r3, #10
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	e05c      	b.n	800879e <USB_EPStartXfer+0x16e2>
 80086e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10c      	bne.n	8008706 <USB_EPStartXfer+0x164a>
 80086ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e04b      	b.n	800879e <USB_EPStartXfer+0x16e2>
 8008706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <USB_EPStartXfer+0x166a>
 800871c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008720:	3301      	adds	r3, #1
 8008722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008732:	b29b      	uxth	r3, r3
 8008734:	029b      	lsls	r3, r3, #10
 8008736:	b29b      	uxth	r3, r3
 8008738:	4313      	orrs	r3, r2
 800873a:	b29a      	uxth	r2, r3
 800873c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008740:	801a      	strh	r2, [r3, #0]
 8008742:	e02c      	b.n	800879e <USB_EPStartXfer+0x16e2>
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d124      	bne.n	800879e <USB_EPStartXfer+0x16e2>
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008762:	b29b      	uxth	r3, r3
 8008764:	461a      	mov	r2, r3
 8008766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800876a:	4413      	add	r3, r2
 800876c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	011a      	lsls	r2, r3, #4
 800877e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008782:	4413      	add	r3, r2
 8008784:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008788:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008790:	b29a      	uxth	r2, r3
 8008792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	e001      	b.n	800879e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e03a      	b.n	8008814 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800879e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	441a      	add	r2, r3
 80087fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800880a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880e:	b29b      	uxth	r3, r3
 8008810:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d020      	beq.n	8008872 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008846:	81bb      	strh	r3, [r7, #12]
 8008848:	89bb      	ldrh	r3, [r7, #12]
 800884a:	f083 0310 	eor.w	r3, r3, #16
 800884e:	81bb      	strh	r3, [r7, #12]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	89bb      	ldrh	r3, [r7, #12]
 800885c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886c:	b29b      	uxth	r3, r3
 800886e:	8013      	strh	r3, [r2, #0]
 8008870:	e01f      	b.n	80088b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008888:	81fb      	strh	r3, [r7, #14]
 800888a:	89fb      	ldrh	r3, [r7, #14]
 800888c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008890:	81fb      	strh	r3, [r7, #14]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	441a      	add	r2, r3
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr

080088be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088be:	b480      	push	{r7}
 80088c0:	b087      	sub	sp, #28
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	7b1b      	ldrb	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 809d 	bne.w	8008a0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d04c      	beq.n	8008974 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	823b      	strh	r3, [r7, #16]
 80088e8:	8a3b      	ldrh	r3, [r7, #16]
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01b      	beq.n	800892a <USB_EPClearStall+0x6c>
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008908:	81fb      	strh	r3, [r7, #14]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d06c      	beq.n	8008a0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008948:	81bb      	strh	r3, [r7, #12]
 800894a:	89bb      	ldrh	r3, [r7, #12]
 800894c:	f083 0320 	eor.w	r3, r3, #32
 8008950:	81bb      	strh	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	89bb      	ldrh	r3, [r7, #12]
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
 8008972:	e04b      	b.n	8008a0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	82fb      	strh	r3, [r7, #22]
 8008982:	8afb      	ldrh	r3, [r7, #22]
 8008984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01b      	beq.n	80089c4 <USB_EPClearStall+0x106>
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a2:	82bb      	strh	r3, [r7, #20]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	8abb      	ldrh	r3, [r7, #20]
 80089b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089da:	827b      	strh	r3, [r7, #18]
 80089dc:	8a7b      	ldrh	r3, [r7, #18]
 80089de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089e2:	827b      	strh	r3, [r7, #18]
 80089e4:	8a7b      	ldrh	r3, [r7, #18]
 80089e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089ea:	827b      	strh	r3, [r7, #18]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	441a      	add	r2, r3
 80089f6:	8a7b      	ldrh	r3, [r7, #18]
 80089f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2280      	movs	r2, #128	@ 0x80
 8008a2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr

08008a3e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr

08008a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr

08008a9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b08b      	sub	sp, #44	@ 0x2c
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	80fb      	strh	r3, [r7, #6]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ab0:	88bb      	ldrh	r3, [r7, #4]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	085b      	lsrs	r3, r3, #1
 8008ab6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	005a      	lsls	r2, r3, #1
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008acc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ad2:	e01e      	b.n	8008b12 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	3301      	adds	r3, #1
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b21a      	sxth	r2, r3
 8008ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b21b      	sxth	r3, r3
 8008aec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	8a7a      	ldrh	r2, [r7, #18]
 8008af2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	3302      	adds	r3, #2
 8008af8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	3302      	adds	r3, #2
 8008afe:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	3301      	adds	r3, #1
 8008b04:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1dd      	bne.n	8008ad4 <USB_WritePMA+0x3a>
  }
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	372c      	adds	r7, #44	@ 0x2c
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b08b      	sub	sp, #44	@ 0x2c
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4611      	mov	r1, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	460b      	mov	r3, r1
 8008b34:	80fb      	strh	r3, [r7, #6]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b3a:	88bb      	ldrh	r3, [r7, #4]
 8008b3c:	085b      	lsrs	r3, r3, #1
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	005a      	lsls	r2, r3, #1
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b56:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b5c:	e01b      	b.n	8008b96 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	3302      	adds	r3, #2
 8008b6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	3301      	adds	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	3301      	adds	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	3b01      	subs	r3, #1
 8008b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e0      	bne.n	8008b5e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b9c:	88bb      	ldrh	r3, [r7, #4]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	701a      	strb	r2, [r3, #0]
  }
}
 8008bb8:	bf00      	nop
 8008bba:	372c      	adds	r7, #44	@ 0x2c
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr
	...

08008bc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008bc8:	4904      	ldr	r1, [pc, #16]	@ (8008bdc <MX_FATFS_Init+0x18>)
 8008bca:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <MX_FATFS_Init+0x1c>)
 8008bcc:	f002 fb4a 	bl	800b264 <FATFS_LinkDriver>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4b03      	ldr	r3, [pc, #12]	@ (8008be4 <MX_FATFS_Init+0x20>)
 8008bd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008bd8:	bf00      	nop
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	200009d8 	.word	0x200009d8
 8008be0:	20000010 	.word	0x20000010
 8008be4:	200009d4 	.word	0x200009d4

08008be8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008bf2:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <USER_initialize+0x20>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008bf8:	4b03      	ldr	r3, [pc, #12]	@ (8008c08 <USER_initialize+0x20>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr
 8008c08:	2000000d 	.word	0x2000000d

08008c0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008c16:	4b05      	ldr	r3, [pc, #20]	@ (8008c2c <USER_status+0x20>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008c1c:	4b03      	ldr	r3, [pc, #12]	@ (8008c2c <USER_status+0x20>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr
 8008c2c:	2000000d 	.word	0x2000000d

08008c30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008c40:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008c5c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	603a      	str	r2, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
 8008c74:	460b      	mov	r3, r1
 8008c76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
    return res;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bc80      	pop	{r7}
 8008c86:	4770      	bx	lr

08008c88 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d115      	bne.n	8008cc8 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f003 ffca 	bl	800cc3e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	2181      	movs	r1, #129	@ 0x81
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f003 ffbf 	bl	800cc3e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008cc6:	e012      	b.n	8008cee <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008cc8:	2340      	movs	r3, #64	@ 0x40
 8008cca:	2202      	movs	r2, #2
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f003 ffb5 	bl	800cc3e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008cdc:	2340      	movs	r3, #64	@ 0x40
 8008cde:	2202      	movs	r2, #2
 8008ce0:	2181      	movs	r1, #129	@ 0x81
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f003 ffab 	bl	800cc3e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008cee:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8008cf2:	f004 f8eb 	bl	800cecc <USBD_static_malloc>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e003      	b.n	8008d14 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f9d9 	bl	80090c4 <MSC_BOT_Init>

  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f003 ffad 	bl	800cc8a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8008d38:	2181      	movs	r1, #129	@ 0x81
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f003 ffa5 	bl	800cc8a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa06 	bl	8009158 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f004 f8c1 	bl	800cee4 <USBD_static_free>
    pdev->pClassData  = NULL;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d84:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d04d      	beq.n	8008e36 <USBD_MSC_Setup+0xc2>
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	f040 8113 	bne.w	8008fc6 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2bfe      	cmp	r3, #254	@ 0xfe
 8008da6:	d002      	beq.n	8008dae <USBD_MSC_Setup+0x3a>
 8008da8:	2bff      	cmp	r3, #255	@ 0xff
 8008daa:	d024      	beq.n	8008df6 <USBD_MSC_Setup+0x82>
 8008dac:	e03b      	b.n	8008e26 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d118      	bne.n	8008de8 <USBD_MSC_Setup+0x74>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	88db      	ldrh	r3, [r3, #6]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d114      	bne.n	8008de8 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da0f      	bge.n	8008de8 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f002 f98f 	bl	800b104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008de6:	e025      	b.n	8008e34 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f002 f920 	bl	800b030 <USBD_CtlError>
            ret = USBD_FAIL;
 8008df0:	2302      	movs	r3, #2
 8008df2:	75fb      	strb	r3, [r7, #23]
          break;
 8008df4:	e01e      	b.n	8008e34 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10c      	bne.n	8008e18 <USBD_MSC_Setup+0xa4>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d108      	bne.n	8008e18 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	db03      	blt.n	8008e18 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f987 	bl	8009124 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e16:	e00d      	b.n	8008e34 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f002 f908 	bl	800b030 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e20:	2302      	movs	r3, #2
 8008e22:	75fb      	strb	r3, [r7, #23]
          break;
 8008e24:	e006      	b.n	8008e34 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f002 f901 	bl	800b030 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	75fb      	strb	r3, [r7, #23]
          break;
 8008e32:	bf00      	nop
      }
      break;
 8008e34:	e0ce      	b.n	8008fd4 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b0b      	cmp	r3, #11
 8008e3c:	f200 80bb 	bhi.w	8008fb6 <USBD_MSC_Setup+0x242>
 8008e40:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <USBD_MSC_Setup+0xd4>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e79 	.word	0x08008e79
 8008e4c:	08008eef 	.word	0x08008eef
 8008e50:	08008fb7 	.word	0x08008fb7
 8008e54:	08008fb7 	.word	0x08008fb7
 8008e58:	08008fb7 	.word	0x08008fb7
 8008e5c:	08008fb7 	.word	0x08008fb7
 8008e60:	08008fb7 	.word	0x08008fb7
 8008e64:	08008fb7 	.word	0x08008fb7
 8008e68:	08008fb7 	.word	0x08008fb7
 8008e6c:	08008fb7 	.word	0x08008fb7
 8008e70:	08008ea1 	.word	0x08008ea1
 8008e74:	08008ec9 	.word	0x08008ec9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d107      	bne.n	8008e92 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e82:	f107 030e 	add.w	r3, r7, #14
 8008e86:	2202      	movs	r2, #2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 f93a 	bl	800b104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e90:	e098      	b.n	8008fc4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f002 f8cb 	bl	800b030 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e9e:	e091      	b.n	8008fc4 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d107      	bne.n	8008eba <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	3304      	adds	r3, #4
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f002 f926 	bl	800b104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb8:	e084      	b.n	8008fc4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f002 f8b7 	bl	800b030 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec6:	e07d      	b.n	8008fc4 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d106      	bne.n	8008ee0 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ede:	e071      	b.n	8008fc4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f002 f8a4 	bl	800b030 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	75fb      	strb	r3, [r7, #23]
          break;
 8008eec:	e06a      	b.n	8008fc4 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f003 fee6 	bl	800ccc8 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	889b      	ldrh	r3, [r3, #4]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f003 fec0 	bl	800cc8a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	889b      	ldrh	r3, [r3, #4]
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da23      	bge.n	8008f5c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	889b      	ldrh	r3, [r3, #4]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f003 020f 	and.w	r2, r3, #15
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7c1b      	ldrb	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d107      	bne.n	8008f48 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8008f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	2181      	movs	r1, #129	@ 0x81
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f003 fe7c 	bl	800cc3e <USBD_LL_OpenEP>
 8008f46:	e005      	b.n	8008f54 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8008f48:	2340      	movs	r3, #64	@ 0x40
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	2181      	movs	r1, #129	@ 0x81
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f003 fe75 	bl	800cc3e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008f5a:	e024      	b.n	8008fa6 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	889b      	ldrh	r3, [r3, #4]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 020f 	and.w	r2, r3, #15
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7c1b      	ldrb	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d107      	bne.n	8008f92 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8008f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f86:	2202      	movs	r2, #2
 8008f88:	2101      	movs	r1, #1
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f003 fe57 	bl	800cc3e <USBD_LL_OpenEP>
 8008f90:	e005      	b.n	8008f9e <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8008f92:	2340      	movs	r3, #64	@ 0x40
 8008f94:	2202      	movs	r2, #2
 8008f96:	2101      	movs	r1, #1
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f003 fe50 	bl	800cc3e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	889b      	ldrh	r3, [r3, #4]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa52 	bl	8009458 <MSC_BOT_CplClrFeature>
          break;
 8008fb4:	e006      	b.n	8008fc4 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f002 f839 	bl	800b030 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc2:	bf00      	nop
      }
      break;
 8008fc4:	e006      	b.n	8008fd4 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f002 f831 	bl	800b030 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd2:	bf00      	nop
  }

  return ret;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop

08008fe0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f8c1 	bl	8009178 <MSC_BOT_DataIn>

  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f8e3 	bl	80091dc <MSC_BOT_DataOut>

  return USBD_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	@ (800903c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	2000005c 	.word	0x2000005c

08009040 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800904e:	4b03      	ldr	r3, [pc, #12]	@ (800905c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	2000007c 	.word	0x2000007c

08009060 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800906e:	4b03      	ldr	r3, [pc, #12]	@ (800907c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	2000009c 	.word	0x2000009c

08009080 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	220a      	movs	r2, #10
 800908c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800908e:	4b03      	ldr	r3, [pc, #12]	@ (800909c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	200000bc 	.word	0x200000bc

080090a0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  hmsc->scsi_sense_head = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2000      	movs	r0, #0
 80090fa:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80090fc:	2101      	movs	r1, #1
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f003 fde2 	bl	800ccc8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8009104:	2181      	movs	r1, #129	@ 0x81
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f003 fdde 	bl	800ccc8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8009112:	231f      	movs	r3, #31
 8009114:	2101      	movs	r1, #1
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f003 fea1 	bl	800ce5e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009132:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8009146:	231f      	movs	r3, #31
 8009148:	2101      	movs	r1, #1
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f003 fe87 	bl	800ce5e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009166:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	721a      	strb	r2, [r3, #8]
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800918a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	7a1b      	ldrb	r3, [r3, #8]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d005      	beq.n	80091a0 <MSC_BOT_DataIn+0x28>
 8009194:	2b02      	cmp	r3, #2
 8009196:	db1a      	blt.n	80091ce <MSC_BOT_DataIn+0x56>
 8009198:	3b03      	subs	r3, #3
 800919a:	2b01      	cmp	r3, #1
 800919c:	d817      	bhi.n	80091ce <MSC_BOT_DataIn+0x56>
 800919e:	e011      	b.n	80091c4 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80091ac:	461a      	mov	r2, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f97a 	bl	80094a8 <SCSI_ProcessCmd>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0b      	bge.n	80091d2 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80091ba:	2101      	movs	r1, #1
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8f1 	bl	80093a4 <MSC_BOT_SendCSW>
      }
      break;
 80091c2:	e006      	b.n	80091d2 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80091c4:	2100      	movs	r1, #0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f8ec 	bl	80093a4 <MSC_BOT_SendCSW>
      break;
 80091cc:	e002      	b.n	80091d4 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 80091ce:	bf00      	nop
 80091d0:	e000      	b.n	80091d4 <MSC_BOT_DataIn+0x5c>
      break;
 80091d2:	bf00      	nop
  }
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ee:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	7a1b      	ldrb	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <MSC_BOT_DataOut+0x22>
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d004      	beq.n	8009206 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80091fc:	e015      	b.n	800922a <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f818 	bl	8009234 <MSC_BOT_CBW_Decode>
      break;
 8009204:	e011      	b.n	800922a <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8009212:	461a      	mov	r2, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f947 	bl	80094a8 <SCSI_ProcessCmd>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	da03      	bge.n	8009228 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009220:	2101      	movs	r1, #1
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f8be 	bl	80093a4 <MSC_BOT_SendCSW>
      break;
 8009228:	bf00      	nop
  }
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009242:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800925c:	2101      	movs	r1, #1
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f003 fe20 	bl	800cea4 <USBD_LL_GetRxDataSize>
 8009264:	4603      	mov	r3, r0
 8009266:	2b1f      	cmp	r3, #31
 8009268:	d114      	bne.n	8009294 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009270:	4a32      	ldr	r2, [pc, #200]	@ (800933c <MSC_BOT_CBW_Decode+0x108>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d10e      	bne.n	8009294 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800927c:	2b01      	cmp	r3, #1
 800927e:	d809      	bhi.n	8009294 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8009290:	2b10      	cmp	r3, #16
 8009292:	d90e      	bls.n	80092b2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800929a:	2320      	movs	r3, #32
 800929c:	2205      	movs	r2, #5
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fc48 	bl	8009b34 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2202      	movs	r2, #2
 80092a8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f8a6 	bl	80093fc <MSC_BOT_Abort>
 80092b0:	e041      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80092be:	461a      	mov	r2, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8f1 	bl	80094a8 <SCSI_ProcessCmd>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da0c      	bge.n	80092e6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	7a1b      	ldrb	r3, [r3, #8]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	d104      	bne.n	80092de <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80092d4:	2101      	movs	r1, #1
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f864 	bl	80093a4 <MSC_BOT_SendCSW>
 80092dc:	e02b      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f88c 	bl	80093fc <MSC_BOT_Abort>
 80092e4:	e027      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	7a1b      	ldrb	r3, [r3, #8]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d022      	beq.n	8009334 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d01e      	beq.n	8009334 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d01a      	beq.n	8009334 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	895b      	ldrh	r3, [r3, #10]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d009      	beq.n	800931a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f103 010c 	add.w	r1, r3, #12
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	895b      	ldrh	r3, [r3, #10]
 8009310:	461a      	mov	r2, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f814 	bl	8009340 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009318:	e00d      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	895b      	ldrh	r3, [r3, #10]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d104      	bne.n	800932c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009322:	2100      	movs	r1, #0
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f83d 	bl	80093a4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800932a:	e004      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f865 	bl	80093fc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009332:	e000      	b.n	8009336 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8009334:	bf00      	nop
    }
  }
}
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	43425355 	.word	0x43425355

08009340 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009354:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	429a      	cmp	r2, r3
 8009360:	d204      	bcs.n	800936c <MSC_BOT_SendData+0x2c>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009368:	b29b      	uxth	r3, r3
 800936a:	e000      	b.n	800936e <MSC_BOT_SendData+0x2e>
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2204      	movs	r2, #4
 800938c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800938e:	8a7b      	ldrh	r3, [r7, #18]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	2181      	movs	r1, #129	@ 0x81
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f003 fd3f 	bl	800ce18 <USBD_LL_Transmit>
}
 800939a:	bf00      	nop
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a0f      	ldr	r2, [pc, #60]	@ (80093f8 <MSC_BOT_SendCSW+0x54>)
 80093bc:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 80093d4:	230d      	movs	r3, #13
 80093d6:	2181      	movs	r1, #129	@ 0x81
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f003 fd1d 	bl	800ce18 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 80093e4:	231f      	movs	r3, #31
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f003 fd38 	bl	800ce5e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	53425355 	.word	0x53425355

080093fc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800941c:	2b00      	cmp	r3, #0
 800941e:	d007      	beq.n	8009430 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009424:	2b00      	cmp	r3, #0
 8009426:	d103      	bne.n	8009430 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009428:	2101      	movs	r1, #1
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f003 fc6b 	bl	800cd06 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009430:	2181      	movs	r1, #129	@ 0x81
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f003 fc67 	bl	800cd06 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	7a5b      	ldrb	r3, [r3, #9]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d107      	bne.n	8009450 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8009446:	231f      	movs	r3, #31
 8009448:	2101      	movs	r1, #1
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f003 fd07 	bl	800ce5e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	7a5b      	ldrb	r3, [r3, #9]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d107      	bne.n	8009484 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009474:	2181      	movs	r1, #129	@ 0x81
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f003 fc45 	bl	800cd06 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	725a      	strb	r2, [r3, #9]
 8009482:	e00d      	b.n	80094a0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	da08      	bge.n	800949e <MSC_BOT_CplClrFeature+0x46>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	7a5b      	ldrb	r3, [r3, #9]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d004      	beq.n	800949e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009494:	2101      	movs	r1, #1
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ff84 	bl	80093a4 <MSC_BOT_SendCSW>
 800949c:	e000      	b.n	80094a0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800949e:	bf00      	nop
  }
}
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	460b      	mov	r3, r1
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80094bc:	f200 810e 	bhi.w	80096dc <SCSI_ProcessCmd+0x234>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <SCSI_ProcessCmd+0x20>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	08009635 	.word	0x08009635
 80094cc:	080096dd 	.word	0x080096dd
 80094d0:	080096dd 	.word	0x080096dd
 80094d4:	08009643 	.word	0x08009643
 80094d8:	080096dd 	.word	0x080096dd
 80094dc:	080096dd 	.word	0x080096dd
 80094e0:	080096dd 	.word	0x080096dd
 80094e4:	080096dd 	.word	0x080096dd
 80094e8:	080096dd 	.word	0x080096dd
 80094ec:	080096dd 	.word	0x080096dd
 80094f0:	080096dd 	.word	0x080096dd
 80094f4:	080096dd 	.word	0x080096dd
 80094f8:	080096dd 	.word	0x080096dd
 80094fc:	080096dd 	.word	0x080096dd
 8009500:	080096dd 	.word	0x080096dd
 8009504:	080096dd 	.word	0x080096dd
 8009508:	080096dd 	.word	0x080096dd
 800950c:	080096dd 	.word	0x080096dd
 8009510:	08009651 	.word	0x08009651
 8009514:	080096dd 	.word	0x080096dd
 8009518:	080096dd 	.word	0x080096dd
 800951c:	080096dd 	.word	0x080096dd
 8009520:	080096dd 	.word	0x080096dd
 8009524:	080096dd 	.word	0x080096dd
 8009528:	080096dd 	.word	0x080096dd
 800952c:	080096dd 	.word	0x080096dd
 8009530:	0800967b 	.word	0x0800967b
 8009534:	0800965f 	.word	0x0800965f
 8009538:	080096dd 	.word	0x080096dd
 800953c:	080096dd 	.word	0x080096dd
 8009540:	0800966d 	.word	0x0800966d
 8009544:	080096dd 	.word	0x080096dd
 8009548:	080096dd 	.word	0x080096dd
 800954c:	080096dd 	.word	0x080096dd
 8009550:	080096dd 	.word	0x080096dd
 8009554:	08009697 	.word	0x08009697
 8009558:	080096dd 	.word	0x080096dd
 800955c:	080096a5 	.word	0x080096a5
 8009560:	080096dd 	.word	0x080096dd
 8009564:	080096dd 	.word	0x080096dd
 8009568:	080096b3 	.word	0x080096b3
 800956c:	080096dd 	.word	0x080096dd
 8009570:	080096c1 	.word	0x080096c1
 8009574:	080096dd 	.word	0x080096dd
 8009578:	080096dd 	.word	0x080096dd
 800957c:	080096dd 	.word	0x080096dd
 8009580:	080096dd 	.word	0x080096dd
 8009584:	080096cf 	.word	0x080096cf
 8009588:	080096dd 	.word	0x080096dd
 800958c:	080096dd 	.word	0x080096dd
 8009590:	080096dd 	.word	0x080096dd
 8009594:	080096dd 	.word	0x080096dd
 8009598:	080096dd 	.word	0x080096dd
 800959c:	080096dd 	.word	0x080096dd
 80095a0:	080096dd 	.word	0x080096dd
 80095a4:	080096dd 	.word	0x080096dd
 80095a8:	080096dd 	.word	0x080096dd
 80095ac:	080096dd 	.word	0x080096dd
 80095b0:	080096dd 	.word	0x080096dd
 80095b4:	080096dd 	.word	0x080096dd
 80095b8:	080096dd 	.word	0x080096dd
 80095bc:	080096dd 	.word	0x080096dd
 80095c0:	080096dd 	.word	0x080096dd
 80095c4:	080096dd 	.word	0x080096dd
 80095c8:	080096dd 	.word	0x080096dd
 80095cc:	080096dd 	.word	0x080096dd
 80095d0:	080096dd 	.word	0x080096dd
 80095d4:	080096dd 	.word	0x080096dd
 80095d8:	080096dd 	.word	0x080096dd
 80095dc:	080096dd 	.word	0x080096dd
 80095e0:	080096dd 	.word	0x080096dd
 80095e4:	080096dd 	.word	0x080096dd
 80095e8:	080096dd 	.word	0x080096dd
 80095ec:	080096dd 	.word	0x080096dd
 80095f0:	080096dd 	.word	0x080096dd
 80095f4:	080096dd 	.word	0x080096dd
 80095f8:	080096dd 	.word	0x080096dd
 80095fc:	080096dd 	.word	0x080096dd
 8009600:	080096dd 	.word	0x080096dd
 8009604:	080096dd 	.word	0x080096dd
 8009608:	080096dd 	.word	0x080096dd
 800960c:	080096dd 	.word	0x080096dd
 8009610:	080096dd 	.word	0x080096dd
 8009614:	080096dd 	.word	0x080096dd
 8009618:	080096dd 	.word	0x080096dd
 800961c:	080096dd 	.word	0x080096dd
 8009620:	080096dd 	.word	0x080096dd
 8009624:	080096dd 	.word	0x080096dd
 8009628:	080096dd 	.word	0x080096dd
 800962c:	080096dd 	.word	0x080096dd
 8009630:	08009689 	.word	0x08009689
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	4619      	mov	r1, r3
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f85c 	bl	80096f8 <SCSI_TestUnitReady>
      break;
 8009640:	e055      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4619      	mov	r1, r3
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fa09 	bl	8009a60 <SCSI_RequestSense>
      break;
 800964e:	e04e      	b.n	80096ee <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4619      	mov	r1, r3
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f888 	bl	800976c <SCSI_Inquiry>
      break;
 800965c:	e047      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fa9e 	bl	8009ba6 <SCSI_StartStopUnit>
      break;
 800966a:	e040      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 fa97 	bl	8009ba6 <SCSI_StartStopUnit>
      break;
 8009678:	e039      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4619      	mov	r1, r3
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 f99d 	bl	80099c0 <SCSI_ModeSense6>
      break;
 8009686:	e032      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4619      	mov	r1, r3
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f9be 	bl	8009a10 <SCSI_ModeSense10>
      break;
 8009694:	e02b      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009696:	7afb      	ldrb	r3, [r7, #11]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4619      	mov	r1, r3
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f92a 	bl	80098f6 <SCSI_ReadFormatCapacity>
      break;
 80096a2:	e024      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4619      	mov	r1, r3
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f8bc 	bl	8009828 <SCSI_ReadCapacity10>
      break;
 80096b0:	e01d      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80096b2:	7afb      	ldrb	r3, [r7, #11]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fa88 	bl	8009bce <SCSI_Read10>
      break;
 80096be:	e016      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4619      	mov	r1, r3
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fb0d 	bl	8009ce6 <SCSI_Write10>
      break;
 80096cc:	e00f      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	4619      	mov	r1, r3
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fbb6 	bl	8009e46 <SCSI_Verify10>
      break;
 80096da:	e008      	b.n	80096ee <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80096dc:	7af9      	ldrb	r1, [r7, #11]
 80096de:	2320      	movs	r3, #32
 80096e0:	2205      	movs	r2, #5
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fa26 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096ec:	e000      	b.n	80096f0 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	460b      	mov	r3, r1
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800970c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00a      	beq.n	800972e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800971e:	2320      	movs	r3, #32
 8009720:	2205      	movs	r2, #5
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fa06 	bl	8009b34 <SCSI_SenseCode>

    return -1;
 8009728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800972c:	e019      	b.n	8009762 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	7afa      	ldrb	r2, [r7, #11]
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009742:	7af9      	ldrb	r1, [r7, #11]
 8009744:	233a      	movs	r3, #58	@ 0x3a
 8009746:	2202      	movs	r2, #2
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f9f3 	bl	8009b34 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2205      	movs	r2, #5
 8009752:	721a      	strb	r2, [r3, #8]

    return -1;
 8009754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009758:	e003      	b.n	8009762 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2200      	movs	r2, #0
 800975e:	815a      	strh	r2, [r3, #10]

  return 0;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	@ 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	460b      	mov	r3, r1
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009780:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3301      	adds	r3, #1
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d014      	beq.n	80097ba <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8009790:	2307      	movs	r3, #7
 8009792:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	8bfa      	ldrh	r2, [r7, #30]
 8009798:	815a      	strh	r2, [r3, #10]

    while (len)
 800979a:	e00a      	b.n	80097b2 <SCSI_Inquiry+0x46>
    {
      len--;
 800979c:	8bfb      	ldrh	r3, [r7, #30]
 800979e:	3b01      	subs	r3, #1
 80097a0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80097a2:	8bfa      	ldrh	r2, [r7, #30]
 80097a4:	8bfb      	ldrh	r3, [r7, #30]
 80097a6:	491f      	ldr	r1, [pc, #124]	@ (8009824 <SCSI_Inquiry+0xb8>)
 80097a8:	5c89      	ldrb	r1, [r1, r2]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	4413      	add	r3, r2
 80097ae:	460a      	mov	r2, r1
 80097b0:	731a      	strb	r2, [r3, #12]
    while (len)
 80097b2:	8bfb      	ldrh	r3, [r7, #30]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1f1      	bne.n	800979c <SCSI_Inquiry+0x30>
 80097b8:	e02d      	b.n	8009816 <SCSI_Inquiry+0xaa>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097c0:	69d9      	ldr	r1, [r3, #28]
 80097c2:	7afa      	ldrb	r2, [r7, #11]
 80097c4:	4613      	mov	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	3304      	adds	r3, #4
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	3305      	adds	r3, #5
 80097d8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3304      	adds	r3, #4
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	8bfb      	ldrh	r3, [r7, #30]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d303      	bcc.n	80097f0 <SCSI_Inquiry+0x84>
    {
      len = params[4];
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3304      	adds	r3, #4
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	8bfa      	ldrh	r2, [r7, #30]
 80097f4:	815a      	strh	r2, [r3, #10]

    while (len)
 80097f6:	e00b      	b.n	8009810 <SCSI_Inquiry+0xa4>
    {
      len--;
 80097f8:	8bfb      	ldrh	r3, [r7, #30]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80097fe:	8bfb      	ldrh	r3, [r7, #30]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	441a      	add	r2, r3
 8009804:	8bfb      	ldrh	r3, [r7, #30]
 8009806:	7811      	ldrb	r1, [r2, #0]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	4413      	add	r3, r2
 800980c:	460a      	mov	r2, r1
 800980e:	731a      	strb	r2, [r3, #12]
    while (len)
 8009810:	8bfb      	ldrh	r3, [r7, #30]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1f0      	bne.n	80097f8 <SCSI_Inquiry+0x8c>
    }
  }

  return 0;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3724      	adds	r7, #36	@ 0x24
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	0800f0b4 	.word	0x0800f0b4

08009828 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	460b      	mov	r3, r1
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	f502 7118 	add.w	r1, r2, #608	@ 0x260
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	f202 225e 	addw	r2, r2, #606	@ 0x25e
 8009852:	7af8      	ldrb	r0, [r7, #11]
 8009854:	4798      	blx	r3
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800985c:	7af9      	ldrb	r1, [r7, #11]
 800985e:	233a      	movs	r3, #58	@ 0x3a
 8009860:	2202      	movs	r2, #2
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f966 	bl	8009b34 <SCSI_SenseCode>
    return -1;
 8009868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800986c:	e03f      	b.n	80098ee <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8009874:	3b01      	subs	r3, #1
 8009876:	0e1b      	lsrs	r3, r3, #24
 8009878:	b2da      	uxtb	r2, r3
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8009884:	3b01      	subs	r3, #1
 8009886:	0c1b      	lsrs	r3, r3, #16
 8009888:	b2da      	uxtb	r2, r3
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8009894:	3b01      	subs	r3, #1
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	b2da      	uxtb	r2, r3
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80098b4:	161b      	asrs	r3, r3, #24
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80098c2:	141b      	asrs	r3, r3, #16
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80098d0:	0a1b      	lsrs	r3, r3, #8
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2208      	movs	r2, #8
 80098ea:	815a      	strh	r2, [r3, #10]
    return 0;
 80098ec:	2300      	movs	r3, #0
  }
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b088      	sub	sp, #32
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	460b      	mov	r3, r1
 8009900:	607a      	str	r2, [r7, #4]
 8009902:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800990c:	2300      	movs	r3, #0
 800990e:	83fb      	strh	r3, [r7, #30]
 8009910:	e007      	b.n	8009922 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8009912:	8bfb      	ldrh	r3, [r7, #30]
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	4413      	add	r3, r2
 8009918:	2200      	movs	r2, #0
 800991a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800991c:	8bfb      	ldrh	r3, [r7, #30]
 800991e:	3301      	adds	r3, #1
 8009920:	83fb      	strh	r3, [r7, #30]
 8009922:	8bfb      	ldrh	r3, [r7, #30]
 8009924:	2b0b      	cmp	r3, #11
 8009926:	d9f4      	bls.n	8009912 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f107 0216 	add.w	r2, r7, #22
 8009934:	f107 0110 	add.w	r1, r7, #16
 8009938:	7af8      	ldrb	r0, [r7, #11]
 800993a:	4798      	blx	r3
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009942:	7af9      	ldrb	r1, [r7, #11]
 8009944:	233a      	movs	r3, #58	@ 0x3a
 8009946:	2202      	movs	r2, #2
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f8f3 	bl	8009b34 <SCSI_SenseCode>
    return -1;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009952:	e030      	b.n	80099b6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2208      	movs	r2, #8
 8009958:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3b01      	subs	r3, #1
 800995e:	0e1b      	lsrs	r3, r3, #24
 8009960:	b2da      	uxtb	r2, r3
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	3b01      	subs	r3, #1
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	b2da      	uxtb	r2, r3
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	3b01      	subs	r3, #1
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	b2da      	uxtb	r2, r3
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2202      	movs	r2, #2
 800998e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009990:	8afb      	ldrh	r3, [r7, #22]
 8009992:	141b      	asrs	r3, r3, #16
 8009994:	b2da      	uxtb	r2, r3
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800999a:	8afb      	ldrh	r3, [r7, #22]
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	b29b      	uxth	r3, r3
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80099a6:	8afb      	ldrh	r3, [r7, #22]
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	220c      	movs	r2, #12
 80099b2:	815a      	strh	r2, [r3, #10]
    return 0;
 80099b4:	2300      	movs	r3, #0
  }
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3720      	adds	r7, #32
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	460b      	mov	r3, r1
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d4:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80099d6:	2308      	movs	r3, #8
 80099d8:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	8afa      	ldrh	r2, [r7, #22]
 80099de:	815a      	strh	r2, [r3, #10]

  while (len)
 80099e0:	e00a      	b.n	80099f8 <SCSI_ModeSense6+0x38>
  {
    len--;
 80099e2:	8afb      	ldrh	r3, [r7, #22]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80099e8:	8afa      	ldrh	r2, [r7, #22]
 80099ea:	8afb      	ldrh	r3, [r7, #22]
 80099ec:	4907      	ldr	r1, [pc, #28]	@ (8009a0c <SCSI_ModeSense6+0x4c>)
 80099ee:	5c89      	ldrb	r1, [r1, r2]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	460a      	mov	r2, r1
 80099f6:	731a      	strb	r2, [r3, #12]
  while (len)
 80099f8:	8afb      	ldrh	r3, [r7, #22]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1f1      	bne.n	80099e2 <SCSI_ModeSense6+0x22>
  }
  return 0;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bc80      	pop	{r7}
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	0800f0bc 	.word	0x0800f0bc

08009a10 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8009a1e:	2308      	movs	r3, #8
 8009a20:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a28:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	8afa      	ldrh	r2, [r7, #22]
 8009a2e:	815a      	strh	r2, [r3, #10]

  while (len)
 8009a30:	e00a      	b.n	8009a48 <SCSI_ModeSense10+0x38>
  {
    len--;
 8009a32:	8afb      	ldrh	r3, [r7, #22]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8009a38:	8afa      	ldrh	r2, [r7, #22]
 8009a3a:	8afb      	ldrh	r3, [r7, #22]
 8009a3c:	4907      	ldr	r1, [pc, #28]	@ (8009a5c <SCSI_ModeSense10+0x4c>)
 8009a3e:	5c89      	ldrb	r1, [r1, r2]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4413      	add	r3, r2
 8009a44:	460a      	mov	r2, r1
 8009a46:	731a      	strb	r2, [r3, #12]
  while (len)
 8009a48:	8afb      	ldrh	r3, [r7, #22]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1f1      	bne.n	8009a32 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	371c      	adds	r7, #28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bc80      	pop	{r7}
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	0800f0c4 	.word	0x0800f0c4

08009a60 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a74:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]
 8009a7a:	e007      	b.n	8009a8c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	75fb      	strb	r3, [r7, #23]
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b11      	cmp	r3, #17
 8009a90:	d9f4      	bls.n	8009a7c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2270      	movs	r2, #112	@ 0x70
 8009a96:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	220c      	movs	r2, #12
 8009a9c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f893 225c 	ldrb.w	r2, [r3, #604]	@ 0x25c
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d02e      	beq.n	8009b0c <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	3347      	adds	r3, #71	@ 0x47
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	4413      	add	r3, r2
 8009abc:	791a      	ldrb	r2, [r3, #4]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	3347      	adds	r3, #71	@ 0x47
 8009acc:	00db      	lsls	r3, r3, #3
 8009ace:	4413      	add	r3, r2
 8009ad0:	7a5a      	ldrb	r2, [r3, #9]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	3347      	adds	r3, #71	@ 0x47
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	7a1a      	ldrb	r2, [r3, #8]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8009af0:	3301      	adds	r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d103      	bne.n	8009b0c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2212      	movs	r2, #18
 8009b10:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b12      	cmp	r3, #18
 8009b1a:	d805      	bhi.n	8009b28 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr

08009b34 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	70fb      	strb	r3, [r7, #3]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70bb      	strb	r3, [r7, #2]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b54:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	3347      	adds	r3, #71	@ 0x47
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	4413      	add	r3, r2
 8009b64:	78ba      	ldrb	r2, [r7, #2]
 8009b66:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	3347      	adds	r3, #71	@ 0x47
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	4413      	add	r3, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8009b80:	3301      	adds	r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d103      	bne.n	8009b9c <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr

08009ba6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b087      	sub	sp, #28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bba:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	815a      	strh	r2, [r3, #10]
  return 0;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bc80      	pop	{r7}
 8009bcc:	4770      	bx	lr

08009bce <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be2:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	7a1b      	ldrb	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d16e      	bne.n	8009cca <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db0a      	blt.n	8009c0e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8009bfe:	2320      	movs	r3, #32
 8009c00:	2205      	movs	r2, #5
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff ff96 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c0c:	e067      	b.n	8009cde <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	7afa      	ldrb	r2, [r7, #11]
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d008      	beq.n	8009c34 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009c22:	7af9      	ldrb	r1, [r7, #11]
 8009c24:	233a      	movs	r3, #58	@ 0x3a
 8009c26:	2202      	movs	r2, #2
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff ff83 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c32:	e054      	b.n	8009cde <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3302      	adds	r3, #2
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3303      	adds	r3, #3
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c44:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009c4e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	3205      	adds	r2, #5
 8009c54:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009c56:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3307      	adds	r3, #7
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	021b      	lsls	r3, r3, #8
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	3208      	adds	r2, #8
 8009c6a:	7812      	ldrb	r2, [r2, #0]
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009c80:	7af9      	ldrb	r1, [r7, #11]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 f912 	bl	8009eac <SCSI_CheckAddressRange>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	da02      	bge.n	8009c94 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c92:	e024      	b.n	8009cde <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2202      	movs	r2, #2
 8009c98:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009ca6:	6979      	ldr	r1, [r7, #20]
 8009ca8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	@ 0x25e
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d00a      	beq.n	8009cca <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8009cba:	2320      	movs	r3, #32
 8009cbc:	2205      	movs	r2, #5
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f7ff ff38 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cc8:	e009      	b.n	8009cde <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cd0:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f90a 	bl	8009ef0 <SCSI_ProcessRead>
 8009cdc:	4603      	mov	r3, r0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cfa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	7a1b      	ldrb	r3, [r3, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8096 	bne.w	8009e32 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8009d0c:	b25b      	sxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da0a      	bge.n	8009d28 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8009d18:	2320      	movs	r3, #32
 8009d1a:	2205      	movs	r2, #5
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff ff09 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d26:	e08a      	b.n	8009e3e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	7afa      	ldrb	r2, [r7, #11]
 8009d32:	4610      	mov	r0, r2
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d008      	beq.n	8009d4e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d3c:	7af9      	ldrb	r1, [r7, #11]
 8009d3e:	233a      	movs	r3, #58	@ 0x3a
 8009d40:	2202      	movs	r2, #2
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fef6 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d4c:	e077      	b.n	8009e3e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	7afa      	ldrb	r2, [r7, #11]
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009d62:	7af9      	ldrb	r1, [r7, #11]
 8009d64:	2327      	movs	r3, #39	@ 0x27
 8009d66:	2202      	movs	r2, #2
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f7ff fee3 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d72:	e064      	b.n	8009e3e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3302      	adds	r3, #2
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3303      	adds	r3, #3
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d84:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009d8e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	3205      	adds	r2, #5
 8009d94:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009d96:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3307      	adds	r3, #7
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	3208      	adds	r2, #8
 8009daa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009dac:	431a      	orrs	r2, r3
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009dc0:	7af9      	ldrb	r1, [r7, #11]
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 f872 	bl	8009eac <SCSI_CheckAddressRange>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	da02      	bge.n	8009dd4 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dd2:	e034      	b.n	8009e3e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d00a      	beq.n	8009e08 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8009df8:	2320      	movs	r3, #32
 8009dfa:	2205      	movs	r2, #5
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f7ff fe99 	bl	8009b34 <SCSI_SenseCode>
      return -1;
 8009e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e06:	e01a      	b.n	8009e3e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e0e:	bf28      	it	cs
 8009e10:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009e14:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f103 020c 	add.w	r2, r3, #12
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2101      	movs	r1, #1
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f003 f818 	bl	800ce5e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e005      	b.n	8009e3e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	4619      	mov	r1, r3
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 f8ce 	bl	8009fd8 <SCSI_ProcessWrite>
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b086      	sub	sp, #24
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	607a      	str	r2, [r7, #4]
 8009e52:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009e6a:	7af9      	ldrb	r1, [r7, #11]
 8009e6c:	2324      	movs	r3, #36	@ 0x24
 8009e6e:	2205      	movs	r2, #5
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff fe5f 	bl	8009b34 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e7a:	e013      	b.n	8009ea4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009e88:	7af9      	ldrb	r1, [r7, #11]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f80e 	bl	8009eac <SCSI_CheckAddressRange>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da02      	bge.n	8009e9c <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8009e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e9a:	e003      	b.n	8009ea4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	815a      	strh	r2, [r3, #10]
  return 0;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ec2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	441a      	add	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d908      	bls.n	8009ee6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009ed4:	7af9      	ldrb	r1, [r7, #11]
 8009ed6:	2321      	movs	r3, #33	@ 0x21
 8009ed8:	2205      	movs	r2, #5
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fe2a 	bl	8009b34 <SCSI_SenseCode>
    return -1;
 8009ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ee4:	e000      	b.n	8009ee8 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f02:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
 8009f14:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1c:	bf28      	it	cs
 8009f1e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009f22:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f2a:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8009f3e:	4618      	mov	r0, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	78f8      	ldrb	r0, [r7, #3]
 8009f4a:	47a0      	blx	r4
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da08      	bge.n	8009f64 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009f52:	78f9      	ldrb	r1, [r7, #3]
 8009f54:	2311      	movs	r3, #17
 8009f56:	2204      	movs	r2, #4
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff fdeb 	bl	8009b34 <SCSI_SenseCode>
    return -1;
 8009f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f62:	e035      	b.n	8009fd0 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 020c 	add.w	r2, r3, #12
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	2181      	movs	r1, #129	@ 0x81
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 ff51 	bl	800ce18 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8009f82:	4619      	mov	r1, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f8a:	441a      	add	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d102      	bne.n	8009fce <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd90      	pop	{r4, r7, pc}

08009fd8 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fea:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a004:	bf28      	it	cs
 800a006:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800a00a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a012:	695c      	ldr	r4, [r3, #20]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f103 010c 	add.w	r1, r3, #12
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800a026:	4618      	mov	r0, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a02e:	b29b      	uxth	r3, r3
 800a030:	78f8      	ldrb	r0, [r7, #3]
 800a032:	47a0      	blx	r4
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	da08      	bge.n	800a04c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a03a:	78f9      	ldrb	r1, [r7, #3]
 800a03c:	2303      	movs	r3, #3
 800a03e:	2204      	movs	r2, #4
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff fd77 	bl	8009b34 <SCSI_SenseCode>

    return -1;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a04a:	e045      	b.n	800a0d8 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800a058:	4619      	mov	r1, r3
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a060:	441a      	add	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800a074:	4619      	mov	r1, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	fbb3 f3f1 	udiv	r3, r3, r1
 800a07c:	1ad2      	subs	r2, r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	1ad2      	subs	r2, r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d104      	bne.n	800a0a8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff f97f 	bl	80093a4 <MSC_BOT_SendCSW>
 800a0a6:	e016      	b.n	800a0d6 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800a0b4:	fb02 f303 	mul.w	r3, r2, r3
 800a0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0bc:	bf28      	it	cs
 800a0be:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800a0c2:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f103 020c 	add.w	r2, r3, #12
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f002 fec4 	bl	800ce5e <USBD_LL_PrepareReceive>
  }

  return 0;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd90      	pop	{r4, r7, pc}

0800a0e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e01a      	b.n	800a12e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	79fa      	ldrb	r2, [r7, #7]
 800a124:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f002 fd1e 	bl	800cb68 <USBD_LL_Init>

  return USBD_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
 800a156:	e001      	b.n	800a15c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a158:	2302      	movs	r3, #2
 800a15a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr

0800a168 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f002 fd49 	bl	800cc08 <USBD_LL_Start>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr

0800a194 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00c      	beq.n	800a1c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	78fa      	ldrb	r2, [r7, #3]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3

  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fed7 	bl	800afbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a22c:	f003 031f 	and.w	r3, r3, #31
 800a230:	2b02      	cmp	r3, #2
 800a232:	d016      	beq.n	800a262 <USBD_LL_SetupStage+0x6a>
 800a234:	2b02      	cmp	r3, #2
 800a236:	d81c      	bhi.n	800a272 <USBD_LL_SetupStage+0x7a>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <USBD_LL_SetupStage+0x4a>
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d008      	beq.n	800a252 <USBD_LL_SetupStage+0x5a>
 800a240:	e017      	b.n	800a272 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f9ca 	bl	800a5e4 <USBD_StdDevReq>
      break;
 800a250:	e01a      	b.n	800a288 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa2c 	bl	800a6b8 <USBD_StdItfReq>
      break;
 800a260:	e012      	b.n	800a288 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa6c 	bl	800a748 <USBD_StdEPReq>
      break;
 800a270:	e00a      	b.n	800a288 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a278:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f002 fd40 	bl	800cd06 <USBD_LL_StallEP>
      break;
 800a286:	bf00      	nop
  }

  return USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b086      	sub	sp, #24
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	460b      	mov	r3, r1
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d14b      	bne.n	800a33e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a2ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d134      	bne.n	800a322 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d919      	bls.n	800a2f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	1ad2      	subs	r2, r2, r3
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d203      	bcs.n	800a2e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	e002      	b.n	800a2ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 ff35 	bl	800b160 <USBD_CtlContinueRx>
 800a2f6:	e038      	b.n	800a36a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00a      	beq.n	800a31a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d105      	bne.n	800a31a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 ff32 	bl	800b184 <USBD_CtlSendStatus>
 800a320:	e023      	b.n	800a36a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a328:	2b05      	cmp	r3, #5
 800a32a:	d11e      	bne.n	800a36a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a334:	2100      	movs	r1, #0
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f002 fce5 	bl	800cd06 <USBD_LL_StallEP>
 800a33c:	e015      	b.n	800a36a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00d      	beq.n	800a366 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a350:	2b03      	cmp	r3, #3
 800a352:	d108      	bne.n	800a366 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	7afa      	ldrb	r2, [r7, #11]
 800a35e:	4611      	mov	r1, r2
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	4798      	blx	r3
 800a364:	e001      	b.n	800a36a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a366:	2302      	movs	r3, #2
 800a368:	e000      	b.n	800a36c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	460b      	mov	r3, r1
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d17f      	bne.n	800a488 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3314      	adds	r3, #20
 800a38c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a394:	2b02      	cmp	r3, #2
 800a396:	d15c      	bne.n	800a452 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d915      	bls.n	800a3d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 febd 	bl	800b13c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f002 fd48 	bl	800ce5e <USBD_LL_PrepareReceive>
 800a3ce:	e04e      	b.n	800a46e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	6912      	ldr	r2, [r2, #16]
 800a3d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3dc:	fb01 f202 	mul.w	r2, r1, r2
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d11c      	bne.n	800a420 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d316      	bcc.n	800a420 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d20f      	bcs.n	800a420 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a400:	2200      	movs	r2, #0
 800a402:	2100      	movs	r1, #0
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 fe99 	bl	800b13c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a412:	2300      	movs	r3, #0
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f002 fd20 	bl	800ce5e <USBD_LL_PrepareReceive>
 800a41e:	e026      	b.n	800a46e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a432:	2b03      	cmp	r3, #3
 800a434:	d105      	bne.n	800a442 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a442:	2180      	movs	r1, #128	@ 0x80
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f002 fc5e 	bl	800cd06 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fead 	bl	800b1aa <USBD_CtlReceiveStatus>
 800a450:	e00d      	b.n	800a46e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d004      	beq.n	800a466 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a466:	2180      	movs	r1, #128	@ 0x80
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f002 fc4c 	bl	800cd06 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a474:	2b01      	cmp	r3, #1
 800a476:	d11d      	bne.n	800a4b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff fe81 	bl	800a180 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a486:	e015      	b.n	800a4b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00d      	beq.n	800a4b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d108      	bne.n	800a4b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	7afa      	ldrb	r2, [r7, #11]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	4798      	blx	r3
 800a4ae:	e001      	b.n	800a4b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e000      	b.n	800a4b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4c6:	2340      	movs	r3, #64	@ 0x40
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 fbb6 	bl	800cc3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2240      	movs	r2, #64	@ 0x40
 800a4de:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4e2:	2340      	movs	r3, #64	@ 0x40
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2180      	movs	r1, #128	@ 0x80
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f002 fba8 	bl	800cc3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2240      	movs	r2, #64	@ 0x40
 800a4f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6852      	ldr	r2, [r2, #4]
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	4611      	mov	r1, r2
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
  }

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc80      	pop	{r7}
 800a55c:	4770      	bx	lr

0800a55e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2204      	movs	r2, #4
 800a576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	bc80      	pop	{r7}
 800a584:	4770      	bx	lr

0800a586 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a594:	2b04      	cmp	r3, #4
 800a596:	d105      	bne.n	800a5a4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d10b      	bne.n	800a5da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d005      	beq.n	800a5da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5fa:	2b40      	cmp	r3, #64	@ 0x40
 800a5fc:	d005      	beq.n	800a60a <USBD_StdDevReq+0x26>
 800a5fe:	2b40      	cmp	r3, #64	@ 0x40
 800a600:	d84f      	bhi.n	800a6a2 <USBD_StdDevReq+0xbe>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <USBD_StdDevReq+0x36>
 800a606:	2b20      	cmp	r3, #32
 800a608:	d14b      	bne.n	800a6a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	4798      	blx	r3
      break;
 800a618:	e048      	b.n	800a6ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	2b09      	cmp	r3, #9
 800a620:	d839      	bhi.n	800a696 <USBD_StdDevReq+0xb2>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <USBD_StdDevReq+0x44>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a679 	.word	0x0800a679
 800a62c:	0800a68d 	.word	0x0800a68d
 800a630:	0800a697 	.word	0x0800a697
 800a634:	0800a683 	.word	0x0800a683
 800a638:	0800a697 	.word	0x0800a697
 800a63c:	0800a65b 	.word	0x0800a65b
 800a640:	0800a651 	.word	0x0800a651
 800a644:	0800a697 	.word	0x0800a697
 800a648:	0800a66f 	.word	0x0800a66f
 800a64c:	0800a665 	.word	0x0800a665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f9dc 	bl	800aa10 <USBD_GetDescriptor>
          break;
 800a658:	e022      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fb3f 	bl	800ace0 <USBD_SetAddress>
          break;
 800a662:	e01d      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fb7e 	bl	800ad68 <USBD_SetConfig>
          break;
 800a66c:	e018      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fc07 	bl	800ae84 <USBD_GetConfig>
          break;
 800a676:	e013      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fc37 	bl	800aeee <USBD_GetStatus>
          break;
 800a680:	e00e      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc65 	bl	800af54 <USBD_SetFeature>
          break;
 800a68a:	e009      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fc74 	bl	800af7c <USBD_ClrFeature>
          break;
 800a694:	e004      	b.n	800a6a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fcc9 	bl	800b030 <USBD_CtlError>
          break;
 800a69e:	bf00      	nop
      }
      break;
 800a6a0:	e004      	b.n	800a6ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fcc3 	bl	800b030 <USBD_CtlError>
      break;
 800a6aa:	bf00      	nop
  }

  return ret;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop

0800a6b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6ce:	2b40      	cmp	r3, #64	@ 0x40
 800a6d0:	d005      	beq.n	800a6de <USBD_StdItfReq+0x26>
 800a6d2:	2b40      	cmp	r3, #64	@ 0x40
 800a6d4:	d82e      	bhi.n	800a734 <USBD_StdItfReq+0x7c>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <USBD_StdItfReq+0x26>
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d12a      	bne.n	800a734 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d81d      	bhi.n	800a726 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	889b      	ldrh	r3, [r3, #4]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d813      	bhi.n	800a71c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	88db      	ldrh	r3, [r3, #6]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d110      	bne.n	800a730 <USBD_StdItfReq+0x78>
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10d      	bne.n	800a730 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fd35 	bl	800b184 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a71a:	e009      	b.n	800a730 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a71c:	6839      	ldr	r1, [r7, #0]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fc86 	bl	800b030 <USBD_CtlError>
          break;
 800a724:	e004      	b.n	800a730 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fc81 	bl	800b030 <USBD_CtlError>
          break;
 800a72e:	e000      	b.n	800a732 <USBD_StdItfReq+0x7a>
          break;
 800a730:	bf00      	nop
      }
      break;
 800a732:	e004      	b.n	800a73e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fc7a 	bl	800b030 <USBD_CtlError>
      break;
 800a73c:	bf00      	nop
  }

  return USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	889b      	ldrh	r3, [r3, #4]
 800a75a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a764:	2b40      	cmp	r3, #64	@ 0x40
 800a766:	d007      	beq.n	800a778 <USBD_StdEPReq+0x30>
 800a768:	2b40      	cmp	r3, #64	@ 0x40
 800a76a:	f200 8146 	bhi.w	800a9fa <USBD_StdEPReq+0x2b2>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <USBD_StdEPReq+0x40>
 800a772:	2b20      	cmp	r3, #32
 800a774:	f040 8141 	bne.w	800a9fa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
      break;
 800a786:	e13d      	b.n	800aa04 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a790:	2b20      	cmp	r3, #32
 800a792:	d10a      	bne.n	800a7aa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	e12d      	b.n	800aa06 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d007      	beq.n	800a7c2 <USBD_StdEPReq+0x7a>
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	f300 811b 	bgt.w	800a9ee <USBD_StdEPReq+0x2a6>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d072      	beq.n	800a8a2 <USBD_StdEPReq+0x15a>
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d03a      	beq.n	800a836 <USBD_StdEPReq+0xee>
 800a7c0:	e115      	b.n	800a9ee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d002      	beq.n	800a7d2 <USBD_StdEPReq+0x8a>
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d015      	beq.n	800a7fc <USBD_StdEPReq+0xb4>
 800a7d0:	e02b      	b.n	800a82a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7d2:	7bbb      	ldrb	r3, [r7, #14]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <USBD_StdEPReq+0xaa>
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b80      	cmp	r3, #128	@ 0x80
 800a7dc:	d009      	beq.n	800a7f2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 fa8f 	bl	800cd06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a7e8:	2180      	movs	r1, #128	@ 0x80
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f002 fa8b 	bl	800cd06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7f0:	e020      	b.n	800a834 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fc1b 	bl	800b030 <USBD_CtlError>
              break;
 800a7fa:	e01b      	b.n	800a834 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	885b      	ldrh	r3, [r3, #2]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10e      	bne.n	800a822 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <USBD_StdEPReq+0xda>
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b80      	cmp	r3, #128	@ 0x80
 800a80e:	d008      	beq.n	800a822 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	88db      	ldrh	r3, [r3, #6]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f002 fa72 	bl	800cd06 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fcae 	bl	800b184 <USBD_CtlSendStatus>

              break;
 800a828:	e004      	b.n	800a834 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fbff 	bl	800b030 <USBD_CtlError>
              break;
 800a832:	bf00      	nop
          }
          break;
 800a834:	e0e0      	b.n	800a9f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d002      	beq.n	800a846 <USBD_StdEPReq+0xfe>
 800a840:	2b03      	cmp	r3, #3
 800a842:	d015      	beq.n	800a870 <USBD_StdEPReq+0x128>
 800a844:	e026      	b.n	800a894 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00c      	beq.n	800a866 <USBD_StdEPReq+0x11e>
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b80      	cmp	r3, #128	@ 0x80
 800a850:	d009      	beq.n	800a866 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f002 fa55 	bl	800cd06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a85c:	2180      	movs	r1, #128	@ 0x80
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f002 fa51 	bl	800cd06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a864:	e01c      	b.n	800a8a0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fbe1 	bl	800b030 <USBD_CtlError>
              break;
 800a86e:	e017      	b.n	800a8a0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	885b      	ldrh	r3, [r3, #2]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d112      	bne.n	800a89e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	4619      	mov	r1, r3
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f002 fa5c 	bl	800cd44 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc79 	bl	800b184 <USBD_CtlSendStatus>
              }
              break;
 800a892:	e004      	b.n	800a89e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fbca 	bl	800b030 <USBD_CtlError>
              break;
 800a89c:	e000      	b.n	800a8a0 <USBD_StdEPReq+0x158>
              break;
 800a89e:	bf00      	nop
          }
          break;
 800a8a0:	e0aa      	b.n	800a9f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d002      	beq.n	800a8b2 <USBD_StdEPReq+0x16a>
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d032      	beq.n	800a916 <USBD_StdEPReq+0x1ce>
 800a8b0:	e097      	b.n	800a9e2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d007      	beq.n	800a8c8 <USBD_StdEPReq+0x180>
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	2b80      	cmp	r3, #128	@ 0x80
 800a8bc:	d004      	beq.n	800a8c8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fbb5 	bl	800b030 <USBD_CtlError>
                break;
 800a8c6:	e091      	b.n	800a9ec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	da0b      	bge.n	800a8e8 <USBD_StdEPReq+0x1a0>
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	3310      	adds	r3, #16
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	e00b      	b.n	800a900 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	3304      	adds	r3, #4
 800a900:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2202      	movs	r2, #2
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fbf8 	bl	800b104 <USBD_CtlSendData>
              break;
 800a914:	e06a      	b.n	800a9ec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	da11      	bge.n	800a942 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	f003 020f 	and.w	r2, r3, #15
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	440b      	add	r3, r1
 800a930:	3318      	adds	r3, #24
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d117      	bne.n	800a968 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fb78 	bl	800b030 <USBD_CtlError>
                  break;
 800a940:	e054      	b.n	800a9ec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	f003 020f 	and.w	r2, r3, #15
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	440b      	add	r3, r1
 800a954:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb65 	bl	800b030 <USBD_CtlError>
                  break;
 800a966:	e041      	b.n	800a9ec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	da0b      	bge.n	800a988 <USBD_StdEPReq+0x240>
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	3310      	adds	r3, #16
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	4413      	add	r3, r2
 800a984:	3304      	adds	r3, #4
 800a986:	e00b      	b.n	800a9a0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a988:	7bbb      	ldrb	r3, [r7, #14]
 800a98a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	3304      	adds	r3, #4
 800a9a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <USBD_StdEPReq+0x266>
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b80      	cmp	r3, #128	@ 0x80
 800a9ac:	d103      	bne.n	800a9b6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e00e      	b.n	800a9d4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f002 f9e1 	bl	800cd82 <USBD_LL_IsStallEP>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	e002      	b.n	800a9d4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fb92 	bl	800b104 <USBD_CtlSendData>
              break;
 800a9e0:	e004      	b.n	800a9ec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fb23 	bl	800b030 <USBD_CtlError>
              break;
 800a9ea:	bf00      	nop
          }
          break;
 800a9ec:	e004      	b.n	800a9f8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fb1d 	bl	800b030 <USBD_CtlError>
          break;
 800a9f6:	bf00      	nop
      }
      break;
 800a9f8:	e004      	b.n	800aa04 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fb17 	bl	800b030 <USBD_CtlError>
      break;
 800aa02:	bf00      	nop
  }

  return ret;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	885b      	ldrh	r3, [r3, #2]
 800aa2a:	0a1b      	lsrs	r3, r3, #8
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b06      	cmp	r3, #6
 800aa32:	f200 8128 	bhi.w	800ac86 <USBD_GetDescriptor+0x276>
 800aa36:	a201      	add	r2, pc, #4	@ (adr r2, 800aa3c <USBD_GetDescriptor+0x2c>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa71 	.word	0x0800aa71
 800aa44:	0800aab1 	.word	0x0800aab1
 800aa48:	0800ac87 	.word	0x0800ac87
 800aa4c:	0800ac87 	.word	0x0800ac87
 800aa50:	0800ac27 	.word	0x0800ac27
 800aa54:	0800ac53 	.word	0x0800ac53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
      break;
 800aa6e:	e112      	b.n	800ac96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7c1b      	ldrb	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10d      	bne.n	800aa94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa80:	f107 0208 	add.w	r2, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	2202      	movs	r2, #2
 800aa90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa92:	e100      	b.n	800ac96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9c:	f107 0208 	add.w	r2, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
      break;
 800aaae:	e0f2      	b.n	800ac96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	885b      	ldrh	r3, [r3, #2]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	f200 80ac 	bhi.w	800ac14 <USBD_GetDescriptor+0x204>
 800aabc:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <USBD_GetDescriptor+0xb4>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aadd 	.word	0x0800aadd
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab45 	.word	0x0800ab45
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800abad 	.word	0x0800abad
 800aad8:	0800abe1 	.word	0x0800abe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7c12      	ldrb	r2, [r2, #16]
 800aaf4:	f107 0108 	add.w	r1, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafe:	e091      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa94 	bl	800b030 <USBD_CtlError>
            err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0e:	e089      	b.n	800ac24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7c12      	ldrb	r2, [r2, #16]
 800ab28:	f107 0108 	add.w	r1, r7, #8
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
 800ab30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab32:	e077      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa7a 	bl	800b030 <USBD_CtlError>
            err++;
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	72fb      	strb	r3, [r7, #11]
          break;
 800ab42:	e06f      	b.n	800ac24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7c12      	ldrb	r2, [r2, #16]
 800ab5c:	f107 0108 	add.w	r1, r7, #8
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab66:	e05d      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa60 	bl	800b030 <USBD_CtlError>
            err++;
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	3301      	adds	r3, #1
 800ab74:	72fb      	strb	r3, [r7, #11]
          break;
 800ab76:	e055      	b.n	800ac24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	7c12      	ldrb	r2, [r2, #16]
 800ab90:	f107 0108 	add.w	r1, r7, #8
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab9a:	e043      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fa46 	bl	800b030 <USBD_CtlError>
            err++;
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	3301      	adds	r3, #1
 800aba8:	72fb      	strb	r3, [r7, #11]
          break;
 800abaa:	e03b      	b.n	800ac24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7c12      	ldrb	r2, [r2, #16]
 800abc4:	f107 0108 	add.w	r1, r7, #8
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abce:	e029      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa2c 	bl	800b030 <USBD_CtlError>
            err++;
 800abd8:	7afb      	ldrb	r3, [r7, #11]
 800abda:	3301      	adds	r3, #1
 800abdc:	72fb      	strb	r3, [r7, #11]
          break;
 800abde:	e021      	b.n	800ac24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	7c12      	ldrb	r2, [r2, #16]
 800abf8:	f107 0108 	add.w	r1, r7, #8
 800abfc:	4610      	mov	r0, r2
 800abfe:	4798      	blx	r3
 800ac00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac02:	e00f      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa12 	bl	800b030 <USBD_CtlError>
            err++;
 800ac0c:	7afb      	ldrb	r3, [r7, #11]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	72fb      	strb	r3, [r7, #11]
          break;
 800ac12:	e007      	b.n	800ac24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa0a 	bl	800b030 <USBD_CtlError>
          err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ac22:	e038      	b.n	800ac96 <USBD_GetDescriptor+0x286>
 800ac24:	e037      	b.n	800ac96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7c1b      	ldrb	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac36:	f107 0208 	add.w	r2, r7, #8
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4798      	blx	r3
 800ac3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac40:	e029      	b.n	800ac96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f9f3 	bl	800b030 <USBD_CtlError>
        err++;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac50:	e021      	b.n	800ac96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7c1b      	ldrb	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10d      	bne.n	800ac76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac62:	f107 0208 	add.w	r2, r7, #8
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
 800ac6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	2207      	movs	r2, #7
 800ac72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac74:	e00f      	b.n	800ac96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f9d9 	bl	800b030 <USBD_CtlError>
        err++;
 800ac7e:	7afb      	ldrb	r3, [r7, #11]
 800ac80:	3301      	adds	r3, #1
 800ac82:	72fb      	strb	r3, [r7, #11]
      break;
 800ac84:	e007      	b.n	800ac96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f9d1 	bl	800b030 <USBD_CtlError>
      err++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
      break;
 800ac94:	bf00      	nop
  }

  if (err != 0U)
 800ac96:	7afb      	ldrb	r3, [r7, #11]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d11c      	bne.n	800acd6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ac9c:	893b      	ldrh	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d011      	beq.n	800acc6 <USBD_GetDescriptor+0x2b6>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	88db      	ldrh	r3, [r3, #6]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00d      	beq.n	800acc6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	88da      	ldrh	r2, [r3, #6]
 800acae:	893b      	ldrh	r3, [r7, #8]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	bf28      	it	cs
 800acb4:	4613      	movcs	r3, r2
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acba:	893b      	ldrh	r3, [r7, #8]
 800acbc:	461a      	mov	r2, r3
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fa1f 	bl	800b104 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88db      	ldrh	r3, [r3, #6]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa58 	bl	800b184 <USBD_CtlSendStatus>
 800acd4:	e000      	b.n	800acd8 <USBD_GetDescriptor+0x2c8>
    return;
 800acd6:	bf00      	nop
    }
  }
}
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop

0800ace0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	889b      	ldrh	r3, [r3, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d130      	bne.n	800ad54 <USBD_SetAddress+0x74>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	88db      	ldrh	r3, [r3, #6]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d12c      	bne.n	800ad54 <USBD_SetAddress+0x74>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	885b      	ldrh	r3, [r3, #2]
 800acfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad00:	d828      	bhi.n	800ad54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	885b      	ldrh	r3, [r3, #2]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d104      	bne.n	800ad22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f988 	bl	800b030 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad20:	e01d      	b.n	800ad5e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f002 f853 	bl	800cdda <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa25 	bl	800b184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad48:	e009      	b.n	800ad5e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad52:	e004      	b.n	800ad5e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f96a 	bl	800b030 <USBD_CtlError>
  }
}
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	885b      	ldrh	r3, [r3, #2]
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	4b41      	ldr	r3, [pc, #260]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ad7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad7c:	4b40      	ldr	r3, [pc, #256]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d904      	bls.n	800ad8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f952 	bl	800b030 <USBD_CtlError>
 800ad8c:	e075      	b.n	800ae7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d002      	beq.n	800ad9e <USBD_SetConfig+0x36>
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d023      	beq.n	800ade4 <USBD_SetConfig+0x7c>
 800ad9c:	e062      	b.n	800ae64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ad9e:	4b38      	ldr	r3, [pc, #224]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d01a      	beq.n	800addc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ada6:	4b36      	ldr	r3, [pc, #216]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2203      	movs	r2, #3
 800adb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800adb8:	4b31      	ldr	r3, [pc, #196]	@ (800ae80 <USBD_SetConfig+0x118>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff f9e8 	bl	800a194 <USBD_SetClassConfig>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d104      	bne.n	800add4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f92f 	bl	800b030 <USBD_CtlError>
            return;
 800add2:	e052      	b.n	800ae7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f9d5 	bl	800b184 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800adda:	e04e      	b.n	800ae7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f9d1 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800ade2:	e04a      	b.n	800ae7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ade4:	4b26      	ldr	r3, [pc, #152]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d112      	bne.n	800ae12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800adf4:	4b22      	ldr	r3, [pc, #136]	@ (800ae80 <USBD_SetConfig+0x118>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800adfe:	4b20      	ldr	r3, [pc, #128]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff f9e4 	bl	800a1d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f9ba 	bl	800b184 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae10:	e033      	b.n	800ae7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ae12:	4b1b      	ldr	r3, [pc, #108]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d01d      	beq.n	800ae5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff f9d2 	bl	800a1d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae2e:	4b14      	ldr	r3, [pc, #80]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae38:	4b11      	ldr	r3, [pc, #68]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff f9a8 	bl	800a194 <USBD_SetClassConfig>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d104      	bne.n	800ae54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f8ef 	bl	800b030 <USBD_CtlError>
            return;
 800ae52:	e012      	b.n	800ae7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f995 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800ae5a:	e00e      	b.n	800ae7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f991 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800ae62:	e00a      	b.n	800ae7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f8e2 	bl	800b030 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae6c:	4b04      	ldr	r3, [pc, #16]	@ (800ae80 <USBD_SetConfig+0x118>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff f9ad 	bl	800a1d2 <USBD_ClrClassConfig>
        break;
 800ae78:	bf00      	nop
    }
  }
}
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200009dc 	.word	0x200009dc

0800ae84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	88db      	ldrh	r3, [r3, #6]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d004      	beq.n	800aea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f8c9 	bl	800b030 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae9e:	e022      	b.n	800aee6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	dc02      	bgt.n	800aeb0 <USBD_GetConfig+0x2c>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dc03      	bgt.n	800aeb6 <USBD_GetConfig+0x32>
 800aeae:	e015      	b.n	800aedc <USBD_GetConfig+0x58>
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d00b      	beq.n	800aecc <USBD_GetConfig+0x48>
 800aeb4:	e012      	b.n	800aedc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3308      	adds	r3, #8
 800aec0:	2201      	movs	r2, #1
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f91d 	bl	800b104 <USBD_CtlSendData>
        break;
 800aeca:	e00c      	b.n	800aee6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3304      	adds	r3, #4
 800aed0:	2201      	movs	r2, #1
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f915 	bl	800b104 <USBD_CtlSendData>
        break;
 800aeda:	e004      	b.n	800aee6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f8a6 	bl	800b030 <USBD_CtlError>
        break;
 800aee4:	bf00      	nop
}
 800aee6:	bf00      	nop
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aefe:	3b01      	subs	r3, #1
 800af00:	2b02      	cmp	r3, #2
 800af02:	d81e      	bhi.n	800af42 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d004      	beq.n	800af16 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f88e 	bl	800b030 <USBD_CtlError>
        break;
 800af14:	e01a      	b.n	800af4c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	f043 0202 	orr.w	r2, r3, #2
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	330c      	adds	r3, #12
 800af36:	2202      	movs	r2, #2
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f8e2 	bl	800b104 <USBD_CtlSendData>
      break;
 800af40:	e004      	b.n	800af4c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f873 	bl	800b030 <USBD_CtlError>
      break;
 800af4a:	bf00      	nop
  }
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	885b      	ldrh	r3, [r3, #2]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d106      	bne.n	800af74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f908 	bl	800b184 <USBD_CtlSendStatus>
  }
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af8c:	3b01      	subs	r3, #1
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d80b      	bhi.n	800afaa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	885b      	ldrh	r3, [r3, #2]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d10c      	bne.n	800afb4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f8ee 	bl	800b184 <USBD_CtlSendStatus>
      }
      break;
 800afa8:	e004      	b.n	800afb4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f83f 	bl	800b030 <USBD_CtlError>
      break;
 800afb2:	e000      	b.n	800afb6 <USBD_ClrFeature+0x3a>
      break;
 800afb4:	bf00      	nop
  }
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	785a      	ldrb	r2, [r3, #1]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	3302      	adds	r3, #2
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	3303      	adds	r3, #3
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	b29b      	uxth	r3, r3
 800afea:	4413      	add	r3, r2
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	3304      	adds	r3, #4
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	3305      	adds	r3, #5
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	b29b      	uxth	r3, r3
 800b004:	4413      	add	r3, r2
 800b006:	b29a      	uxth	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	3306      	adds	r3, #6
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	3307      	adds	r3, #7
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4413      	add	r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	80da      	strh	r2, [r3, #6]

}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bc80      	pop	{r7}
 800b02e:	4770      	bx	lr

0800b030 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b03a:	2180      	movs	r1, #128	@ 0x80
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 fe62 	bl	800cd06 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fe5e 	bl	800cd06 <USBD_LL_StallEP>
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d032      	beq.n	800b0ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f000 f834 	bl	800b0d6 <USBD_GetLen>
 800b06e:	4603      	mov	r3, r0
 800b070:	3301      	adds	r3, #1
 800b072:	b29b      	uxth	r3, r3
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	b29a      	uxth	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	75fa      	strb	r2, [r7, #23]
 800b082:	461a      	mov	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4413      	add	r3, r2
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	7812      	ldrb	r2, [r2, #0]
 800b08c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	75fa      	strb	r2, [r7, #23]
 800b094:	461a      	mov	r2, r3
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	4413      	add	r3, r2
 800b09a:	2203      	movs	r2, #3
 800b09c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b09e:	e012      	b.n	800b0c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	60fa      	str	r2, [r7, #12]
 800b0a6:	7dfa      	ldrb	r2, [r7, #23]
 800b0a8:	1c51      	adds	r1, r2, #1
 800b0aa:	75f9      	strb	r1, [r7, #23]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	440a      	add	r2, r1
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	75fa      	strb	r2, [r7, #23]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e8      	bne.n	800b0a0 <USBD_GetString+0x4e>
    }
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b085      	sub	sp, #20
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b0e2:	e005      	b.n	800b0f0 <USBD_GetLen+0x1a>
  {
    len++;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1f5      	bne.n	800b0e4 <USBD_GetLen+0xe>
  }

  return len;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bc80      	pop	{r7}
 800b102:	4770      	bx	lr

0800b104 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2202      	movs	r2, #2
 800b116:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b11a:	88fa      	ldrh	r2, [r7, #6]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b120:	88fa      	ldrh	r2, [r7, #6]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	2100      	movs	r1, #0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f001 fe73 	bl	800ce18 <USBD_LL_Transmit>

  return USBD_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b14a:	88fb      	ldrh	r3, [r7, #6]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	2100      	movs	r1, #0
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f001 fe61 	bl	800ce18 <USBD_LL_Transmit>

  return USBD_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	4613      	mov	r3, r2
 800b16c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f001 fe72 	bl	800ce5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2204      	movs	r2, #4
 800b190:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b194:	2300      	movs	r3, #0
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 fe3c 	bl	800ce18 <USBD_LL_Transmit>

  return USBD_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2205      	movs	r2, #5
 800b1b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 fe4c 	bl	800ce5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b1e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b1e8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d831      	bhi.n	800b254 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1f0:	4b1b      	ldr	r3, [pc, #108]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b1f2:	7a5b      	ldrb	r3, [r3, #9]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	4b19      	ldr	r3, [pc, #100]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b1fe:	4b18      	ldr	r3, [pc, #96]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b200:	7a5b      	ldrb	r3, [r3, #9]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	4a16      	ldr	r2, [pc, #88]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b20e:	4b14      	ldr	r3, [pc, #80]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	461a      	mov	r2, r3
 800b216:	4b12      	ldr	r3, [pc, #72]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b218:	4413      	add	r3, r2
 800b21a:	79fa      	ldrb	r2, [r7, #7]
 800b21c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b21e:	4b10      	ldr	r3, [pc, #64]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b220:	7a5b      	ldrb	r3, [r3, #9]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	b2d1      	uxtb	r1, r2
 800b228:	4a0d      	ldr	r2, [pc, #52]	@ (800b260 <FATFS_LinkDriverEx+0x90>)
 800b22a:	7251      	strb	r1, [r2, #9]
 800b22c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b22e:	7dbb      	ldrb	r3, [r7, #22]
 800b230:	3330      	adds	r3, #48	@ 0x30
 800b232:	b2da      	uxtb	r2, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3301      	adds	r3, #1
 800b23c:	223a      	movs	r2, #58	@ 0x3a
 800b23e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	3302      	adds	r3, #2
 800b244:	222f      	movs	r2, #47	@ 0x2f
 800b246:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3303      	adds	r3, #3
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
}
 800b256:	4618      	mov	r0, r3
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr
 800b260:	200009e0 	.word	0x200009e0

0800b264 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b26e:	2200      	movs	r2, #0
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff ffac 	bl	800b1d0 <FATFS_LinkDriverEx>
 800b278:	4603      	mov	r3, r0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b282:	b480      	push	{r7}
 800b284:	b085      	sub	sp, #20
 800b286:	af00      	add	r7, sp, #0
 800b288:	4603      	mov	r3, r0
 800b28a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b294:	2b84      	cmp	r3, #132	@ 0x84
 800b296:	d005      	beq.n	800b2a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b298:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	3303      	adds	r3, #3
 800b2a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bc80      	pop	{r7}
 800b2ae:	4770      	bx	lr

0800b2b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2b4:	f000 faee 	bl	800b894 <vTaskStartScheduler>
  
  return osOK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c0:	b089      	sub	sp, #36	@ 0x24
 800b2c2:	af04      	add	r7, sp, #16
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d020      	beq.n	800b312 <osThreadCreate+0x54>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01c      	beq.n	800b312 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685c      	ldr	r4, [r3, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	691e      	ldr	r6, [r3, #16]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff ffc9 	bl	800b282 <makeFreeRtosPriority>
 800b2f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2fa:	9202      	str	r2, [sp, #8]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	9100      	str	r1, [sp, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	4632      	mov	r2, r6
 800b304:	4629      	mov	r1, r5
 800b306:	4620      	mov	r0, r4
 800b308:	f000 f8e8 	bl	800b4dc <xTaskCreateStatic>
 800b30c:	4603      	mov	r3, r0
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	e01c      	b.n	800b34c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685c      	ldr	r4, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b31e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff ffab 	bl	800b282 <makeFreeRtosPriority>
 800b32c:	4602      	mov	r2, r0
 800b32e:	f107 030c 	add.w	r3, r7, #12
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	9200      	str	r2, [sp, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	4632      	mov	r2, r6
 800b33a:	4629      	mov	r1, r5
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 f92c 	bl	800b59a <xTaskCreate>
 800b342:	4603      	mov	r3, r0
 800b344:	2b01      	cmp	r3, #1
 800b346:	d001      	beq.n	800b34c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	e000      	b.n	800b34e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b34c:	68fb      	ldr	r3, [r7, #12]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b356 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <osDelay+0x16>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	e000      	b.n	800b36e <osDelay+0x18>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fa5a 	bl	800b828 <vTaskDelay>
  
  return osOK;
 800b374:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b37e:	b480      	push	{r7}
 800b380:	b083      	sub	sp, #12
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f103 0208 	add.w	r2, r3, #8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b396:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f103 0208 	add.w	r2, r3, #8
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f103 0208 	add.w	r2, r3, #8
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bc80      	pop	{r7}
 800b3ba:	4770      	bx	lr

0800b3bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr

0800b3d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	689a      	ldr	r2, [r3, #8]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	601a      	str	r2, [r3, #0]
}
 800b410:	bf00      	nop
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	bc80      	pop	{r7}
 800b418:	4770      	bx	lr

0800b41a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b41a:	b480      	push	{r7}
 800b41c:	b085      	sub	sp, #20
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b430:	d103      	bne.n	800b43a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	e00c      	b.n	800b454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3308      	adds	r3, #8
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e002      	b.n	800b448 <vListInsert+0x2e>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	429a      	cmp	r2, r3
 800b452:	d2f6      	bcs.n	800b442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	601a      	str	r2, [r3, #0]
}
 800b480:	bf00      	nop
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr

0800b48a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6892      	ldr	r2, [r2, #8]
 800b4a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6852      	ldr	r2, [r2, #4]
 800b4aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d103      	bne.n	800b4be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689a      	ldr	r2, [r3, #8]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	1e5a      	subs	r2, r3, #1
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bc80      	pop	{r7}
 800b4da:	4770      	bx	lr

0800b4dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08e      	sub	sp, #56	@ 0x38
 800b4e0:	af04      	add	r7, sp, #16
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	e7fd      	b.n	800b504 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	61fb      	str	r3, [r7, #28]
}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	e7fd      	b.n	800b522 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b526:	23a0      	movs	r3, #160	@ 0xa0
 800b528:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2ba0      	cmp	r3, #160	@ 0xa0
 800b52e:	d00b      	beq.n	800b548 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	61bb      	str	r3, [r7, #24]
}
 800b542:	bf00      	nop
 800b544:	bf00      	nop
 800b546:	e7fd      	b.n	800b544 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01e      	beq.n	800b58c <xTaskCreateStatic+0xb0>
 800b54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01b      	beq.n	800b58c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b556:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b55c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	2202      	movs	r2, #2
 800b562:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b566:	2300      	movs	r3, #0
 800b568:	9303      	str	r3, [sp, #12]
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	9302      	str	r3, [sp, #8]
 800b56e:	f107 0314 	add.w	r3, r7, #20
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 f850 	bl	800b624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b586:	f000 f8e5 	bl	800b754 <prvAddNewTaskToReadyList>
 800b58a:	e001      	b.n	800b590 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b590:	697b      	ldr	r3, [r7, #20]
	}
 800b592:	4618      	mov	r0, r3
 800b594:	3728      	adds	r7, #40	@ 0x28
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b08c      	sub	sp, #48	@ 0x30
 800b59e:	af04      	add	r7, sp, #16
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	60b9      	str	r1, [r7, #8]
 800b5a4:	603b      	str	r3, [r7, #0]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fe9e 	bl	800c2f0 <pvPortMalloc>
 800b5b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00e      	beq.n	800b5da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b5bc:	20a0      	movs	r0, #160	@ 0xa0
 800b5be:	f000 fe97 	bl	800c2f0 <pvPortMalloc>
 800b5c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5d0:	e005      	b.n	800b5de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5d2:	6978      	ldr	r0, [r7, #20]
 800b5d4:	f000 ff54 	bl	800c480 <vPortFree>
 800b5d8:	e001      	b.n	800b5de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d017      	beq.n	800b614 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5ec:	88fa      	ldrh	r2, [r7, #6]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9303      	str	r3, [sp, #12]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	9302      	str	r3, [sp, #8]
 800b5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 f80e 	bl	800b624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b608:	69f8      	ldr	r0, [r7, #28]
 800b60a:	f000 f8a3 	bl	800b754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b60e:	2301      	movs	r3, #1
 800b610:	61bb      	str	r3, [r7, #24]
 800b612:	e002      	b.n	800b61a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b618:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b61a:	69bb      	ldr	r3, [r7, #24]
	}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b63c:	3b01      	subs	r3, #1
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f023 0307 	bic.w	r3, r3, #7
 800b64a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	617b      	str	r3, [r7, #20]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	e012      	b.n	800b69a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	4413      	add	r3, r2
 800b67a:	7819      	ldrb	r1, [r3, #0]
 800b67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	3334      	adds	r3, #52	@ 0x34
 800b684:	460a      	mov	r2, r1
 800b686:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	3301      	adds	r3, #1
 800b698:	61fb      	str	r3, [r7, #28]
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	2b0f      	cmp	r3, #15
 800b69e:	d9e9      	bls.n	800b674 <prvInitialiseNewTask+0x50>
 800b6a0:	e000      	b.n	800b6a4 <prvInitialiseNewTask+0x80>
		{
			break;
 800b6a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	d901      	bls.n	800b6b6 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6b2:	2306      	movs	r3, #6
 800b6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff fe75 	bl	800b3bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fe70 	bl	800b3bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e4:	f1c3 0207 	rsb	r2, r3, #7
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	334c      	adds	r3, #76	@ 0x4c
 800b706:	224c      	movs	r2, #76	@ 0x4c
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f001 fc64 	bl	800cfd8 <memset>
 800b710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b712:	4a0d      	ldr	r2, [pc, #52]	@ (800b748 <prvInitialiseNewTask+0x124>)
 800b714:	651a      	str	r2, [r3, #80]	@ 0x50
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	4a0c      	ldr	r2, [pc, #48]	@ (800b74c <prvInitialiseNewTask+0x128>)
 800b71a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	4a0c      	ldr	r2, [pc, #48]	@ (800b750 <prvInitialiseNewTask+0x12c>)
 800b720:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	69b8      	ldr	r0, [r7, #24]
 800b728:	f000 fc30 	bl	800bf8c <pxPortInitialiseStack>
 800b72c:	4602      	mov	r2, r0
 800b72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b730:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b73c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b73e:	bf00      	nop
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2000215c 	.word	0x2000215c
 800b74c:	200021c4 	.word	0x200021c4
 800b750:	2000222c 	.word	0x2000222c

0800b754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b75c:	f000 fd06 	bl	800c16c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b760:	4b2a      	ldr	r3, [pc, #168]	@ (800b80c <prvAddNewTaskToReadyList+0xb8>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	4a29      	ldr	r2, [pc, #164]	@ (800b80c <prvAddNewTaskToReadyList+0xb8>)
 800b768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b76a:	4b29      	ldr	r3, [pc, #164]	@ (800b810 <prvAddNewTaskToReadyList+0xbc>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d109      	bne.n	800b786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b772:	4a27      	ldr	r2, [pc, #156]	@ (800b810 <prvAddNewTaskToReadyList+0xbc>)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b778:	4b24      	ldr	r3, [pc, #144]	@ (800b80c <prvAddNewTaskToReadyList+0xb8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d110      	bne.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b780:	f000 fad6 	bl	800bd30 <prvInitialiseTaskLists>
 800b784:	e00d      	b.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b786:	4b23      	ldr	r3, [pc, #140]	@ (800b814 <prvAddNewTaskToReadyList+0xc0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b78e:	4b20      	ldr	r3, [pc, #128]	@ (800b810 <prvAddNewTaskToReadyList+0xbc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b798:	429a      	cmp	r2, r3
 800b79a:	d802      	bhi.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b79c:	4a1c      	ldr	r2, [pc, #112]	@ (800b810 <prvAddNewTaskToReadyList+0xbc>)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b818 <prvAddNewTaskToReadyList+0xc4>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b818 <prvAddNewTaskToReadyList+0xc4>)
 800b7aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	409a      	lsls	r2, r3
 800b7b4:	4b19      	ldr	r3, [pc, #100]	@ (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	4a18      	ldr	r2, [pc, #96]	@ (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4a15      	ldr	r2, [pc, #84]	@ (800b820 <prvAddNewTaskToReadyList+0xcc>)
 800b7cc:	441a      	add	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7ff fdfd 	bl	800b3d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7da:	f000 fcf7 	bl	800c1cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7de:	4b0d      	ldr	r3, [pc, #52]	@ (800b814 <prvAddNewTaskToReadyList+0xc0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00e      	beq.n	800b804 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b810 <prvAddNewTaskToReadyList+0xbc>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d207      	bcs.n	800b804 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b824 <prvAddNewTaskToReadyList+0xd0>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b804:	bf00      	nop
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20000aec 	.word	0x20000aec
 800b810:	200009ec 	.word	0x200009ec
 800b814:	20000af8 	.word	0x20000af8
 800b818:	20000b08 	.word	0x20000b08
 800b81c:	20000af4 	.word	0x20000af4
 800b820:	200009f0 	.word	0x200009f0
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d018      	beq.n	800b86c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b83a:	4b14      	ldr	r3, [pc, #80]	@ (800b88c <vTaskDelay+0x64>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <vTaskDelay+0x32>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	60bb      	str	r3, [r7, #8]
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	e7fd      	b.n	800b856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b85a:	f000 f885 	bl	800b968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b85e:	2100      	movs	r1, #0
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fb2d 	bl	800bec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b866:	f000 f88d 	bl	800b984 <xTaskResumeAll>
 800b86a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d107      	bne.n	800b882 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b872:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <vTaskDelay+0x68>)
 800b874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20000b14 	.word	0x20000b14
 800b890:	e000ed04 	.word	0xe000ed04

0800b894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	@ 0x28
 800b898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8a2:	463a      	mov	r2, r7
 800b8a4:	1d39      	adds	r1, r7, #4
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7f5 f8de 	bl	8000a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	9202      	str	r2, [sp, #8]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	460a      	mov	r2, r1
 800b8c2:	4921      	ldr	r1, [pc, #132]	@ (800b948 <vTaskStartScheduler+0xb4>)
 800b8c4:	4821      	ldr	r0, [pc, #132]	@ (800b94c <vTaskStartScheduler+0xb8>)
 800b8c6:	f7ff fe09 	bl	800b4dc <xTaskCreateStatic>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4a20      	ldr	r2, [pc, #128]	@ (800b950 <vTaskStartScheduler+0xbc>)
 800b8ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8d0:	4b1f      	ldr	r3, [pc, #124]	@ (800b950 <vTaskStartScheduler+0xbc>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e001      	b.n	800b8e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d11b      	bne.n	800b920 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	613b      	str	r3, [r7, #16]
}
 800b8fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8fc:	4b15      	ldr	r3, [pc, #84]	@ (800b954 <vTaskStartScheduler+0xc0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	334c      	adds	r3, #76	@ 0x4c
 800b902:	4a15      	ldr	r2, [pc, #84]	@ (800b958 <vTaskStartScheduler+0xc4>)
 800b904:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b906:	4b15      	ldr	r3, [pc, #84]	@ (800b95c <vTaskStartScheduler+0xc8>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b90c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b90e:	4b14      	ldr	r3, [pc, #80]	@ (800b960 <vTaskStartScheduler+0xcc>)
 800b910:	2201      	movs	r2, #1
 800b912:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b914:	4b13      	ldr	r3, [pc, #76]	@ (800b964 <vTaskStartScheduler+0xd0>)
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b91a:	f000 fbb5 	bl	800c088 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b91e:	e00f      	b.n	800b940 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b926:	d10b      	bne.n	800b940 <vTaskStartScheduler+0xac>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60fb      	str	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <vTaskStartScheduler+0xa8>
}
 800b940:	bf00      	nop
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	0800db5c 	.word	0x0800db5c
 800b94c:	0800bd01 	.word	0x0800bd01
 800b950:	20000b10 	.word	0x20000b10
 800b954:	200009ec 	.word	0x200009ec
 800b958:	2000013c 	.word	0x2000013c
 800b95c:	20000b0c 	.word	0x20000b0c
 800b960:	20000af8 	.word	0x20000af8
 800b964:	20000af0 	.word	0x20000af0

0800b968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b96c:	4b04      	ldr	r3, [pc, #16]	@ (800b980 <vTaskSuspendAll+0x18>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	4a03      	ldr	r2, [pc, #12]	@ (800b980 <vTaskSuspendAll+0x18>)
 800b974:	6013      	str	r3, [r2, #0]
}
 800b976:	bf00      	nop
 800b978:	46bd      	mov	sp, r7
 800b97a:	bc80      	pop	{r7}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	20000b14 	.word	0x20000b14

0800b984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b992:	4b42      	ldr	r3, [pc, #264]	@ (800ba9c <xTaskResumeAll+0x118>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	603b      	str	r3, [r7, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9b2:	f000 fbdb 	bl	800c16c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9b6:	4b39      	ldr	r3, [pc, #228]	@ (800ba9c <xTaskResumeAll+0x118>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	4a37      	ldr	r2, [pc, #220]	@ (800ba9c <xTaskResumeAll+0x118>)
 800b9be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c0:	4b36      	ldr	r3, [pc, #216]	@ (800ba9c <xTaskResumeAll+0x118>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d161      	bne.n	800ba8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9c8:	4b35      	ldr	r3, [pc, #212]	@ (800baa0 <xTaskResumeAll+0x11c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d05d      	beq.n	800ba8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9d0:	e02e      	b.n	800ba30 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b9d2:	4b34      	ldr	r3, [pc, #208]	@ (800baa4 <xTaskResumeAll+0x120>)
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	3318      	adds	r3, #24
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff fd53 	bl	800b48a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff fd4e 	bl	800b48a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	409a      	lsls	r2, r3
 800b9f6:	4b2c      	ldr	r3, [pc, #176]	@ (800baa8 <xTaskResumeAll+0x124>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	4a2a      	ldr	r2, [pc, #168]	@ (800baa8 <xTaskResumeAll+0x124>)
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4a27      	ldr	r2, [pc, #156]	@ (800baac <xTaskResumeAll+0x128>)
 800ba0e:	441a      	add	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7ff fcdc 	bl	800b3d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba20:	4b23      	ldr	r3, [pc, #140]	@ (800bab0 <xTaskResumeAll+0x12c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d302      	bcc.n	800ba30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba2a:	4b22      	ldr	r3, [pc, #136]	@ (800bab4 <xTaskResumeAll+0x130>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba30:	4b1c      	ldr	r3, [pc, #112]	@ (800baa4 <xTaskResumeAll+0x120>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1cc      	bne.n	800b9d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba3e:	f000 fa1b 	bl	800be78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba42:	4b1d      	ldr	r3, [pc, #116]	@ (800bab8 <xTaskResumeAll+0x134>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d010      	beq.n	800ba70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba4e:	f000 f837 	bl	800bac0 <xTaskIncrementTick>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba58:	4b16      	ldr	r3, [pc, #88]	@ (800bab4 <xTaskResumeAll+0x130>)
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f1      	bne.n	800ba4e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ba6a:	4b13      	ldr	r3, [pc, #76]	@ (800bab8 <xTaskResumeAll+0x134>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba70:	4b10      	ldr	r3, [pc, #64]	@ (800bab4 <xTaskResumeAll+0x130>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	@ (800babc <xTaskResumeAll+0x138>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba8c:	f000 fb9e 	bl	800c1cc <vPortExitCritical>

	return xAlreadyYielded;
 800ba90:	68bb      	ldr	r3, [r7, #8]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000b14 	.word	0x20000b14
 800baa0:	20000aec 	.word	0x20000aec
 800baa4:	20000aac 	.word	0x20000aac
 800baa8:	20000af4 	.word	0x20000af4
 800baac:	200009f0 	.word	0x200009f0
 800bab0:	200009ec 	.word	0x200009ec
 800bab4:	20000b00 	.word	0x20000b00
 800bab8:	20000afc 	.word	0x20000afc
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bac6:	2300      	movs	r3, #0
 800bac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baca:	4b51      	ldr	r3, [pc, #324]	@ (800bc10 <xTaskIncrementTick+0x150>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f040 808e 	bne.w	800bbf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bad4:	4b4f      	ldr	r3, [pc, #316]	@ (800bc14 <xTaskIncrementTick+0x154>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800badc:	4a4d      	ldr	r2, [pc, #308]	@ (800bc14 <xTaskIncrementTick+0x154>)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d121      	bne.n	800bb2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bae8:	4b4b      	ldr	r3, [pc, #300]	@ (800bc18 <xTaskIncrementTick+0x158>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00b      	beq.n	800bb0a <xTaskIncrementTick+0x4a>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	603b      	str	r3, [r7, #0]
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	e7fd      	b.n	800bb06 <xTaskIncrementTick+0x46>
 800bb0a:	4b43      	ldr	r3, [pc, #268]	@ (800bc18 <xTaskIncrementTick+0x158>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	4b42      	ldr	r3, [pc, #264]	@ (800bc1c <xTaskIncrementTick+0x15c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a40      	ldr	r2, [pc, #256]	@ (800bc18 <xTaskIncrementTick+0x158>)
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	4a40      	ldr	r2, [pc, #256]	@ (800bc1c <xTaskIncrementTick+0x15c>)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	4b40      	ldr	r3, [pc, #256]	@ (800bc20 <xTaskIncrementTick+0x160>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3301      	adds	r3, #1
 800bb24:	4a3e      	ldr	r2, [pc, #248]	@ (800bc20 <xTaskIncrementTick+0x160>)
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	f000 f9a6 	bl	800be78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb2c:	4b3d      	ldr	r3, [pc, #244]	@ (800bc24 <xTaskIncrementTick+0x164>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d34d      	bcc.n	800bbd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb36:	4b38      	ldr	r3, [pc, #224]	@ (800bc18 <xTaskIncrementTick+0x158>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <xTaskIncrementTick+0x84>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <xTaskIncrementTick+0x86>
 800bb44:	2300      	movs	r3, #0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d004      	beq.n	800bb54 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4a:	4b36      	ldr	r3, [pc, #216]	@ (800bc24 <xTaskIncrementTick+0x164>)
 800bb4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb50:	601a      	str	r2, [r3, #0]
					break;
 800bb52:	e03e      	b.n	800bbd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bb54:	4b30      	ldr	r3, [pc, #192]	@ (800bc18 <xTaskIncrementTick+0x158>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d203      	bcs.n	800bb74 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb6c:	4a2d      	ldr	r2, [pc, #180]	@ (800bc24 <xTaskIncrementTick+0x164>)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6013      	str	r3, [r2, #0]
						break;
 800bb72:	e02e      	b.n	800bbd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	3304      	adds	r3, #4
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fc86 	bl	800b48a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	3318      	adds	r3, #24
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff fc7d 	bl	800b48a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb94:	2201      	movs	r2, #1
 800bb96:	409a      	lsls	r2, r3
 800bb98:	4b23      	ldr	r3, [pc, #140]	@ (800bc28 <xTaskIncrementTick+0x168>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	4a22      	ldr	r2, [pc, #136]	@ (800bc28 <xTaskIncrementTick+0x168>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4a1f      	ldr	r2, [pc, #124]	@ (800bc2c <xTaskIncrementTick+0x16c>)
 800bbb0:	441a      	add	r2, r3
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7ff fc0b 	bl	800b3d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc30 <xTaskIncrementTick+0x170>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d3b4      	bcc.n	800bb36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbd0:	e7b1      	b.n	800bb36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbd2:	4b17      	ldr	r3, [pc, #92]	@ (800bc30 <xTaskIncrementTick+0x170>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd8:	4914      	ldr	r1, [pc, #80]	@ (800bc2c <xTaskIncrementTick+0x16c>)
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	440b      	add	r3, r1
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d907      	bls.n	800bbfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bbea:	2301      	movs	r3, #1
 800bbec:	617b      	str	r3, [r7, #20]
 800bbee:	e004      	b.n	800bbfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bbf0:	4b10      	ldr	r3, [pc, #64]	@ (800bc34 <xTaskIncrementTick+0x174>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	4a0f      	ldr	r2, [pc, #60]	@ (800bc34 <xTaskIncrementTick+0x174>)
 800bbf8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	@ (800bc38 <xTaskIncrementTick+0x178>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d001      	beq.n	800bc06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bc02:	2301      	movs	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc06:	697b      	ldr	r3, [r7, #20]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000b14 	.word	0x20000b14
 800bc14:	20000af0 	.word	0x20000af0
 800bc18:	20000aa4 	.word	0x20000aa4
 800bc1c:	20000aa8 	.word	0x20000aa8
 800bc20:	20000b04 	.word	0x20000b04
 800bc24:	20000b0c 	.word	0x20000b0c
 800bc28:	20000af4 	.word	0x20000af4
 800bc2c:	200009f0 	.word	0x200009f0
 800bc30:	200009ec 	.word	0x200009ec
 800bc34:	20000afc 	.word	0x20000afc
 800bc38:	20000b00 	.word	0x20000b00

0800bc3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc42:	4b29      	ldr	r3, [pc, #164]	@ (800bce8 <vTaskSwitchContext+0xac>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc4a:	4b28      	ldr	r3, [pc, #160]	@ (800bcec <vTaskSwitchContext+0xb0>)
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc50:	e045      	b.n	800bcde <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800bc52:	4b26      	ldr	r3, [pc, #152]	@ (800bcec <vTaskSwitchContext+0xb0>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bc58:	4b25      	ldr	r3, [pc, #148]	@ (800bcf0 <vTaskSwitchContext+0xb4>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	fab3 f383 	clz	r3, r3
 800bc64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc66:	7afb      	ldrb	r3, [r7, #11]
 800bc68:	f1c3 031f 	rsb	r3, r3, #31
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	4921      	ldr	r1, [pc, #132]	@ (800bcf4 <vTaskSwitchContext+0xb8>)
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	4613      	mov	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	440b      	add	r3, r1
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10b      	bne.n	800bc9a <vTaskSwitchContext+0x5e>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	607b      	str	r3, [r7, #4]
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	e7fd      	b.n	800bc96 <vTaskSwitchContext+0x5a>
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4a13      	ldr	r2, [pc, #76]	@ (800bcf4 <vTaskSwitchContext+0xb8>)
 800bca6:	4413      	add	r3, r2
 800bca8:	613b      	str	r3, [r7, #16]
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	605a      	str	r2, [r3, #4]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	3308      	adds	r3, #8
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d104      	bne.n	800bcca <vTaskSwitchContext+0x8e>
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	605a      	str	r2, [r3, #4]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	4a09      	ldr	r2, [pc, #36]	@ (800bcf8 <vTaskSwitchContext+0xbc>)
 800bcd2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcd4:	4b08      	ldr	r3, [pc, #32]	@ (800bcf8 <vTaskSwitchContext+0xbc>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	334c      	adds	r3, #76	@ 0x4c
 800bcda:	4a08      	ldr	r2, [pc, #32]	@ (800bcfc <vTaskSwitchContext+0xc0>)
 800bcdc:	6013      	str	r3, [r2, #0]
}
 800bcde:	bf00      	nop
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bc80      	pop	{r7}
 800bce6:	4770      	bx	lr
 800bce8:	20000b14 	.word	0x20000b14
 800bcec:	20000b00 	.word	0x20000b00
 800bcf0:	20000af4 	.word	0x20000af4
 800bcf4:	200009f0 	.word	0x200009f0
 800bcf8:	200009ec 	.word	0x200009ec
 800bcfc:	2000013c 	.word	0x2000013c

0800bd00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd08:	f000 f852 	bl	800bdb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd0c:	4b06      	ldr	r3, [pc, #24]	@ (800bd28 <prvIdleTask+0x28>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d9f9      	bls.n	800bd08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd14:	4b05      	ldr	r3, [pc, #20]	@ (800bd2c <prvIdleTask+0x2c>)
 800bd16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd24:	e7f0      	b.n	800bd08 <prvIdleTask+0x8>
 800bd26:	bf00      	nop
 800bd28:	200009f0 	.word	0x200009f0
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd36:	2300      	movs	r3, #0
 800bd38:	607b      	str	r3, [r7, #4]
 800bd3a:	e00c      	b.n	800bd56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4a12      	ldr	r2, [pc, #72]	@ (800bd90 <prvInitialiseTaskLists+0x60>)
 800bd48:	4413      	add	r3, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff fb17 	bl	800b37e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3301      	adds	r3, #1
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b06      	cmp	r3, #6
 800bd5a:	d9ef      	bls.n	800bd3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd5c:	480d      	ldr	r0, [pc, #52]	@ (800bd94 <prvInitialiseTaskLists+0x64>)
 800bd5e:	f7ff fb0e 	bl	800b37e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd62:	480d      	ldr	r0, [pc, #52]	@ (800bd98 <prvInitialiseTaskLists+0x68>)
 800bd64:	f7ff fb0b 	bl	800b37e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd68:	480c      	ldr	r0, [pc, #48]	@ (800bd9c <prvInitialiseTaskLists+0x6c>)
 800bd6a:	f7ff fb08 	bl	800b37e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd6e:	480c      	ldr	r0, [pc, #48]	@ (800bda0 <prvInitialiseTaskLists+0x70>)
 800bd70:	f7ff fb05 	bl	800b37e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd74:	480b      	ldr	r0, [pc, #44]	@ (800bda4 <prvInitialiseTaskLists+0x74>)
 800bd76:	f7ff fb02 	bl	800b37e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bda8 <prvInitialiseTaskLists+0x78>)
 800bd7c:	4a05      	ldr	r2, [pc, #20]	@ (800bd94 <prvInitialiseTaskLists+0x64>)
 800bd7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd80:	4b0a      	ldr	r3, [pc, #40]	@ (800bdac <prvInitialiseTaskLists+0x7c>)
 800bd82:	4a05      	ldr	r2, [pc, #20]	@ (800bd98 <prvInitialiseTaskLists+0x68>)
 800bd84:	601a      	str	r2, [r3, #0]
}
 800bd86:	bf00      	nop
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	200009f0 	.word	0x200009f0
 800bd94:	20000a7c 	.word	0x20000a7c
 800bd98:	20000a90 	.word	0x20000a90
 800bd9c:	20000aac 	.word	0x20000aac
 800bda0:	20000ac0 	.word	0x20000ac0
 800bda4:	20000ad8 	.word	0x20000ad8
 800bda8:	20000aa4 	.word	0x20000aa4
 800bdac:	20000aa8 	.word	0x20000aa8

0800bdb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdb6:	e019      	b.n	800bdec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdb8:	f000 f9d8 	bl	800c16c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bdbc:	4b10      	ldr	r3, [pc, #64]	@ (800be00 <prvCheckTasksWaitingTermination+0x50>)
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fb5e 	bl	800b48a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdce:	4b0d      	ldr	r3, [pc, #52]	@ (800be04 <prvCheckTasksWaitingTermination+0x54>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	4a0b      	ldr	r2, [pc, #44]	@ (800be04 <prvCheckTasksWaitingTermination+0x54>)
 800bdd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdd8:	4b0b      	ldr	r3, [pc, #44]	@ (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4a0a      	ldr	r2, [pc, #40]	@ (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bde0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bde2:	f000 f9f3 	bl	800c1cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f810 	bl	800be0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdec:	4b06      	ldr	r3, [pc, #24]	@ (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e1      	bne.n	800bdb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20000ac0 	.word	0x20000ac0
 800be04:	20000aec 	.word	0x20000aec
 800be08:	20000ad4 	.word	0x20000ad4

0800be0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	334c      	adds	r3, #76	@ 0x4c
 800be18:	4618      	mov	r0, r3
 800be1a:	f001 f8e5 	bl	800cfe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be24:	2b00      	cmp	r3, #0
 800be26:	d108      	bne.n	800be3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fb27 	bl	800c480 <vPortFree>
				vPortFree( pxTCB );
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fb24 	bl	800c480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be38:	e019      	b.n	800be6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be40:	2b01      	cmp	r3, #1
 800be42:	d103      	bne.n	800be4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fb1b 	bl	800c480 <vPortFree>
	}
 800be4a:	e010      	b.n	800be6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be52:	2b02      	cmp	r3, #2
 800be54:	d00b      	beq.n	800be6e <prvDeleteTCB+0x62>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	60fb      	str	r3, [r7, #12]
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <prvDeleteTCB+0x5e>
	}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be7e:	4b0e      	ldr	r3, [pc, #56]	@ (800beb8 <prvResetNextTaskUnblockTime+0x40>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <prvResetNextTaskUnblockTime+0x14>
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <prvResetNextTaskUnblockTime+0x16>
 800be8c:	2300      	movs	r3, #0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d004      	beq.n	800be9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be92:	4b0a      	ldr	r3, [pc, #40]	@ (800bebc <prvResetNextTaskUnblockTime+0x44>)
 800be94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be9a:	e008      	b.n	800beae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be9c:	4b06      	ldr	r3, [pc, #24]	@ (800beb8 <prvResetNextTaskUnblockTime+0x40>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	4a04      	ldr	r2, [pc, #16]	@ (800bebc <prvResetNextTaskUnblockTime+0x44>)
 800beac:	6013      	str	r3, [r2, #0]
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr
 800beb8:	20000aa4 	.word	0x20000aa4
 800bebc:	20000b0c 	.word	0x20000b0c

0800bec0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beca:	4b29      	ldr	r3, [pc, #164]	@ (800bf70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed0:	4b28      	ldr	r3, [pc, #160]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3304      	adds	r3, #4
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fad7 	bl	800b48a <uxListRemove>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10b      	bne.n	800befa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bee2:	4b24      	ldr	r3, [pc, #144]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee8:	2201      	movs	r2, #1
 800beea:	fa02 f303 	lsl.w	r3, r2, r3
 800beee:	43da      	mvns	r2, r3
 800bef0:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4013      	ands	r3, r2
 800bef6:	4a20      	ldr	r2, [pc, #128]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf00:	d10a      	bne.n	800bf18 <prvAddCurrentTaskToDelayedList+0x58>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf08:	4b1a      	ldr	r3, [pc, #104]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	4619      	mov	r1, r3
 800bf10:	481a      	ldr	r0, [pc, #104]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf12:	f7ff fa5f 	bl	800b3d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf16:	e026      	b.n	800bf66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf20:	4b14      	ldr	r3, [pc, #80]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d209      	bcs.n	800bf44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf30:	4b13      	ldr	r3, [pc, #76]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	4b0f      	ldr	r3, [pc, #60]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f7ff fa6c 	bl	800b41a <vListInsert>
}
 800bf42:	e010      	b.n	800bf66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf44:	4b0f      	ldr	r3, [pc, #60]	@ (800bf84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	4b0a      	ldr	r3, [pc, #40]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4610      	mov	r0, r2
 800bf52:	f7ff fa62 	bl	800b41a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf56:	4b0c      	ldr	r3, [pc, #48]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d202      	bcs.n	800bf66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf60:	4a09      	ldr	r2, [pc, #36]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6013      	str	r3, [r2, #0]
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20000af0 	.word	0x20000af0
 800bf74:	200009ec 	.word	0x200009ec
 800bf78:	20000af4 	.word	0x20000af4
 800bf7c:	20000ad8 	.word	0x20000ad8
 800bf80:	20000aa8 	.word	0x20000aa8
 800bf84:	20000aa4 	.word	0x20000aa4
 800bf88:	20000b0c 	.word	0x20000b0c

0800bf8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3b04      	subs	r3, #4
 800bf9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3b04      	subs	r3, #4
 800bfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	f023 0201 	bic.w	r2, r3, #1
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3b04      	subs	r3, #4
 800bfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfbc:	4a08      	ldr	r2, [pc, #32]	@ (800bfe0 <pxPortInitialiseStack+0x54>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3b14      	subs	r3, #20
 800bfc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3b20      	subs	r3, #32
 800bfd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr
 800bfe0:	0800bfe5 	.word	0x0800bfe5

0800bfe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfee:	4b12      	ldr	r3, [pc, #72]	@ (800c038 <prvTaskExitError+0x54>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bff6:	d00b      	beq.n	800c010 <prvTaskExitError+0x2c>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	60fb      	str	r3, [r7, #12]
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	e7fd      	b.n	800c00c <prvTaskExitError+0x28>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60bb      	str	r3, [r7, #8]
}
 800c022:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c024:	bf00      	nop
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0fc      	beq.n	800c026 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c02c:	bf00      	nop
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	bc80      	pop	{r7}
 800c036:	4770      	bx	lr
 800c038:	200000c8 	.word	0x200000c8
 800c03c:	00000000 	.word	0x00000000

0800c040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c040:	4b07      	ldr	r3, [pc, #28]	@ (800c060 <pxCurrentTCBConst2>)
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	6808      	ldr	r0, [r1, #0]
 800c046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c04a:	f380 8809 	msr	PSP, r0
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8811 	msr	BASEPRI, r0
 800c05a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c05e:	4770      	bx	lr

0800c060 <pxCurrentTCBConst2>:
 800c060:	200009ec 	.word	0x200009ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop

0800c068 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c068:	4806      	ldr	r0, [pc, #24]	@ (800c084 <prvPortStartFirstTask+0x1c>)
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	6800      	ldr	r0, [r0, #0]
 800c06e:	f380 8808 	msr	MSP, r0
 800c072:	b662      	cpsie	i
 800c074:	b661      	cpsie	f
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	df00      	svc	0
 800c080:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c082:	bf00      	nop
 800c084:	e000ed08 	.word	0xe000ed08

0800c088 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c08e:	4b32      	ldr	r3, [pc, #200]	@ (800c158 <xPortStartScheduler+0xd0>)
 800c090:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	b2db      	uxtb	r3, r3
 800c098:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	22ff      	movs	r2, #255	@ 0xff
 800c09e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c15c <xPortStartScheduler+0xd4>)
 800c0b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0b6:	4b2a      	ldr	r3, [pc, #168]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c0b8:	2207      	movs	r2, #7
 800c0ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0bc:	e009      	b.n	800c0d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0be:	4b28      	ldr	r3, [pc, #160]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	4a26      	ldr	r2, [pc, #152]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c0c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0da:	2b80      	cmp	r3, #128	@ 0x80
 800c0dc:	d0ef      	beq.n	800c0be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0de:	4b20      	ldr	r3, [pc, #128]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f1c3 0307 	rsb	r3, r3, #7
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d00b      	beq.n	800c102 <xPortStartScheduler+0x7a>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	60bb      	str	r3, [r7, #8]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c102:	4b17      	ldr	r3, [pc, #92]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	4a15      	ldr	r2, [pc, #84]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c10a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c10c:	4b14      	ldr	r3, [pc, #80]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c114:	4a12      	ldr	r2, [pc, #72]	@ (800c160 <xPortStartScheduler+0xd8>)
 800c116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c120:	4b10      	ldr	r3, [pc, #64]	@ (800c164 <xPortStartScheduler+0xdc>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a0f      	ldr	r2, [pc, #60]	@ (800c164 <xPortStartScheduler+0xdc>)
 800c126:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c12a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c12c:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <xPortStartScheduler+0xdc>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a0c      	ldr	r2, [pc, #48]	@ (800c164 <xPortStartScheduler+0xdc>)
 800c132:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c138:	f000 f8b8 	bl	800c2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	@ (800c168 <xPortStartScheduler+0xe0>)
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c142:	f7ff ff91 	bl	800c068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c146:	f7ff fd79 	bl	800bc3c <vTaskSwitchContext>
	prvTaskExitError();
 800c14a:	f7ff ff4b 	bl	800bfe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	e000e400 	.word	0xe000e400
 800c15c:	20000b18 	.word	0x20000b18
 800c160:	20000b1c 	.word	0x20000b1c
 800c164:	e000ed20 	.word	0xe000ed20
 800c168:	200000c8 	.word	0x200000c8

0800c16c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	607b      	str	r3, [r7, #4]
}
 800c184:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c186:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <vPortEnterCritical+0x58>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3301      	adds	r3, #1
 800c18c:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c4 <vPortEnterCritical+0x58>)
 800c18e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c190:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c4 <vPortEnterCritical+0x58>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d110      	bne.n	800c1ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c198:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c8 <vPortEnterCritical+0x5c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00b      	beq.n	800c1ba <vPortEnterCritical+0x4e>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	603b      	str	r3, [r7, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop
 800c1b8:	e7fd      	b.n	800c1b6 <vPortEnterCritical+0x4a>
	}
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bc80      	pop	{r7}
 800c1c2:	4770      	bx	lr
 800c1c4:	200000c8 	.word	0x200000c8
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1d2:	4b12      	ldr	r3, [pc, #72]	@ (800c21c <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10b      	bne.n	800c1f2 <vPortExitCritical+0x26>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	607b      	str	r3, [r7, #4]
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	e7fd      	b.n	800c1ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4a08      	ldr	r2, [pc, #32]	@ (800c21c <vPortExitCritical+0x50>)
 800c1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1fc:	4b07      	ldr	r3, [pc, #28]	@ (800c21c <vPortExitCritical+0x50>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d105      	bne.n	800c210 <vPortExitCritical+0x44>
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c20e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	200000c8 	.word	0x200000c8

0800c220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c220:	f3ef 8009 	mrs	r0, PSP
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4b0d      	ldr	r3, [pc, #52]	@ (800c260 <pxCurrentTCBConst>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c230:	6010      	str	r0, [r2, #0]
 800c232:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c236:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c23a:	f380 8811 	msr	BASEPRI, r0
 800c23e:	f7ff fcfd 	bl	800bc3c <vTaskSwitchContext>
 800c242:	f04f 0000 	mov.w	r0, #0
 800c246:	f380 8811 	msr	BASEPRI, r0
 800c24a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c24e:	6819      	ldr	r1, [r3, #0]
 800c250:	6808      	ldr	r0, [r1, #0]
 800c252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c256:	f380 8809 	msr	PSP, r0
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	4770      	bx	lr

0800c260 <pxCurrentTCBConst>:
 800c260:	200009ec 	.word	0x200009ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	607b      	str	r3, [r7, #4]
}
 800c280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c282:	f7ff fc1d 	bl	800bac0 <xTaskIncrementTick>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c28c:	4b06      	ldr	r3, [pc, #24]	@ (800c2a8 <SysTick_Handler+0x40>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f383 8811 	msr	BASEPRI, r3
}
 800c29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2dc <vPortSetupTimerInterrupt+0x30>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2bc:	4b09      	ldr	r3, [pc, #36]	@ (800c2e4 <vPortSetupTimerInterrupt+0x38>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a09      	ldr	r2, [pc, #36]	@ (800c2e8 <vPortSetupTimerInterrupt+0x3c>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	099b      	lsrs	r3, r3, #6
 800c2c8:	4a08      	ldr	r2, [pc, #32]	@ (800c2ec <vPortSetupTimerInterrupt+0x40>)
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ce:	4b03      	ldr	r3, [pc, #12]	@ (800c2dc <vPortSetupTimerInterrupt+0x30>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bc80      	pop	{r7}
 800c2da:	4770      	bx	lr
 800c2dc:	e000e010 	.word	0xe000e010
 800c2e0:	e000e018 	.word	0xe000e018
 800c2e4:	20000000 	.word	0x20000000
 800c2e8:	10624dd3 	.word	0x10624dd3
 800c2ec:	e000e014 	.word	0xe000e014

0800c2f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	@ 0x28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2fc:	f7ff fb34 	bl	800b968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c300:	4b5a      	ldr	r3, [pc, #360]	@ (800c46c <pvPortMalloc+0x17c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c308:	f000 f916 	bl	800c538 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c30c:	4b58      	ldr	r3, [pc, #352]	@ (800c470 <pvPortMalloc+0x180>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4013      	ands	r3, r2
 800c314:	2b00      	cmp	r3, #0
 800c316:	f040 8090 	bne.w	800c43a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d01e      	beq.n	800c35e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c320:	2208      	movs	r2, #8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4413      	add	r3, r2
 800c326:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f003 0307 	and.w	r3, r3, #7
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d015      	beq.n	800c35e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f023 0307 	bic.w	r3, r3, #7
 800c338:	3308      	adds	r3, #8
 800c33a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <pvPortMalloc+0x6e>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	617b      	str	r3, [r7, #20]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d06a      	beq.n	800c43a <pvPortMalloc+0x14a>
 800c364:	4b43      	ldr	r3, [pc, #268]	@ (800c474 <pvPortMalloc+0x184>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d865      	bhi.n	800c43a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c36e:	4b42      	ldr	r3, [pc, #264]	@ (800c478 <pvPortMalloc+0x188>)
 800c370:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c372:	4b41      	ldr	r3, [pc, #260]	@ (800c478 <pvPortMalloc+0x188>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c378:	e004      	b.n	800c384 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d903      	bls.n	800c396 <pvPortMalloc+0xa6>
 800c38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f1      	bne.n	800c37a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c396:	4b35      	ldr	r3, [pc, #212]	@ (800c46c <pvPortMalloc+0x17c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d04c      	beq.n	800c43a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2208      	movs	r2, #8
 800c3a6:	4413      	add	r3, r2
 800c3a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d920      	bls.n	800c404 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	f003 0307 	and.w	r3, r3, #7
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00b      	beq.n	800c3ec <pvPortMalloc+0xfc>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	613b      	str	r3, [r7, #16]
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	e7fd      	b.n	800c3e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	1ad2      	subs	r2, r2, r3
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3fe:	69b8      	ldr	r0, [r7, #24]
 800c400:	f000 f8fc 	bl	800c5fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c404:	4b1b      	ldr	r3, [pc, #108]	@ (800c474 <pvPortMalloc+0x184>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	4a19      	ldr	r2, [pc, #100]	@ (800c474 <pvPortMalloc+0x184>)
 800c410:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c412:	4b18      	ldr	r3, [pc, #96]	@ (800c474 <pvPortMalloc+0x184>)
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	4b19      	ldr	r3, [pc, #100]	@ (800c47c <pvPortMalloc+0x18c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d203      	bcs.n	800c426 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c41e:	4b15      	ldr	r3, [pc, #84]	@ (800c474 <pvPortMalloc+0x184>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a16      	ldr	r2, [pc, #88]	@ (800c47c <pvPortMalloc+0x18c>)
 800c424:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	4b11      	ldr	r3, [pc, #68]	@ (800c470 <pvPortMalloc+0x180>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	431a      	orrs	r2, r3
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c43a:	f7ff faa3 	bl	800b984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	f003 0307 	and.w	r3, r3, #7
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <pvPortMalloc+0x170>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	e7fd      	b.n	800c45c <pvPortMalloc+0x16c>
	return pvReturn;
 800c460:	69fb      	ldr	r3, [r7, #28]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3728      	adds	r7, #40	@ 0x28
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20001728 	.word	0x20001728
 800c470:	20001734 	.word	0x20001734
 800c474:	2000172c 	.word	0x2000172c
 800c478:	20001720 	.word	0x20001720
 800c47c:	20001730 	.word	0x20001730

0800c480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d04a      	beq.n	800c528 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c492:	2308      	movs	r3, #8
 800c494:	425b      	negs	r3, r3
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4413      	add	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	4b22      	ldr	r3, [pc, #136]	@ (800c530 <vPortFree+0xb0>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <vPortFree+0x46>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	60fb      	str	r3, [r7, #12]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <vPortFree+0x66>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	60bb      	str	r3, [r7, #8]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	4b11      	ldr	r3, [pc, #68]	@ (800c530 <vPortFree+0xb0>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d019      	beq.n	800c528 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d115      	bne.n	800c528 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	4b0b      	ldr	r3, [pc, #44]	@ (800c530 <vPortFree+0xb0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	43db      	mvns	r3, r3
 800c506:	401a      	ands	r2, r3
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c50c:	f7ff fa2c 	bl	800b968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	4b07      	ldr	r3, [pc, #28]	@ (800c534 <vPortFree+0xb4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4413      	add	r3, r2
 800c51a:	4a06      	ldr	r2, [pc, #24]	@ (800c534 <vPortFree+0xb4>)
 800c51c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f000 f86c 	bl	800c5fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c524:	f7ff fa2e 	bl	800b984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c528:	bf00      	nop
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20001734 	.word	0x20001734
 800c534:	2000172c 	.word	0x2000172c

0800c538 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c53e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c544:	4b27      	ldr	r3, [pc, #156]	@ (800c5e4 <prvHeapInit+0xac>)
 800c546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00c      	beq.n	800c56c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3307      	adds	r3, #7
 800c556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0307 	bic.w	r3, r3, #7
 800c55e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	4a1f      	ldr	r2, [pc, #124]	@ (800c5e4 <prvHeapInit+0xac>)
 800c568:	4413      	add	r3, r2
 800c56a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c570:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e8 <prvHeapInit+0xb0>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c576:	4b1c      	ldr	r3, [pc, #112]	@ (800c5e8 <prvHeapInit+0xb0>)
 800c578:	2200      	movs	r2, #0
 800c57a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	4413      	add	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c584:	2208      	movs	r2, #8
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	1a9b      	subs	r3, r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0307 	bic.w	r3, r3, #7
 800c592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4a15      	ldr	r2, [pc, #84]	@ (800c5ec <prvHeapInit+0xb4>)
 800c598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c59a:	4b14      	ldr	r3, [pc, #80]	@ (800c5ec <prvHeapInit+0xb4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5a2:	4b12      	ldr	r3, [pc, #72]	@ (800c5ec <prvHeapInit+0xb4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	1ad2      	subs	r2, r2, r3
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c5ec <prvHeapInit+0xb4>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4a0a      	ldr	r2, [pc, #40]	@ (800c5f0 <prvHeapInit+0xb8>)
 800c5c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	4a09      	ldr	r2, [pc, #36]	@ (800c5f4 <prvHeapInit+0xbc>)
 800c5ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5d0:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <prvHeapInit+0xc0>)
 800c5d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c5d6:	601a      	str	r2, [r3, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bc80      	pop	{r7}
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20000b20 	.word	0x20000b20
 800c5e8:	20001720 	.word	0x20001720
 800c5ec:	20001728 	.word	0x20001728
 800c5f0:	20001730 	.word	0x20001730
 800c5f4:	2000172c 	.word	0x2000172c
 800c5f8:	20001734 	.word	0x20001734

0800c5fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c604:	4b27      	ldr	r3, [pc, #156]	@ (800c6a4 <prvInsertBlockIntoFreeList+0xa8>)
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	e002      	b.n	800c610 <prvInsertBlockIntoFreeList+0x14>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	60fb      	str	r3, [r7, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d8f7      	bhi.n	800c60a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	4413      	add	r3, r2
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d108      	bne.n	800c63e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	441a      	add	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	441a      	add	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d118      	bne.n	800c684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4b14      	ldr	r3, [pc, #80]	@ (800c6a8 <prvInsertBlockIntoFreeList+0xac>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d00d      	beq.n	800c67a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	441a      	add	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e008      	b.n	800c68c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c67a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <prvInsertBlockIntoFreeList+0xac>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	e003      	b.n	800c68c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d002      	beq.n	800c69a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c69a:	bf00      	nop
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bc80      	pop	{r7}
 800c6a2:	4770      	bx	lr
 800c6a4:	20001720 	.word	0x20001720
 800c6a8:	20001728 	.word	0x20001728

0800c6ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	4912      	ldr	r1, [pc, #72]	@ (800c6fc <MX_USB_DEVICE_Init+0x50>)
 800c6b4:	4812      	ldr	r0, [pc, #72]	@ (800c700 <MX_USB_DEVICE_Init+0x54>)
 800c6b6:	f7fd fd13 	bl	800a0e0 <USBD_Init>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6c0:	f7f4 fc88 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c6c4:	490f      	ldr	r1, [pc, #60]	@ (800c704 <MX_USB_DEVICE_Init+0x58>)
 800c6c6:	480e      	ldr	r0, [pc, #56]	@ (800c700 <MX_USB_DEVICE_Init+0x54>)
 800c6c8:	f7fd fd35 	bl	800a136 <USBD_RegisterClass>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6d2:	f7f4 fc7f 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c6d6:	490c      	ldr	r1, [pc, #48]	@ (800c708 <MX_USB_DEVICE_Init+0x5c>)
 800c6d8:	4809      	ldr	r0, [pc, #36]	@ (800c700 <MX_USB_DEVICE_Init+0x54>)
 800c6da:	f7fc fce1 	bl	80090a0 <USBD_MSC_RegisterStorage>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d001      	beq.n	800c6e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6e4:	f7f4 fc76 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6e8:	4805      	ldr	r0, [pc, #20]	@ (800c700 <MX_USB_DEVICE_Init+0x54>)
 800c6ea:	f7fd fd3d 	bl	800a168 <USBD_Start>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6f4:	f7f4 fc6e 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6f8:	bf00      	nop
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	200000cc 	.word	0x200000cc
 800c700:	20001738 	.word	0x20001738
 800c704:	20000024 	.word	0x20000024
 800c708:	2000011c 	.word	0x2000011c

0800c70c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2212      	movs	r2, #18
 800c71c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c71e:	4b03      	ldr	r3, [pc, #12]	@ (800c72c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	200000e8 	.word	0x200000e8

0800c730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2204      	movs	r2, #4
 800c740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c742:	4b03      	ldr	r3, [pc, #12]	@ (800c750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	bc80      	pop	{r7}
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	200000fc 	.word	0x200000fc

0800c754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	4907      	ldr	r1, [pc, #28]	@ (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
 800c76a:	4808      	ldr	r0, [pc, #32]	@ (800c78c <USBD_FS_ProductStrDescriptor+0x38>)
 800c76c:	f7fe fc71 	bl	800b052 <USBD_GetString>
 800c770:	e004      	b.n	800c77c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4904      	ldr	r1, [pc, #16]	@ (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
 800c776:	4805      	ldr	r0, [pc, #20]	@ (800c78c <USBD_FS_ProductStrDescriptor+0x38>)
 800c778:	f7fe fc6b 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c77c:	4b02      	ldr	r3, [pc, #8]	@ (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200019fc 	.word	0x200019fc
 800c78c:	0800db64 	.word	0x0800db64

0800c790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4904      	ldr	r1, [pc, #16]	@ (800c7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7a0:	4804      	ldr	r0, [pc, #16]	@ (800c7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7a2:	f7fe fc56 	bl	800b052 <USBD_GetString>
  return USBD_StrDesc;
 800c7a6:	4b02      	ldr	r3, [pc, #8]	@ (800c7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200019fc 	.word	0x200019fc
 800c7b4:	0800db78 	.word	0x0800db78

0800c7b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	6039      	str	r1, [r7, #0]
 800c7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	221a      	movs	r2, #26
 800c7c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ca:	f000 f843 	bl	800c854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7ce:	4b02      	ldr	r3, [pc, #8]	@ (800c7d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20000100 	.word	0x20000100

0800c7dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d105      	bne.n	800c7fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	4907      	ldr	r1, [pc, #28]	@ (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7f2:	4808      	ldr	r0, [pc, #32]	@ (800c814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7f4:	f7fe fc2d 	bl	800b052 <USBD_GetString>
 800c7f8:	e004      	b.n	800c804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	4904      	ldr	r1, [pc, #16]	@ (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7fe:	4805      	ldr	r0, [pc, #20]	@ (800c814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c800:	f7fe fc27 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c804:	4b02      	ldr	r3, [pc, #8]	@ (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	200019fc 	.word	0x200019fc
 800c814:	0800db8c 	.word	0x0800db8c

0800c818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	6039      	str	r1, [r7, #0]
 800c822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4907      	ldr	r1, [pc, #28]	@ (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c82e:	4808      	ldr	r0, [pc, #32]	@ (800c850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c830:	f7fe fc0f 	bl	800b052 <USBD_GetString>
 800c834:	e004      	b.n	800c840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	4904      	ldr	r1, [pc, #16]	@ (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c83a:	4805      	ldr	r0, [pc, #20]	@ (800c850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c83c:	f7fe fc09 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c840:	4b02      	ldr	r3, [pc, #8]	@ (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200019fc 	.word	0x200019fc
 800c850:	0800db98 	.word	0x0800db98

0800c854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c85a:	4b0f      	ldr	r3, [pc, #60]	@ (800c898 <Get_SerialNum+0x44>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c860:	4b0e      	ldr	r3, [pc, #56]	@ (800c89c <Get_SerialNum+0x48>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c866:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a0 <Get_SerialNum+0x4c>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4413      	add	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d009      	beq.n	800c88e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c87a:	2208      	movs	r2, #8
 800c87c:	4909      	ldr	r1, [pc, #36]	@ (800c8a4 <Get_SerialNum+0x50>)
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 f814 	bl	800c8ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c884:	2204      	movs	r2, #4
 800c886:	4908      	ldr	r1, [pc, #32]	@ (800c8a8 <Get_SerialNum+0x54>)
 800c888:	68b8      	ldr	r0, [r7, #8]
 800c88a:	f000 f80f 	bl	800c8ac <IntToUnicode>
  }
}
 800c88e:	bf00      	nop
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	1ffff7e8 	.word	0x1ffff7e8
 800c89c:	1ffff7ec 	.word	0x1ffff7ec
 800c8a0:	1ffff7f0 	.word	0x1ffff7f0
 800c8a4:	20000102 	.word	0x20000102
 800c8a8:	20000112 	.word	0x20000112

0800c8ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8be:	2300      	movs	r3, #0
 800c8c0:	75fb      	strb	r3, [r7, #23]
 800c8c2:	e027      	b.n	800c914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	0f1b      	lsrs	r3, r3, #28
 800c8c8:	2b09      	cmp	r3, #9
 800c8ca:	d80b      	bhi.n	800c8e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	0f1b      	lsrs	r3, r3, #28
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	440b      	add	r3, r1
 800c8dc:	3230      	adds	r2, #48	@ 0x30
 800c8de:	b2d2      	uxtb	r2, r2
 800c8e0:	701a      	strb	r2, [r3, #0]
 800c8e2:	e00a      	b.n	800c8fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	0f1b      	lsrs	r3, r3, #28
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3237      	adds	r2, #55	@ 0x37
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	011b      	lsls	r3, r3, #4
 800c8fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	3301      	adds	r3, #1
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4413      	add	r3, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	3301      	adds	r3, #1
 800c912:	75fb      	strb	r3, [r7, #23]
 800c914:	7dfa      	ldrb	r2, [r7, #23]
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d3d3      	bcc.n	800c8c4 <IntToUnicode+0x18>
  }
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	bc80      	pop	{r7}
 800c926:	4770      	bx	lr

0800c928 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c932:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	bc80      	pop	{r7}
 800c93c:	4770      	bx	lr

0800c93e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c93e:	b480      	push	{r7}
 800c940:	b085      	sub	sp, #20
 800c942:	af00      	add	r7, sp, #0
 800c944:	4603      	mov	r3, r0
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c952:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c95a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c95c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr

0800c968 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c972:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr

0800c97e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c97e:	b480      	push	{r7}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
 800c984:	4603      	mov	r3, r0
 800c986:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c988:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	bc80      	pop	{r7}
 800c992:	4770      	bx	lr

0800c994 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800c9a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bc80      	pop	{r7}
 800c9b2:	4770      	bx	lr

0800c9b4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60b9      	str	r1, [r7, #8]
 800c9bc:	607a      	str	r2, [r7, #4]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	73fb      	strb	r3, [r7, #15]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800c9c8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bc80      	pop	{r7}
 800c9d2:	4770      	bx	lr

0800c9d4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c9d8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bc80      	pop	{r7}
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0d      	ldr	r2, [pc, #52]	@ (800ca28 <HAL_PCD_MspInit+0x44>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d113      	bne.n	800ca1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ca2c <HAL_PCD_MspInit+0x48>)
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	4a0c      	ldr	r2, [pc, #48]	@ (800ca2c <HAL_PCD_MspInit+0x48>)
 800c9fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca00:	61d3      	str	r3, [r2, #28]
 800ca02:	4b0a      	ldr	r3, [pc, #40]	@ (800ca2c <HAL_PCD_MspInit+0x48>)
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2105      	movs	r1, #5
 800ca12:	2014      	movs	r0, #20
 800ca14:	f7f5 faeb 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca18:	2014      	movs	r0, #20
 800ca1a:	f7f5 fb04 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca1e:	bf00      	nop
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	40005c00 	.word	0x40005c00
 800ca2c:	40021000 	.word	0x40021000

0800ca30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ca44:	4619      	mov	r1, r3
 800ca46:	4610      	mov	r0, r2
 800ca48:	f7fd fbd6 	bl	800a1f8 <USBD_LL_SetupStage>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800ca66:	78fa      	ldrb	r2, [r7, #3]
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	440b      	add	r3, r1
 800ca74:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	78fb      	ldrb	r3, [r7, #3]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f7fd fc08 	bl	800a292 <USBD_LL_DataOutStage>
}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	460b      	mov	r3, r1
 800ca94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800ca9c:	78fa      	ldrb	r2, [r7, #3]
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	4613      	mov	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	440b      	add	r3, r1
 800caaa:	333c      	adds	r3, #60	@ 0x3c
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	78fb      	ldrb	r3, [r7, #3]
 800cab0:	4619      	mov	r1, r3
 800cab2:	f7fd fc5f 	bl	800a374 <USBD_LL_DataInStage>
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fd fd6f 	bl	800a5b0 <USBD_LL_SOF>
}
 800cad2:	bf00      	nop
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cae2:	2301      	movs	r3, #1
 800cae4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	2b02      	cmp	r3, #2
 800caec:	d001      	beq.n	800caf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800caee:	f7f4 fa71 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800caf8:	7bfa      	ldrb	r2, [r7, #15]
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd fd1f 	bl	800a540 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd fcd8 	bl	800a4be <USBD_LL_Reset>
}
 800cb0e:	bf00      	nop
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fd fd19 	bl	800a55e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb34:	4b04      	ldr	r3, [pc, #16]	@ (800cb48 <HAL_PCD_SuspendCallback+0x30>)
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	4a03      	ldr	r2, [pc, #12]	@ (800cb48 <HAL_PCD_SuspendCallback+0x30>)
 800cb3a:	f043 0306 	orr.w	r3, r3, #6
 800cb3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed00 	.word	0xe000ed00

0800cb4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fd fd13 	bl	800a586 <USBD_LL_Resume>
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cb70:	4a23      	ldr	r2, [pc, #140]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a21      	ldr	r2, [pc, #132]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cb80:	4b1f      	ldr	r3, [pc, #124]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb82:	4a20      	ldr	r2, [pc, #128]	@ (800cc04 <USBD_LL_Init+0x9c>)
 800cb84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb86:	4b1e      	ldr	r3, [pc, #120]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb88:	2208      	movs	r2, #8
 800cb8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb8c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb8e:	2202      	movs	r2, #2
 800cb90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb92:	4b1b      	ldr	r3, [pc, #108]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb98:	4b19      	ldr	r3, [pc, #100]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb9e:	4b18      	ldr	r3, [pc, #96]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cba4:	4816      	ldr	r0, [pc, #88]	@ (800cc00 <USBD_LL_Init+0x98>)
 800cba6:	f7f6 fd88 	bl	80036ba <HAL_PCD_Init>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cbb0:	f7f4 fa10 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbba:	2318      	movs	r3, #24
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f7f8 fad3 	bl	800516a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbca:	2358      	movs	r3, #88	@ 0x58
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2180      	movs	r1, #128	@ 0x80
 800cbd0:	f7f8 facb 	bl	800516a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbda:	2398      	movs	r3, #152	@ 0x98
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2181      	movs	r1, #129	@ 0x81
 800cbe0:	f7f8 fac3 	bl	800516a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbea:	23d8      	movs	r3, #216	@ 0xd8
 800cbec:	2200      	movs	r2, #0
 800cbee:	2101      	movs	r1, #1
 800cbf0:	f7f8 fabb 	bl	800516a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20001bfc 	.word	0x20001bfc
 800cc04:	40005c00 	.word	0x40005c00

0800cc08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f6 fe4a 	bl	80038b8 <HAL_PCD_Start>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 f96e 	bl	800cf0c <USBD_Get_USB_Status>
 800cc30:	4603      	mov	r3, r0
 800cc32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	4608      	mov	r0, r1
 800cc48:	4611      	mov	r1, r2
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	70fb      	strb	r3, [r7, #3]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70bb      	strb	r3, [r7, #2]
 800cc54:	4613      	mov	r3, r2
 800cc56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc66:	78bb      	ldrb	r3, [r7, #2]
 800cc68:	883a      	ldrh	r2, [r7, #0]
 800cc6a:	78f9      	ldrb	r1, [r7, #3]
 800cc6c:	f7f6 ff9f 	bl	8003bae <HAL_PCD_EP_Open>
 800cc70:	4603      	mov	r3, r0
 800cc72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 f948 	bl	800cf0c <USBD_Get_USB_Status>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cca4:	78fa      	ldrb	r2, [r7, #3]
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f6 ffdd 	bl	8003c68 <HAL_PCD_EP_Close>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f929 	bl	800cf0c <USBD_Get_USB_Status>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cce2:	78fa      	ldrb	r2, [r7, #3]
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7f7 f939 	bl	8003f5e <HAL_PCD_EP_Flush>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f90a 	bl	800cf0c <USBD_Get_USB_Status>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd20:	78fa      	ldrb	r2, [r7, #3]
 800cd22:	4611      	mov	r1, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f7 f866 	bl	8003df6 <HAL_PCD_EP_SetStall>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 f8eb 	bl	800cf0c <USBD_Get_USB_Status>
 800cd36:	4603      	mov	r3, r0
 800cd38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd5e:	78fa      	ldrb	r2, [r7, #3]
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7f7 f8a7 	bl	8003eb6 <HAL_PCD_EP_ClrStall>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6c:	7bfb      	ldrb	r3, [r7, #15]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 f8cc 	bl	800cf0c <USBD_Get_USB_Status>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd94:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	da0c      	bge.n	800cdb8 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd9e:	78fb      	ldrb	r3, [r7, #3]
 800cda0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cda4:	68f9      	ldr	r1, [r7, #12]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	440b      	add	r3, r1
 800cdb2:	3302      	adds	r3, #2
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	e00b      	b.n	800cdd0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800cdce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3714      	adds	r7, #20
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bc80      	pop	{r7}
 800cdd8:	4770      	bx	lr

0800cdda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b084      	sub	sp, #16
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f6 feb3 	bl	8003b64 <HAL_PCD_SetAddress>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 f881 	bl	800cf0c <USBD_Get_USB_Status>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	607a      	str	r2, [r7, #4]
 800ce22:	461a      	mov	r2, r3
 800ce24:	460b      	mov	r3, r1
 800ce26:	72fb      	strb	r3, [r7, #11]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce3a:	893b      	ldrh	r3, [r7, #8]
 800ce3c:	7af9      	ldrb	r1, [r7, #11]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	f7f6 ffa2 	bl	8003d88 <HAL_PCD_EP_Transmit>
 800ce44:	4603      	mov	r3, r0
 800ce46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 f85e 	bl	800cf0c <USBD_Get_USB_Status>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce54:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b086      	sub	sp, #24
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	72fb      	strb	r3, [r7, #11]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce80:	893b      	ldrh	r3, [r7, #8]
 800ce82:	7af9      	ldrb	r1, [r7, #11]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	f7f6 ff37 	bl	8003cf8 <HAL_PCD_EP_Receive>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 f83b 	bl	800cf0c <USBD_Get_USB_Status>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f6 ff4d 	bl	8003d5a <HAL_PCD_EP_GetRxCount>
 800cec0:	4603      	mov	r3, r0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
	...

0800cecc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ced4:	4b02      	ldr	r3, [pc, #8]	@ (800cee0 <USBD_static_malloc+0x14>)
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bc80      	pop	{r7}
 800cede:	4770      	bx	lr
 800cee0:	20001eec 	.word	0x20001eec

0800cee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bc80      	pop	{r7}
 800cef4:	4770      	bx	lr

0800cef6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf02:	bf00      	nop
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bc80      	pop	{r7}
 800cf0a:	4770      	bx	lr

0800cf0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	4603      	mov	r3, r0
 800cf14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d817      	bhi.n	800cf50 <USBD_Get_USB_Status+0x44>
 800cf20:	a201      	add	r2, pc, #4	@ (adr r2, 800cf28 <USBD_Get_USB_Status+0x1c>)
 800cf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf26:	bf00      	nop
 800cf28:	0800cf39 	.word	0x0800cf39
 800cf2c:	0800cf3f 	.word	0x0800cf3f
 800cf30:	0800cf45 	.word	0x0800cf45
 800cf34:	0800cf4b 	.word	0x0800cf4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3c:	e00b      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	73fb      	strb	r3, [r7, #15]
    break;
 800cf42:	e008      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf44:	2301      	movs	r3, #1
 800cf46:	73fb      	strb	r3, [r7, #15]
    break;
 800cf48:	e005      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4e:	e002      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf50:	2302      	movs	r3, #2
 800cf52:	73fb      	strb	r3, [r7, #15]
    break;
 800cf54:	bf00      	nop
  }
  return usb_status;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bc80      	pop	{r7}
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop

0800cf64 <siprintf>:
 800cf64:	b40e      	push	{r1, r2, r3}
 800cf66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf6a:	b500      	push	{lr}
 800cf6c:	b09c      	sub	sp, #112	@ 0x70
 800cf6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf70:	9002      	str	r0, [sp, #8]
 800cf72:	9006      	str	r0, [sp, #24]
 800cf74:	9107      	str	r1, [sp, #28]
 800cf76:	9104      	str	r1, [sp, #16]
 800cf78:	4808      	ldr	r0, [pc, #32]	@ (800cf9c <siprintf+0x38>)
 800cf7a:	4909      	ldr	r1, [pc, #36]	@ (800cfa0 <siprintf+0x3c>)
 800cf7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf80:	9105      	str	r1, [sp, #20]
 800cf82:	6800      	ldr	r0, [r0, #0]
 800cf84:	a902      	add	r1, sp, #8
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	f000 fa10 	bl	800d3ac <_svfiprintf_r>
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	9b02      	ldr	r3, [sp, #8]
 800cf90:	701a      	strb	r2, [r3, #0]
 800cf92:	b01c      	add	sp, #112	@ 0x70
 800cf94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf98:	b003      	add	sp, #12
 800cf9a:	4770      	bx	lr
 800cf9c:	2000013c 	.word	0x2000013c
 800cfa0:	ffff0208 	.word	0xffff0208

0800cfa4 <memmove>:
 800cfa4:	4288      	cmp	r0, r1
 800cfa6:	b510      	push	{r4, lr}
 800cfa8:	eb01 0402 	add.w	r4, r1, r2
 800cfac:	d902      	bls.n	800cfb4 <memmove+0x10>
 800cfae:	4284      	cmp	r4, r0
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	d807      	bhi.n	800cfc4 <memmove+0x20>
 800cfb4:	1e43      	subs	r3, r0, #1
 800cfb6:	42a1      	cmp	r1, r4
 800cfb8:	d008      	beq.n	800cfcc <memmove+0x28>
 800cfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc2:	e7f8      	b.n	800cfb6 <memmove+0x12>
 800cfc4:	4601      	mov	r1, r0
 800cfc6:	4402      	add	r2, r0
 800cfc8:	428a      	cmp	r2, r1
 800cfca:	d100      	bne.n	800cfce <memmove+0x2a>
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfd6:	e7f7      	b.n	800cfc8 <memmove+0x24>

0800cfd8 <memset>:
 800cfd8:	4603      	mov	r3, r0
 800cfda:	4402      	add	r2, r0
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d100      	bne.n	800cfe2 <memset+0xa>
 800cfe0:	4770      	bx	lr
 800cfe2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfe6:	e7f9      	b.n	800cfdc <memset+0x4>

0800cfe8 <_reclaim_reent>:
 800cfe8:	4b29      	ldr	r3, [pc, #164]	@ (800d090 <_reclaim_reent+0xa8>)
 800cfea:	b570      	push	{r4, r5, r6, lr}
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4604      	mov	r4, r0
 800cff0:	4283      	cmp	r3, r0
 800cff2:	d04b      	beq.n	800d08c <_reclaim_reent+0xa4>
 800cff4:	69c3      	ldr	r3, [r0, #28]
 800cff6:	b1ab      	cbz	r3, 800d024 <_reclaim_reent+0x3c>
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	b16b      	cbz	r3, 800d018 <_reclaim_reent+0x30>
 800cffc:	2500      	movs	r5, #0
 800cffe:	69e3      	ldr	r3, [r4, #28]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	5959      	ldr	r1, [r3, r5]
 800d004:	2900      	cmp	r1, #0
 800d006:	d13b      	bne.n	800d080 <_reclaim_reent+0x98>
 800d008:	3504      	adds	r5, #4
 800d00a:	2d80      	cmp	r5, #128	@ 0x80
 800d00c:	d1f7      	bne.n	800cffe <_reclaim_reent+0x16>
 800d00e:	69e3      	ldr	r3, [r4, #28]
 800d010:	4620      	mov	r0, r4
 800d012:	68d9      	ldr	r1, [r3, #12]
 800d014:	f000 f878 	bl	800d108 <_free_r>
 800d018:	69e3      	ldr	r3, [r4, #28]
 800d01a:	6819      	ldr	r1, [r3, #0]
 800d01c:	b111      	cbz	r1, 800d024 <_reclaim_reent+0x3c>
 800d01e:	4620      	mov	r0, r4
 800d020:	f000 f872 	bl	800d108 <_free_r>
 800d024:	6961      	ldr	r1, [r4, #20]
 800d026:	b111      	cbz	r1, 800d02e <_reclaim_reent+0x46>
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 f86d 	bl	800d108 <_free_r>
 800d02e:	69e1      	ldr	r1, [r4, #28]
 800d030:	b111      	cbz	r1, 800d038 <_reclaim_reent+0x50>
 800d032:	4620      	mov	r0, r4
 800d034:	f000 f868 	bl	800d108 <_free_r>
 800d038:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d03a:	b111      	cbz	r1, 800d042 <_reclaim_reent+0x5a>
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 f863 	bl	800d108 <_free_r>
 800d042:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d044:	b111      	cbz	r1, 800d04c <_reclaim_reent+0x64>
 800d046:	4620      	mov	r0, r4
 800d048:	f000 f85e 	bl	800d108 <_free_r>
 800d04c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d04e:	b111      	cbz	r1, 800d056 <_reclaim_reent+0x6e>
 800d050:	4620      	mov	r0, r4
 800d052:	f000 f859 	bl	800d108 <_free_r>
 800d056:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d058:	b111      	cbz	r1, 800d060 <_reclaim_reent+0x78>
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 f854 	bl	800d108 <_free_r>
 800d060:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d062:	b111      	cbz	r1, 800d06a <_reclaim_reent+0x82>
 800d064:	4620      	mov	r0, r4
 800d066:	f000 f84f 	bl	800d108 <_free_r>
 800d06a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d06c:	b111      	cbz	r1, 800d074 <_reclaim_reent+0x8c>
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 f84a 	bl	800d108 <_free_r>
 800d074:	6a23      	ldr	r3, [r4, #32]
 800d076:	b14b      	cbz	r3, 800d08c <_reclaim_reent+0xa4>
 800d078:	4620      	mov	r0, r4
 800d07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d07e:	4718      	bx	r3
 800d080:	680e      	ldr	r6, [r1, #0]
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f840 	bl	800d108 <_free_r>
 800d088:	4631      	mov	r1, r6
 800d08a:	e7bb      	b.n	800d004 <_reclaim_reent+0x1c>
 800d08c:	bd70      	pop	{r4, r5, r6, pc}
 800d08e:	bf00      	nop
 800d090:	2000013c 	.word	0x2000013c

0800d094 <__errno>:
 800d094:	4b01      	ldr	r3, [pc, #4]	@ (800d09c <__errno+0x8>)
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	2000013c 	.word	0x2000013c

0800d0a0 <__libc_init_array>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	2600      	movs	r6, #0
 800d0a4:	4d0c      	ldr	r5, [pc, #48]	@ (800d0d8 <__libc_init_array+0x38>)
 800d0a6:	4c0d      	ldr	r4, [pc, #52]	@ (800d0dc <__libc_init_array+0x3c>)
 800d0a8:	1b64      	subs	r4, r4, r5
 800d0aa:	10a4      	asrs	r4, r4, #2
 800d0ac:	42a6      	cmp	r6, r4
 800d0ae:	d109      	bne.n	800d0c4 <__libc_init_array+0x24>
 800d0b0:	f000 fc5e 	bl	800d970 <_init>
 800d0b4:	2600      	movs	r6, #0
 800d0b6:	4d0a      	ldr	r5, [pc, #40]	@ (800d0e0 <__libc_init_array+0x40>)
 800d0b8:	4c0a      	ldr	r4, [pc, #40]	@ (800d0e4 <__libc_init_array+0x44>)
 800d0ba:	1b64      	subs	r4, r4, r5
 800d0bc:	10a4      	asrs	r4, r4, #2
 800d0be:	42a6      	cmp	r6, r4
 800d0c0:	d105      	bne.n	800d0ce <__libc_init_array+0x2e>
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
 800d0c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c8:	4798      	blx	r3
 800d0ca:	3601      	adds	r6, #1
 800d0cc:	e7ee      	b.n	800d0ac <__libc_init_array+0xc>
 800d0ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d2:	4798      	blx	r3
 800d0d4:	3601      	adds	r6, #1
 800d0d6:	e7f2      	b.n	800d0be <__libc_init_array+0x1e>
 800d0d8:	0800f12c 	.word	0x0800f12c
 800d0dc:	0800f12c 	.word	0x0800f12c
 800d0e0:	0800f12c 	.word	0x0800f12c
 800d0e4:	0800f130 	.word	0x0800f130

0800d0e8 <__retarget_lock_acquire_recursive>:
 800d0e8:	4770      	bx	lr

0800d0ea <__retarget_lock_release_recursive>:
 800d0ea:	4770      	bx	lr

0800d0ec <memcpy>:
 800d0ec:	440a      	add	r2, r1
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d0f4:	d100      	bne.n	800d0f8 <memcpy+0xc>
 800d0f6:	4770      	bx	lr
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0fe:	4291      	cmp	r1, r2
 800d100:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d104:	d1f9      	bne.n	800d0fa <memcpy+0xe>
 800d106:	bd10      	pop	{r4, pc}

0800d108 <_free_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4605      	mov	r5, r0
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d040      	beq.n	800d192 <_free_r+0x8a>
 800d110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d114:	1f0c      	subs	r4, r1, #4
 800d116:	2b00      	cmp	r3, #0
 800d118:	bfb8      	it	lt
 800d11a:	18e4      	addlt	r4, r4, r3
 800d11c:	f000 f8de 	bl	800d2dc <__malloc_lock>
 800d120:	4a1c      	ldr	r2, [pc, #112]	@ (800d194 <_free_r+0x8c>)
 800d122:	6813      	ldr	r3, [r2, #0]
 800d124:	b933      	cbnz	r3, 800d134 <_free_r+0x2c>
 800d126:	6063      	str	r3, [r4, #4]
 800d128:	6014      	str	r4, [r2, #0]
 800d12a:	4628      	mov	r0, r5
 800d12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d130:	f000 b8da 	b.w	800d2e8 <__malloc_unlock>
 800d134:	42a3      	cmp	r3, r4
 800d136:	d908      	bls.n	800d14a <_free_r+0x42>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	1821      	adds	r1, r4, r0
 800d13c:	428b      	cmp	r3, r1
 800d13e:	bf01      	itttt	eq
 800d140:	6819      	ldreq	r1, [r3, #0]
 800d142:	685b      	ldreq	r3, [r3, #4]
 800d144:	1809      	addeq	r1, r1, r0
 800d146:	6021      	streq	r1, [r4, #0]
 800d148:	e7ed      	b.n	800d126 <_free_r+0x1e>
 800d14a:	461a      	mov	r2, r3
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	b10b      	cbz	r3, 800d154 <_free_r+0x4c>
 800d150:	42a3      	cmp	r3, r4
 800d152:	d9fa      	bls.n	800d14a <_free_r+0x42>
 800d154:	6811      	ldr	r1, [r2, #0]
 800d156:	1850      	adds	r0, r2, r1
 800d158:	42a0      	cmp	r0, r4
 800d15a:	d10b      	bne.n	800d174 <_free_r+0x6c>
 800d15c:	6820      	ldr	r0, [r4, #0]
 800d15e:	4401      	add	r1, r0
 800d160:	1850      	adds	r0, r2, r1
 800d162:	4283      	cmp	r3, r0
 800d164:	6011      	str	r1, [r2, #0]
 800d166:	d1e0      	bne.n	800d12a <_free_r+0x22>
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4408      	add	r0, r1
 800d16e:	6010      	str	r0, [r2, #0]
 800d170:	6053      	str	r3, [r2, #4]
 800d172:	e7da      	b.n	800d12a <_free_r+0x22>
 800d174:	d902      	bls.n	800d17c <_free_r+0x74>
 800d176:	230c      	movs	r3, #12
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	e7d6      	b.n	800d12a <_free_r+0x22>
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	1821      	adds	r1, r4, r0
 800d180:	428b      	cmp	r3, r1
 800d182:	bf01      	itttt	eq
 800d184:	6819      	ldreq	r1, [r3, #0]
 800d186:	685b      	ldreq	r3, [r3, #4]
 800d188:	1809      	addeq	r1, r1, r0
 800d18a:	6021      	streq	r1, [r4, #0]
 800d18c:	6063      	str	r3, [r4, #4]
 800d18e:	6054      	str	r4, [r2, #4]
 800d190:	e7cb      	b.n	800d12a <_free_r+0x22>
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	200022a0 	.word	0x200022a0

0800d198 <sbrk_aligned>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	4e0f      	ldr	r6, [pc, #60]	@ (800d1d8 <sbrk_aligned+0x40>)
 800d19c:	460c      	mov	r4, r1
 800d19e:	6831      	ldr	r1, [r6, #0]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	b911      	cbnz	r1, 800d1aa <sbrk_aligned+0x12>
 800d1a4:	f000 fb90 	bl	800d8c8 <_sbrk_r>
 800d1a8:	6030      	str	r0, [r6, #0]
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 fb8b 	bl	800d8c8 <_sbrk_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d103      	bne.n	800d1be <sbrk_aligned+0x26>
 800d1b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	1cc4      	adds	r4, r0, #3
 800d1c0:	f024 0403 	bic.w	r4, r4, #3
 800d1c4:	42a0      	cmp	r0, r4
 800d1c6:	d0f8      	beq.n	800d1ba <sbrk_aligned+0x22>
 800d1c8:	1a21      	subs	r1, r4, r0
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f000 fb7c 	bl	800d8c8 <_sbrk_r>
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d1f2      	bne.n	800d1ba <sbrk_aligned+0x22>
 800d1d4:	e7ef      	b.n	800d1b6 <sbrk_aligned+0x1e>
 800d1d6:	bf00      	nop
 800d1d8:	2000229c 	.word	0x2000229c

0800d1dc <_malloc_r>:
 800d1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e0:	1ccd      	adds	r5, r1, #3
 800d1e2:	f025 0503 	bic.w	r5, r5, #3
 800d1e6:	3508      	adds	r5, #8
 800d1e8:	2d0c      	cmp	r5, #12
 800d1ea:	bf38      	it	cc
 800d1ec:	250c      	movcc	r5, #12
 800d1ee:	2d00      	cmp	r5, #0
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	db01      	blt.n	800d1f8 <_malloc_r+0x1c>
 800d1f4:	42a9      	cmp	r1, r5
 800d1f6:	d904      	bls.n	800d202 <_malloc_r+0x26>
 800d1f8:	230c      	movs	r3, #12
 800d1fa:	6033      	str	r3, [r6, #0]
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2d8 <_malloc_r+0xfc>
 800d206:	f000 f869 	bl	800d2dc <__malloc_lock>
 800d20a:	f8d8 3000 	ldr.w	r3, [r8]
 800d20e:	461c      	mov	r4, r3
 800d210:	bb44      	cbnz	r4, 800d264 <_malloc_r+0x88>
 800d212:	4629      	mov	r1, r5
 800d214:	4630      	mov	r0, r6
 800d216:	f7ff ffbf 	bl	800d198 <sbrk_aligned>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	4604      	mov	r4, r0
 800d21e:	d158      	bne.n	800d2d2 <_malloc_r+0xf6>
 800d220:	f8d8 4000 	ldr.w	r4, [r8]
 800d224:	4627      	mov	r7, r4
 800d226:	2f00      	cmp	r7, #0
 800d228:	d143      	bne.n	800d2b2 <_malloc_r+0xd6>
 800d22a:	2c00      	cmp	r4, #0
 800d22c:	d04b      	beq.n	800d2c6 <_malloc_r+0xea>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	4639      	mov	r1, r7
 800d232:	4630      	mov	r0, r6
 800d234:	eb04 0903 	add.w	r9, r4, r3
 800d238:	f000 fb46 	bl	800d8c8 <_sbrk_r>
 800d23c:	4581      	cmp	r9, r0
 800d23e:	d142      	bne.n	800d2c6 <_malloc_r+0xea>
 800d240:	6821      	ldr	r1, [r4, #0]
 800d242:	4630      	mov	r0, r6
 800d244:	1a6d      	subs	r5, r5, r1
 800d246:	4629      	mov	r1, r5
 800d248:	f7ff ffa6 	bl	800d198 <sbrk_aligned>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d03a      	beq.n	800d2c6 <_malloc_r+0xea>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	442b      	add	r3, r5
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	f8d8 3000 	ldr.w	r3, [r8]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	bb62      	cbnz	r2, 800d2b8 <_malloc_r+0xdc>
 800d25e:	f8c8 7000 	str.w	r7, [r8]
 800d262:	e00f      	b.n	800d284 <_malloc_r+0xa8>
 800d264:	6822      	ldr	r2, [r4, #0]
 800d266:	1b52      	subs	r2, r2, r5
 800d268:	d420      	bmi.n	800d2ac <_malloc_r+0xd0>
 800d26a:	2a0b      	cmp	r2, #11
 800d26c:	d917      	bls.n	800d29e <_malloc_r+0xc2>
 800d26e:	1961      	adds	r1, r4, r5
 800d270:	42a3      	cmp	r3, r4
 800d272:	6025      	str	r5, [r4, #0]
 800d274:	bf18      	it	ne
 800d276:	6059      	strne	r1, [r3, #4]
 800d278:	6863      	ldr	r3, [r4, #4]
 800d27a:	bf08      	it	eq
 800d27c:	f8c8 1000 	streq.w	r1, [r8]
 800d280:	5162      	str	r2, [r4, r5]
 800d282:	604b      	str	r3, [r1, #4]
 800d284:	4630      	mov	r0, r6
 800d286:	f000 f82f 	bl	800d2e8 <__malloc_unlock>
 800d28a:	f104 000b 	add.w	r0, r4, #11
 800d28e:	1d23      	adds	r3, r4, #4
 800d290:	f020 0007 	bic.w	r0, r0, #7
 800d294:	1ac2      	subs	r2, r0, r3
 800d296:	bf1c      	itt	ne
 800d298:	1a1b      	subne	r3, r3, r0
 800d29a:	50a3      	strne	r3, [r4, r2]
 800d29c:	e7af      	b.n	800d1fe <_malloc_r+0x22>
 800d29e:	6862      	ldr	r2, [r4, #4]
 800d2a0:	42a3      	cmp	r3, r4
 800d2a2:	bf0c      	ite	eq
 800d2a4:	f8c8 2000 	streq.w	r2, [r8]
 800d2a8:	605a      	strne	r2, [r3, #4]
 800d2aa:	e7eb      	b.n	800d284 <_malloc_r+0xa8>
 800d2ac:	4623      	mov	r3, r4
 800d2ae:	6864      	ldr	r4, [r4, #4]
 800d2b0:	e7ae      	b.n	800d210 <_malloc_r+0x34>
 800d2b2:	463c      	mov	r4, r7
 800d2b4:	687f      	ldr	r7, [r7, #4]
 800d2b6:	e7b6      	b.n	800d226 <_malloc_r+0x4a>
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	d1fb      	bne.n	800d2b8 <_malloc_r+0xdc>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	6053      	str	r3, [r2, #4]
 800d2c4:	e7de      	b.n	800d284 <_malloc_r+0xa8>
 800d2c6:	230c      	movs	r3, #12
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	6033      	str	r3, [r6, #0]
 800d2cc:	f000 f80c 	bl	800d2e8 <__malloc_unlock>
 800d2d0:	e794      	b.n	800d1fc <_malloc_r+0x20>
 800d2d2:	6005      	str	r5, [r0, #0]
 800d2d4:	e7d6      	b.n	800d284 <_malloc_r+0xa8>
 800d2d6:	bf00      	nop
 800d2d8:	200022a0 	.word	0x200022a0

0800d2dc <__malloc_lock>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	@ (800d2e4 <__malloc_lock+0x8>)
 800d2de:	f7ff bf03 	b.w	800d0e8 <__retarget_lock_acquire_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	20002298 	.word	0x20002298

0800d2e8 <__malloc_unlock>:
 800d2e8:	4801      	ldr	r0, [pc, #4]	@ (800d2f0 <__malloc_unlock+0x8>)
 800d2ea:	f7ff befe 	b.w	800d0ea <__retarget_lock_release_recursive>
 800d2ee:	bf00      	nop
 800d2f0:	20002298 	.word	0x20002298

0800d2f4 <__ssputs_r>:
 800d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f8:	461f      	mov	r7, r3
 800d2fa:	688e      	ldr	r6, [r1, #8]
 800d2fc:	4682      	mov	sl, r0
 800d2fe:	42be      	cmp	r6, r7
 800d300:	460c      	mov	r4, r1
 800d302:	4690      	mov	r8, r2
 800d304:	680b      	ldr	r3, [r1, #0]
 800d306:	d82d      	bhi.n	800d364 <__ssputs_r+0x70>
 800d308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d30c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d310:	d026      	beq.n	800d360 <__ssputs_r+0x6c>
 800d312:	6965      	ldr	r5, [r4, #20]
 800d314:	6909      	ldr	r1, [r1, #16]
 800d316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d31a:	eba3 0901 	sub.w	r9, r3, r1
 800d31e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d322:	1c7b      	adds	r3, r7, #1
 800d324:	444b      	add	r3, r9
 800d326:	106d      	asrs	r5, r5, #1
 800d328:	429d      	cmp	r5, r3
 800d32a:	bf38      	it	cc
 800d32c:	461d      	movcc	r5, r3
 800d32e:	0553      	lsls	r3, r2, #21
 800d330:	d527      	bpl.n	800d382 <__ssputs_r+0x8e>
 800d332:	4629      	mov	r1, r5
 800d334:	f7ff ff52 	bl	800d1dc <_malloc_r>
 800d338:	4606      	mov	r6, r0
 800d33a:	b360      	cbz	r0, 800d396 <__ssputs_r+0xa2>
 800d33c:	464a      	mov	r2, r9
 800d33e:	6921      	ldr	r1, [r4, #16]
 800d340:	f7ff fed4 	bl	800d0ec <memcpy>
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d34e:	81a3      	strh	r3, [r4, #12]
 800d350:	6126      	str	r6, [r4, #16]
 800d352:	444e      	add	r6, r9
 800d354:	6026      	str	r6, [r4, #0]
 800d356:	463e      	mov	r6, r7
 800d358:	6165      	str	r5, [r4, #20]
 800d35a:	eba5 0509 	sub.w	r5, r5, r9
 800d35e:	60a5      	str	r5, [r4, #8]
 800d360:	42be      	cmp	r6, r7
 800d362:	d900      	bls.n	800d366 <__ssputs_r+0x72>
 800d364:	463e      	mov	r6, r7
 800d366:	4632      	mov	r2, r6
 800d368:	4641      	mov	r1, r8
 800d36a:	6820      	ldr	r0, [r4, #0]
 800d36c:	f7ff fe1a 	bl	800cfa4 <memmove>
 800d370:	2000      	movs	r0, #0
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	1b9b      	subs	r3, r3, r6
 800d376:	60a3      	str	r3, [r4, #8]
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	4433      	add	r3, r6
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d382:	462a      	mov	r2, r5
 800d384:	f000 fabe 	bl	800d904 <_realloc_r>
 800d388:	4606      	mov	r6, r0
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d1e0      	bne.n	800d350 <__ssputs_r+0x5c>
 800d38e:	4650      	mov	r0, sl
 800d390:	6921      	ldr	r1, [r4, #16]
 800d392:	f7ff feb9 	bl	800d108 <_free_r>
 800d396:	230c      	movs	r3, #12
 800d398:	f8ca 3000 	str.w	r3, [sl]
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	e7e9      	b.n	800d37e <__ssputs_r+0x8a>
	...

0800d3ac <_svfiprintf_r>:
 800d3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	4698      	mov	r8, r3
 800d3b2:	898b      	ldrh	r3, [r1, #12]
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	061b      	lsls	r3, r3, #24
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	4614      	mov	r4, r2
 800d3bc:	b09d      	sub	sp, #116	@ 0x74
 800d3be:	d510      	bpl.n	800d3e2 <_svfiprintf_r+0x36>
 800d3c0:	690b      	ldr	r3, [r1, #16]
 800d3c2:	b973      	cbnz	r3, 800d3e2 <_svfiprintf_r+0x36>
 800d3c4:	2140      	movs	r1, #64	@ 0x40
 800d3c6:	f7ff ff09 	bl	800d1dc <_malloc_r>
 800d3ca:	6028      	str	r0, [r5, #0]
 800d3cc:	6128      	str	r0, [r5, #16]
 800d3ce:	b930      	cbnz	r0, 800d3de <_svfiprintf_r+0x32>
 800d3d0:	230c      	movs	r3, #12
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3d8:	b01d      	add	sp, #116	@ 0x74
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	2340      	movs	r3, #64	@ 0x40
 800d3e0:	616b      	str	r3, [r5, #20]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e6:	2320      	movs	r3, #32
 800d3e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3ec:	2330      	movs	r3, #48	@ 0x30
 800d3ee:	f04f 0901 	mov.w	r9, #1
 800d3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d590 <_svfiprintf_r+0x1e4>
 800d3fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3fe:	4623      	mov	r3, r4
 800d400:	469a      	mov	sl, r3
 800d402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d406:	b10a      	cbz	r2, 800d40c <_svfiprintf_r+0x60>
 800d408:	2a25      	cmp	r2, #37	@ 0x25
 800d40a:	d1f9      	bne.n	800d400 <_svfiprintf_r+0x54>
 800d40c:	ebba 0b04 	subs.w	fp, sl, r4
 800d410:	d00b      	beq.n	800d42a <_svfiprintf_r+0x7e>
 800d412:	465b      	mov	r3, fp
 800d414:	4622      	mov	r2, r4
 800d416:	4629      	mov	r1, r5
 800d418:	4638      	mov	r0, r7
 800d41a:	f7ff ff6b 	bl	800d2f4 <__ssputs_r>
 800d41e:	3001      	adds	r0, #1
 800d420:	f000 80a7 	beq.w	800d572 <_svfiprintf_r+0x1c6>
 800d424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d426:	445a      	add	r2, fp
 800d428:	9209      	str	r2, [sp, #36]	@ 0x24
 800d42a:	f89a 3000 	ldrb.w	r3, [sl]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 809f 	beq.w	800d572 <_svfiprintf_r+0x1c6>
 800d434:	2300      	movs	r3, #0
 800d436:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d43e:	f10a 0a01 	add.w	sl, sl, #1
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	9307      	str	r3, [sp, #28]
 800d446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d44a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d44c:	4654      	mov	r4, sl
 800d44e:	2205      	movs	r2, #5
 800d450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d454:	484e      	ldr	r0, [pc, #312]	@ (800d590 <_svfiprintf_r+0x1e4>)
 800d456:	f000 fa47 	bl	800d8e8 <memchr>
 800d45a:	9a04      	ldr	r2, [sp, #16]
 800d45c:	b9d8      	cbnz	r0, 800d496 <_svfiprintf_r+0xea>
 800d45e:	06d0      	lsls	r0, r2, #27
 800d460:	bf44      	itt	mi
 800d462:	2320      	movmi	r3, #32
 800d464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d468:	0711      	lsls	r1, r2, #28
 800d46a:	bf44      	itt	mi
 800d46c:	232b      	movmi	r3, #43	@ 0x2b
 800d46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d472:	f89a 3000 	ldrb.w	r3, [sl]
 800d476:	2b2a      	cmp	r3, #42	@ 0x2a
 800d478:	d015      	beq.n	800d4a6 <_svfiprintf_r+0xfa>
 800d47a:	4654      	mov	r4, sl
 800d47c:	2000      	movs	r0, #0
 800d47e:	f04f 0c0a 	mov.w	ip, #10
 800d482:	9a07      	ldr	r2, [sp, #28]
 800d484:	4621      	mov	r1, r4
 800d486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d48a:	3b30      	subs	r3, #48	@ 0x30
 800d48c:	2b09      	cmp	r3, #9
 800d48e:	d94b      	bls.n	800d528 <_svfiprintf_r+0x17c>
 800d490:	b1b0      	cbz	r0, 800d4c0 <_svfiprintf_r+0x114>
 800d492:	9207      	str	r2, [sp, #28]
 800d494:	e014      	b.n	800d4c0 <_svfiprintf_r+0x114>
 800d496:	eba0 0308 	sub.w	r3, r0, r8
 800d49a:	fa09 f303 	lsl.w	r3, r9, r3
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	46a2      	mov	sl, r4
 800d4a2:	9304      	str	r3, [sp, #16]
 800d4a4:	e7d2      	b.n	800d44c <_svfiprintf_r+0xa0>
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	1d19      	adds	r1, r3, #4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	9103      	str	r1, [sp, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bfbb      	ittet	lt
 800d4b2:	425b      	neglt	r3, r3
 800d4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4b8:	9307      	strge	r3, [sp, #28]
 800d4ba:	9307      	strlt	r3, [sp, #28]
 800d4bc:	bfb8      	it	lt
 800d4be:	9204      	strlt	r2, [sp, #16]
 800d4c0:	7823      	ldrb	r3, [r4, #0]
 800d4c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4c4:	d10a      	bne.n	800d4dc <_svfiprintf_r+0x130>
 800d4c6:	7863      	ldrb	r3, [r4, #1]
 800d4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ca:	d132      	bne.n	800d532 <_svfiprintf_r+0x186>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	3402      	adds	r4, #2
 800d4d0:	1d1a      	adds	r2, r3, #4
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	9203      	str	r2, [sp, #12]
 800d4d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d594 <_svfiprintf_r+0x1e8>
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	4650      	mov	r0, sl
 800d4e4:	7821      	ldrb	r1, [r4, #0]
 800d4e6:	f000 f9ff 	bl	800d8e8 <memchr>
 800d4ea:	b138      	cbz	r0, 800d4fc <_svfiprintf_r+0x150>
 800d4ec:	2240      	movs	r2, #64	@ 0x40
 800d4ee:	9b04      	ldr	r3, [sp, #16]
 800d4f0:	eba0 000a 	sub.w	r0, r0, sl
 800d4f4:	4082      	lsls	r2, r0
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	3401      	adds	r4, #1
 800d4fa:	9304      	str	r3, [sp, #16]
 800d4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d500:	2206      	movs	r2, #6
 800d502:	4825      	ldr	r0, [pc, #148]	@ (800d598 <_svfiprintf_r+0x1ec>)
 800d504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d508:	f000 f9ee 	bl	800d8e8 <memchr>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d036      	beq.n	800d57e <_svfiprintf_r+0x1d2>
 800d510:	4b22      	ldr	r3, [pc, #136]	@ (800d59c <_svfiprintf_r+0x1f0>)
 800d512:	bb1b      	cbnz	r3, 800d55c <_svfiprintf_r+0x1b0>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	3307      	adds	r3, #7
 800d518:	f023 0307 	bic.w	r3, r3, #7
 800d51c:	3308      	adds	r3, #8
 800d51e:	9303      	str	r3, [sp, #12]
 800d520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d522:	4433      	add	r3, r6
 800d524:	9309      	str	r3, [sp, #36]	@ 0x24
 800d526:	e76a      	b.n	800d3fe <_svfiprintf_r+0x52>
 800d528:	460c      	mov	r4, r1
 800d52a:	2001      	movs	r0, #1
 800d52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d530:	e7a8      	b.n	800d484 <_svfiprintf_r+0xd8>
 800d532:	2300      	movs	r3, #0
 800d534:	f04f 0c0a 	mov.w	ip, #10
 800d538:	4619      	mov	r1, r3
 800d53a:	3401      	adds	r4, #1
 800d53c:	9305      	str	r3, [sp, #20]
 800d53e:	4620      	mov	r0, r4
 800d540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d544:	3a30      	subs	r2, #48	@ 0x30
 800d546:	2a09      	cmp	r2, #9
 800d548:	d903      	bls.n	800d552 <_svfiprintf_r+0x1a6>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0c6      	beq.n	800d4dc <_svfiprintf_r+0x130>
 800d54e:	9105      	str	r1, [sp, #20]
 800d550:	e7c4      	b.n	800d4dc <_svfiprintf_r+0x130>
 800d552:	4604      	mov	r4, r0
 800d554:	2301      	movs	r3, #1
 800d556:	fb0c 2101 	mla	r1, ip, r1, r2
 800d55a:	e7f0      	b.n	800d53e <_svfiprintf_r+0x192>
 800d55c:	ab03      	add	r3, sp, #12
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	462a      	mov	r2, r5
 800d562:	4638      	mov	r0, r7
 800d564:	4b0e      	ldr	r3, [pc, #56]	@ (800d5a0 <_svfiprintf_r+0x1f4>)
 800d566:	a904      	add	r1, sp, #16
 800d568:	f3af 8000 	nop.w
 800d56c:	1c42      	adds	r2, r0, #1
 800d56e:	4606      	mov	r6, r0
 800d570:	d1d6      	bne.n	800d520 <_svfiprintf_r+0x174>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	065b      	lsls	r3, r3, #25
 800d576:	f53f af2d 	bmi.w	800d3d4 <_svfiprintf_r+0x28>
 800d57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d57c:	e72c      	b.n	800d3d8 <_svfiprintf_r+0x2c>
 800d57e:	ab03      	add	r3, sp, #12
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	462a      	mov	r2, r5
 800d584:	4638      	mov	r0, r7
 800d586:	4b06      	ldr	r3, [pc, #24]	@ (800d5a0 <_svfiprintf_r+0x1f4>)
 800d588:	a904      	add	r1, sp, #16
 800d58a:	f000 f87d 	bl	800d688 <_printf_i>
 800d58e:	e7ed      	b.n	800d56c <_svfiprintf_r+0x1c0>
 800d590:	0800f0f0 	.word	0x0800f0f0
 800d594:	0800f0f6 	.word	0x0800f0f6
 800d598:	0800f0fa 	.word	0x0800f0fa
 800d59c:	00000000 	.word	0x00000000
 800d5a0:	0800d2f5 	.word	0x0800d2f5

0800d5a4 <_printf_common>:
 800d5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a8:	4616      	mov	r6, r2
 800d5aa:	4698      	mov	r8, r3
 800d5ac:	688a      	ldr	r2, [r1, #8]
 800d5ae:	690b      	ldr	r3, [r1, #16]
 800d5b0:	4607      	mov	r7, r0
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	bfb8      	it	lt
 800d5b6:	4613      	movlt	r3, r2
 800d5b8:	6033      	str	r3, [r6, #0]
 800d5ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5be:	460c      	mov	r4, r1
 800d5c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5c4:	b10a      	cbz	r2, 800d5ca <_printf_common+0x26>
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	6033      	str	r3, [r6, #0]
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	0699      	lsls	r1, r3, #26
 800d5ce:	bf42      	ittt	mi
 800d5d0:	6833      	ldrmi	r3, [r6, #0]
 800d5d2:	3302      	addmi	r3, #2
 800d5d4:	6033      	strmi	r3, [r6, #0]
 800d5d6:	6825      	ldr	r5, [r4, #0]
 800d5d8:	f015 0506 	ands.w	r5, r5, #6
 800d5dc:	d106      	bne.n	800d5ec <_printf_common+0x48>
 800d5de:	f104 0a19 	add.w	sl, r4, #25
 800d5e2:	68e3      	ldr	r3, [r4, #12]
 800d5e4:	6832      	ldr	r2, [r6, #0]
 800d5e6:	1a9b      	subs	r3, r3, r2
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	dc2b      	bgt.n	800d644 <_printf_common+0xa0>
 800d5ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5f0:	6822      	ldr	r2, [r4, #0]
 800d5f2:	3b00      	subs	r3, #0
 800d5f4:	bf18      	it	ne
 800d5f6:	2301      	movne	r3, #1
 800d5f8:	0692      	lsls	r2, r2, #26
 800d5fa:	d430      	bmi.n	800d65e <_printf_common+0xba>
 800d5fc:	4641      	mov	r1, r8
 800d5fe:	4638      	mov	r0, r7
 800d600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d604:	47c8      	blx	r9
 800d606:	3001      	adds	r0, #1
 800d608:	d023      	beq.n	800d652 <_printf_common+0xae>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	6922      	ldr	r2, [r4, #16]
 800d60e:	f003 0306 	and.w	r3, r3, #6
 800d612:	2b04      	cmp	r3, #4
 800d614:	bf14      	ite	ne
 800d616:	2500      	movne	r5, #0
 800d618:	6833      	ldreq	r3, [r6, #0]
 800d61a:	f04f 0600 	mov.w	r6, #0
 800d61e:	bf08      	it	eq
 800d620:	68e5      	ldreq	r5, [r4, #12]
 800d622:	f104 041a 	add.w	r4, r4, #26
 800d626:	bf08      	it	eq
 800d628:	1aed      	subeq	r5, r5, r3
 800d62a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d62e:	bf08      	it	eq
 800d630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d634:	4293      	cmp	r3, r2
 800d636:	bfc4      	itt	gt
 800d638:	1a9b      	subgt	r3, r3, r2
 800d63a:	18ed      	addgt	r5, r5, r3
 800d63c:	42b5      	cmp	r5, r6
 800d63e:	d11a      	bne.n	800d676 <_printf_common+0xd2>
 800d640:	2000      	movs	r0, #0
 800d642:	e008      	b.n	800d656 <_printf_common+0xb2>
 800d644:	2301      	movs	r3, #1
 800d646:	4652      	mov	r2, sl
 800d648:	4641      	mov	r1, r8
 800d64a:	4638      	mov	r0, r7
 800d64c:	47c8      	blx	r9
 800d64e:	3001      	adds	r0, #1
 800d650:	d103      	bne.n	800d65a <_printf_common+0xb6>
 800d652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65a:	3501      	adds	r5, #1
 800d65c:	e7c1      	b.n	800d5e2 <_printf_common+0x3e>
 800d65e:	2030      	movs	r0, #48	@ 0x30
 800d660:	18e1      	adds	r1, r4, r3
 800d662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d66c:	4422      	add	r2, r4
 800d66e:	3302      	adds	r3, #2
 800d670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d674:	e7c2      	b.n	800d5fc <_printf_common+0x58>
 800d676:	2301      	movs	r3, #1
 800d678:	4622      	mov	r2, r4
 800d67a:	4641      	mov	r1, r8
 800d67c:	4638      	mov	r0, r7
 800d67e:	47c8      	blx	r9
 800d680:	3001      	adds	r0, #1
 800d682:	d0e6      	beq.n	800d652 <_printf_common+0xae>
 800d684:	3601      	adds	r6, #1
 800d686:	e7d9      	b.n	800d63c <_printf_common+0x98>

0800d688 <_printf_i>:
 800d688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d68c:	7e0f      	ldrb	r7, [r1, #24]
 800d68e:	4691      	mov	r9, r2
 800d690:	2f78      	cmp	r7, #120	@ 0x78
 800d692:	4680      	mov	r8, r0
 800d694:	460c      	mov	r4, r1
 800d696:	469a      	mov	sl, r3
 800d698:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d69a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d69e:	d807      	bhi.n	800d6b0 <_printf_i+0x28>
 800d6a0:	2f62      	cmp	r7, #98	@ 0x62
 800d6a2:	d80a      	bhi.n	800d6ba <_printf_i+0x32>
 800d6a4:	2f00      	cmp	r7, #0
 800d6a6:	f000 80d3 	beq.w	800d850 <_printf_i+0x1c8>
 800d6aa:	2f58      	cmp	r7, #88	@ 0x58
 800d6ac:	f000 80ba 	beq.w	800d824 <_printf_i+0x19c>
 800d6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6b8:	e03a      	b.n	800d730 <_printf_i+0xa8>
 800d6ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6be:	2b15      	cmp	r3, #21
 800d6c0:	d8f6      	bhi.n	800d6b0 <_printf_i+0x28>
 800d6c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d6c8 <_printf_i+0x40>)
 800d6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6c8:	0800d721 	.word	0x0800d721
 800d6cc:	0800d735 	.word	0x0800d735
 800d6d0:	0800d6b1 	.word	0x0800d6b1
 800d6d4:	0800d6b1 	.word	0x0800d6b1
 800d6d8:	0800d6b1 	.word	0x0800d6b1
 800d6dc:	0800d6b1 	.word	0x0800d6b1
 800d6e0:	0800d735 	.word	0x0800d735
 800d6e4:	0800d6b1 	.word	0x0800d6b1
 800d6e8:	0800d6b1 	.word	0x0800d6b1
 800d6ec:	0800d6b1 	.word	0x0800d6b1
 800d6f0:	0800d6b1 	.word	0x0800d6b1
 800d6f4:	0800d837 	.word	0x0800d837
 800d6f8:	0800d75f 	.word	0x0800d75f
 800d6fc:	0800d7f1 	.word	0x0800d7f1
 800d700:	0800d6b1 	.word	0x0800d6b1
 800d704:	0800d6b1 	.word	0x0800d6b1
 800d708:	0800d859 	.word	0x0800d859
 800d70c:	0800d6b1 	.word	0x0800d6b1
 800d710:	0800d75f 	.word	0x0800d75f
 800d714:	0800d6b1 	.word	0x0800d6b1
 800d718:	0800d6b1 	.word	0x0800d6b1
 800d71c:	0800d7f9 	.word	0x0800d7f9
 800d720:	6833      	ldr	r3, [r6, #0]
 800d722:	1d1a      	adds	r2, r3, #4
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6032      	str	r2, [r6, #0]
 800d728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d72c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d730:	2301      	movs	r3, #1
 800d732:	e09e      	b.n	800d872 <_printf_i+0x1ea>
 800d734:	6833      	ldr	r3, [r6, #0]
 800d736:	6820      	ldr	r0, [r4, #0]
 800d738:	1d19      	adds	r1, r3, #4
 800d73a:	6031      	str	r1, [r6, #0]
 800d73c:	0606      	lsls	r6, r0, #24
 800d73e:	d501      	bpl.n	800d744 <_printf_i+0xbc>
 800d740:	681d      	ldr	r5, [r3, #0]
 800d742:	e003      	b.n	800d74c <_printf_i+0xc4>
 800d744:	0645      	lsls	r5, r0, #25
 800d746:	d5fb      	bpl.n	800d740 <_printf_i+0xb8>
 800d748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d74c:	2d00      	cmp	r5, #0
 800d74e:	da03      	bge.n	800d758 <_printf_i+0xd0>
 800d750:	232d      	movs	r3, #45	@ 0x2d
 800d752:	426d      	negs	r5, r5
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d758:	230a      	movs	r3, #10
 800d75a:	4859      	ldr	r0, [pc, #356]	@ (800d8c0 <_printf_i+0x238>)
 800d75c:	e011      	b.n	800d782 <_printf_i+0xfa>
 800d75e:	6821      	ldr	r1, [r4, #0]
 800d760:	6833      	ldr	r3, [r6, #0]
 800d762:	0608      	lsls	r0, r1, #24
 800d764:	f853 5b04 	ldr.w	r5, [r3], #4
 800d768:	d402      	bmi.n	800d770 <_printf_i+0xe8>
 800d76a:	0649      	lsls	r1, r1, #25
 800d76c:	bf48      	it	mi
 800d76e:	b2ad      	uxthmi	r5, r5
 800d770:	2f6f      	cmp	r7, #111	@ 0x6f
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	bf14      	ite	ne
 800d776:	230a      	movne	r3, #10
 800d778:	2308      	moveq	r3, #8
 800d77a:	4851      	ldr	r0, [pc, #324]	@ (800d8c0 <_printf_i+0x238>)
 800d77c:	2100      	movs	r1, #0
 800d77e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d782:	6866      	ldr	r6, [r4, #4]
 800d784:	2e00      	cmp	r6, #0
 800d786:	bfa8      	it	ge
 800d788:	6821      	ldrge	r1, [r4, #0]
 800d78a:	60a6      	str	r6, [r4, #8]
 800d78c:	bfa4      	itt	ge
 800d78e:	f021 0104 	bicge.w	r1, r1, #4
 800d792:	6021      	strge	r1, [r4, #0]
 800d794:	b90d      	cbnz	r5, 800d79a <_printf_i+0x112>
 800d796:	2e00      	cmp	r6, #0
 800d798:	d04b      	beq.n	800d832 <_printf_i+0x1aa>
 800d79a:	4616      	mov	r6, r2
 800d79c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7a0:	fb03 5711 	mls	r7, r3, r1, r5
 800d7a4:	5dc7      	ldrb	r7, [r0, r7]
 800d7a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7aa:	462f      	mov	r7, r5
 800d7ac:	42bb      	cmp	r3, r7
 800d7ae:	460d      	mov	r5, r1
 800d7b0:	d9f4      	bls.n	800d79c <_printf_i+0x114>
 800d7b2:	2b08      	cmp	r3, #8
 800d7b4:	d10b      	bne.n	800d7ce <_printf_i+0x146>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	07df      	lsls	r7, r3, #31
 800d7ba:	d508      	bpl.n	800d7ce <_printf_i+0x146>
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	6861      	ldr	r1, [r4, #4]
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	bfde      	ittt	le
 800d7c4:	2330      	movle	r3, #48	@ 0x30
 800d7c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d7ce:	1b92      	subs	r2, r2, r6
 800d7d0:	6122      	str	r2, [r4, #16]
 800d7d2:	464b      	mov	r3, r9
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	f8cd a000 	str.w	sl, [sp]
 800d7dc:	aa03      	add	r2, sp, #12
 800d7de:	f7ff fee1 	bl	800d5a4 <_printf_common>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d14a      	bne.n	800d87c <_printf_i+0x1f4>
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7ea:	b004      	add	sp, #16
 800d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	f043 0320 	orr.w	r3, r3, #32
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	2778      	movs	r7, #120	@ 0x78
 800d7fa:	4832      	ldr	r0, [pc, #200]	@ (800d8c4 <_printf_i+0x23c>)
 800d7fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	6831      	ldr	r1, [r6, #0]
 800d804:	061f      	lsls	r7, r3, #24
 800d806:	f851 5b04 	ldr.w	r5, [r1], #4
 800d80a:	d402      	bmi.n	800d812 <_printf_i+0x18a>
 800d80c:	065f      	lsls	r7, r3, #25
 800d80e:	bf48      	it	mi
 800d810:	b2ad      	uxthmi	r5, r5
 800d812:	6031      	str	r1, [r6, #0]
 800d814:	07d9      	lsls	r1, r3, #31
 800d816:	bf44      	itt	mi
 800d818:	f043 0320 	orrmi.w	r3, r3, #32
 800d81c:	6023      	strmi	r3, [r4, #0]
 800d81e:	b11d      	cbz	r5, 800d828 <_printf_i+0x1a0>
 800d820:	2310      	movs	r3, #16
 800d822:	e7ab      	b.n	800d77c <_printf_i+0xf4>
 800d824:	4826      	ldr	r0, [pc, #152]	@ (800d8c0 <_printf_i+0x238>)
 800d826:	e7e9      	b.n	800d7fc <_printf_i+0x174>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	f023 0320 	bic.w	r3, r3, #32
 800d82e:	6023      	str	r3, [r4, #0]
 800d830:	e7f6      	b.n	800d820 <_printf_i+0x198>
 800d832:	4616      	mov	r6, r2
 800d834:	e7bd      	b.n	800d7b2 <_printf_i+0x12a>
 800d836:	6833      	ldr	r3, [r6, #0]
 800d838:	6825      	ldr	r5, [r4, #0]
 800d83a:	1d18      	adds	r0, r3, #4
 800d83c:	6961      	ldr	r1, [r4, #20]
 800d83e:	6030      	str	r0, [r6, #0]
 800d840:	062e      	lsls	r6, r5, #24
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	d501      	bpl.n	800d84a <_printf_i+0x1c2>
 800d846:	6019      	str	r1, [r3, #0]
 800d848:	e002      	b.n	800d850 <_printf_i+0x1c8>
 800d84a:	0668      	lsls	r0, r5, #25
 800d84c:	d5fb      	bpl.n	800d846 <_printf_i+0x1be>
 800d84e:	8019      	strh	r1, [r3, #0]
 800d850:	2300      	movs	r3, #0
 800d852:	4616      	mov	r6, r2
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	e7bc      	b.n	800d7d2 <_printf_i+0x14a>
 800d858:	6833      	ldr	r3, [r6, #0]
 800d85a:	2100      	movs	r1, #0
 800d85c:	1d1a      	adds	r2, r3, #4
 800d85e:	6032      	str	r2, [r6, #0]
 800d860:	681e      	ldr	r6, [r3, #0]
 800d862:	6862      	ldr	r2, [r4, #4]
 800d864:	4630      	mov	r0, r6
 800d866:	f000 f83f 	bl	800d8e8 <memchr>
 800d86a:	b108      	cbz	r0, 800d870 <_printf_i+0x1e8>
 800d86c:	1b80      	subs	r0, r0, r6
 800d86e:	6060      	str	r0, [r4, #4]
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	6123      	str	r3, [r4, #16]
 800d874:	2300      	movs	r3, #0
 800d876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d87a:	e7aa      	b.n	800d7d2 <_printf_i+0x14a>
 800d87c:	4632      	mov	r2, r6
 800d87e:	4649      	mov	r1, r9
 800d880:	4640      	mov	r0, r8
 800d882:	6923      	ldr	r3, [r4, #16]
 800d884:	47d0      	blx	sl
 800d886:	3001      	adds	r0, #1
 800d888:	d0ad      	beq.n	800d7e6 <_printf_i+0x15e>
 800d88a:	6823      	ldr	r3, [r4, #0]
 800d88c:	079b      	lsls	r3, r3, #30
 800d88e:	d413      	bmi.n	800d8b8 <_printf_i+0x230>
 800d890:	68e0      	ldr	r0, [r4, #12]
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	4298      	cmp	r0, r3
 800d896:	bfb8      	it	lt
 800d898:	4618      	movlt	r0, r3
 800d89a:	e7a6      	b.n	800d7ea <_printf_i+0x162>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4632      	mov	r2, r6
 800d8a0:	4649      	mov	r1, r9
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	47d0      	blx	sl
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	d09d      	beq.n	800d7e6 <_printf_i+0x15e>
 800d8aa:	3501      	adds	r5, #1
 800d8ac:	68e3      	ldr	r3, [r4, #12]
 800d8ae:	9903      	ldr	r1, [sp, #12]
 800d8b0:	1a5b      	subs	r3, r3, r1
 800d8b2:	42ab      	cmp	r3, r5
 800d8b4:	dcf2      	bgt.n	800d89c <_printf_i+0x214>
 800d8b6:	e7eb      	b.n	800d890 <_printf_i+0x208>
 800d8b8:	2500      	movs	r5, #0
 800d8ba:	f104 0619 	add.w	r6, r4, #25
 800d8be:	e7f5      	b.n	800d8ac <_printf_i+0x224>
 800d8c0:	0800f101 	.word	0x0800f101
 800d8c4:	0800f112 	.word	0x0800f112

0800d8c8 <_sbrk_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4d05      	ldr	r5, [pc, #20]	@ (800d8e4 <_sbrk_r+0x1c>)
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	f7f3 fd16 	bl	8001304 <_sbrk>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_sbrk_r+0x1a>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_sbrk_r+0x1a>
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	20002294 	.word	0x20002294

0800d8e8 <memchr>:
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	b2c9      	uxtb	r1, r1
 800d8ee:	4402      	add	r2, r0
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	d101      	bne.n	800d8fa <memchr+0x12>
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	e003      	b.n	800d902 <memchr+0x1a>
 800d8fa:	7804      	ldrb	r4, [r0, #0]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	428c      	cmp	r4, r1
 800d900:	d1f6      	bne.n	800d8f0 <memchr+0x8>
 800d902:	bd10      	pop	{r4, pc}

0800d904 <_realloc_r>:
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	4680      	mov	r8, r0
 800d90a:	4615      	mov	r5, r2
 800d90c:	460c      	mov	r4, r1
 800d90e:	b921      	cbnz	r1, 800d91a <_realloc_r+0x16>
 800d910:	4611      	mov	r1, r2
 800d912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d916:	f7ff bc61 	b.w	800d1dc <_malloc_r>
 800d91a:	b92a      	cbnz	r2, 800d928 <_realloc_r+0x24>
 800d91c:	f7ff fbf4 	bl	800d108 <_free_r>
 800d920:	2400      	movs	r4, #0
 800d922:	4620      	mov	r0, r4
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	f000 f81a 	bl	800d960 <_malloc_usable_size_r>
 800d92c:	4285      	cmp	r5, r0
 800d92e:	4606      	mov	r6, r0
 800d930:	d802      	bhi.n	800d938 <_realloc_r+0x34>
 800d932:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d936:	d8f4      	bhi.n	800d922 <_realloc_r+0x1e>
 800d938:	4629      	mov	r1, r5
 800d93a:	4640      	mov	r0, r8
 800d93c:	f7ff fc4e 	bl	800d1dc <_malloc_r>
 800d940:	4607      	mov	r7, r0
 800d942:	2800      	cmp	r0, #0
 800d944:	d0ec      	beq.n	800d920 <_realloc_r+0x1c>
 800d946:	42b5      	cmp	r5, r6
 800d948:	462a      	mov	r2, r5
 800d94a:	4621      	mov	r1, r4
 800d94c:	bf28      	it	cs
 800d94e:	4632      	movcs	r2, r6
 800d950:	f7ff fbcc 	bl	800d0ec <memcpy>
 800d954:	4621      	mov	r1, r4
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff fbd6 	bl	800d108 <_free_r>
 800d95c:	463c      	mov	r4, r7
 800d95e:	e7e0      	b.n	800d922 <_realloc_r+0x1e>

0800d960 <_malloc_usable_size_r>:
 800d960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d964:	1f18      	subs	r0, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	bfbc      	itt	lt
 800d96a:	580b      	ldrlt	r3, [r1, r0]
 800d96c:	18c0      	addlt	r0, r0, r3
 800d96e:	4770      	bx	lr

0800d970 <_init>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	bf00      	nop
 800d974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d976:	bc08      	pop	{r3}
 800d978:	469e      	mov	lr, r3
 800d97a:	4770      	bx	lr

0800d97c <_fini>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	bf00      	nop
 800d980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d982:	bc08      	pop	{r3}
 800d984:	469e      	mov	lr, r3
 800d986:	4770      	bx	lr
