/*
 * button_api.c
 *
 *  Created on: Sep 17, 2024
 *      Author: alex
 */

#include "stm32f1xx_hal.h"
#include <stdint.h>
#include <stdbool.h>
#include "main.h"
typedef enum
{
    NO_PRESS,      /**< No button press detected */
    SINGLE_PRESS,  /**< Single button press detected */
    LONG_PRESS,    /**< Long button press detected */
    DOUBLE_PRESS   /**< Double button press detected */
} eButtonEvent ;

/**
 * @brief  Reads the current state of the right button with debounce handling.
 * @note   Debouncing is implemented with a delay of 20 milliseconds.
 * @retval The current state of the right button: true if pressed, false otherwise.
 */
bool buttonRightState()
{
    static const uint32_t DEBOUNCE_MILLIS = 20 ;
     bool buttonstate = HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_6 ) == GPIO_PIN_SET ;
     uint32_t buttonstate_ts = HAL_GetTick() ;

    uint32_t now = HAL_GetTick() ;
    if( now - buttonstate_ts > DEBOUNCE_MILLIS )
    {
        if(( buttonstate != HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_6 ) == GPIO_PIN_SET ))
        {
            buttonstate = !buttonstate ;
            buttonstate_ts = now ;
        }
    }
    return buttonstate ;
}

/**
 * @brief  Reads the current state of the left button with debounce handling.
 * @note   Debouncing is implemented with a delay of 20 milliseconds.
 * @retval The current state of the left button: true if pressed, false otherwise.
 */
bool buttonLeftState()
{
    static const uint32_t DEBOUNCE_MILLIS = 20 ;
     bool buttonstate = HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_7 ) == GPIO_PIN_SET ;
     uint32_t buttonstate_ts = HAL_GetTick() ;

    uint32_t now = HAL_GetTick() ;
    if( now - buttonstate_ts > DEBOUNCE_MILLIS )
    {
        if( buttonstate != HAL_GPIO_ReadPin( GPIOB, GPIO_PIN_7 ) == GPIO_PIN_SET )
        {
            buttonstate = !buttonstate ;
            buttonstate_ts = now ;
        }
    }
    return buttonstate ;
}

/**
 * @brief  Detects the type of press event (single, double, or long) for the left button.
 * @note   The following timing thresholds are used:
 *          - Double press: 250ms gap maximum.
 *          - Long press: 800ms press minimum.
 * @retval eButtonEvent type representing the event for the left button.
 */
eButtonEvent getLeftButtonEvent()
{
    static const uint32_t DOUBLE_GAP_MILLIS_MAX = 250 ;
    static const uint32_t LONG_MILLIS_MIN = 800 ;
    static uint32_t button_down_ts = 0 ;
    static uint32_t button_up_ts = 0 ;
    static bool double_pending = false ;
    static bool long_press_pending = false ;
    static bool button_down = false ; ;

    eButtonEvent button_event = NO_PRESS ;
    uint32_t now = HAL_GetTick() ;

    // If state changed...
    if( button_down != buttonLeftState() )
    {
        button_down = !button_down ;
        if( button_down )
        {
            // Timestamp button-down
            button_down_ts = now ;
        }
        else
        {
            // Timestamp button-up
            button_up_ts = now ;

            // If double decision pending...
            if( double_pending )
            {
                button_event = DOUBLE_PRESS ;
                double_pending = false ;
            }
            else
            {
                double_pending = true ;
            }

            // Cancel any long press pending
            long_press_pending = false ;
        }
    }

    // If button-up and double-press gap time expired, it was a single press
    if( !button_down && double_pending && now - button_up_ts > DOUBLE_GAP_MILLIS_MAX )
    {
        double_pending = false ;
        button_event = SINGLE_PRESS ;
    }
    // else if button-down for long-press...
    else if( !long_press_pending && button_down && now - button_down_ts > LONG_MILLIS_MIN )
    {
        button_event = LONG_PRESS ;
        long_press_pending = false ;
        double_pending = false ;

    }

    return button_event ;
}

/**
 * @brief  Detects the type of press event (single, double, or long) for the right button.
 * @note   The following timing thresholds are used:
 *          - Double press: 250ms gap maximum.
 *          - Long press: 800ms press minimum.
 * @retval eButtonEvent type representing the event for the right button.
 */
eButtonEvent getRightButtonEvent()
{
    static const uint32_t DOUBLE_GAP_MILLIS_MAX = 250 ;
    static const uint32_t LONG_MILLIS_MIN = 800 ;
    static uint32_t button_down_ts = 0 ;
    static uint32_t button_up_ts = 0 ;
    static bool double_pending = false ;
    static bool long_press_pending = false ;
    static bool button_down = false ; ;

    eButtonEvent button_event = NO_PRESS ;
    uint32_t now = HAL_GetTick() ;

    // If state changed...
    if( button_down != buttonRightState() )
    {
        button_down = !button_down ;
        if( button_down )
        {
            // Timestamp button-down
            button_down_ts = now ;
        }
        else
        {
            // Timestamp button-up
            button_up_ts = now ;

            // If double decision pending...
            if( double_pending )
            {
                button_event = DOUBLE_PRESS ;
                double_pending = false ;
            }
            else
            {
                double_pending = true ;
            }

            // Cancel any long press pending
            long_press_pending = false ;
        }
    }

    // If button-up and double-press gap time expired, it was a single press
    if( !button_down && double_pending && now - button_up_ts > DOUBLE_GAP_MILLIS_MAX )
    {
        double_pending = false ;
        button_event = SINGLE_PRESS ;
    }
    // else if button-down for long-press...
    else if( !long_press_pending && button_down && now - button_down_ts > LONG_MILLIS_MIN )
    {
        button_event = LONG_PRESS ;
        long_press_pending = false ;
        double_pending = false ;

    }

    return button_event ;
}
