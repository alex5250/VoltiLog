
USBTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc78  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800bd88  0800bd88  0000cd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be70  0800be70  0000d174  2**0
                  CONTENTS
  4 .ARM          00000000  0800be70  0800be70  0000d174  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be70  0800be70  0000d174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0000ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be74  0800be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800be78  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a4  20000174  0800bfec  0000d174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004818  0800bfec  0000d818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002336b  00000000  00000000  0000d19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b4  00000000  00000000  00030508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001681  00000000  00000000  000373e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bbd  00000000  00000000  00038a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002377b  00000000  00000000  0003f61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf83  00000000  00000000  00062d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fed1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cdc  00000000  00000000  000fed60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00106a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000174 	.word	0x20000174
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd70 	.word	0x0800bd70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000178 	.word	0x20000178
 800014c:	0800bd70 	.word	0x0800bd70

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb4a 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81c 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8fc 	bl	8000358 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000160:	f000 f874 	bl	800024c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000164:	f000 f8a0 	bl	80002a8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f8cc 	bl	8000304 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f008 fb66 	bl	800883c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000170:	4a05      	ldr	r2, [pc, #20]	@ (8000188 <main+0x38>)
 8000172:	2100      	movs	r1, #0
 8000174:	4805      	ldr	r0, [pc, #20]	@ (800018c <main+0x3c>)
 8000176:	f008 fbc7 	bl	8008908 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <main+0x40>)
 800017e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000180:	f008 fb8e 	bl	80088a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	bf00      	nop
 8000186:	e7fd      	b.n	8000184 <main+0x34>
 8000188:	0800bde4 	.word	0x0800bde4
 800018c:	0800042d 	.word	0x0800042d
 8000190:	20000280 	.word	0x20000280

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	@ 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f00b fcfe 	bl	800bba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80001e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80001e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fc8a 	bl	8002b04 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f935 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f002 fef7 	bl	8003008 <HAL_RCC_ClockConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000220:	f000 f920 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000224:	2310      	movs	r3, #16
 8000226:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800022c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f003 f8cf 	bl	80033d4 <HAL_RCCEx_PeriphCLKConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800023c:	f000 f912 	bl	8000464 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000240:	f002 ffcc 	bl	80031dc <HAL_RCC_EnableCSS>
}
 8000244:	bf00      	nop
 8000246:	3750      	adds	r7, #80	@ 0x50
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_I2C1_Init+0x50>)
 8000252:	4a13      	ldr	r2, [pc, #76]	@ (80002a0 <MX_I2C1_Init+0x54>)
 8000254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000256:	4b11      	ldr	r3, [pc, #68]	@ (800029c <MX_I2C1_Init+0x50>)
 8000258:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <MX_I2C1_Init+0x58>)
 800025a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <MX_I2C1_Init+0x50>)
 800026a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800026e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <MX_I2C1_Init+0x50>)
 800028a:	f000 fd5d 	bl	8000d48 <HAL_I2C_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000294:	f000 f8e6 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000190 	.word	0x20000190
 80002a0:	40005400 	.word	0x40005400
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002ae:	4a13      	ldr	r2, [pc, #76]	@ (80002fc <MX_I2C2_Init+0x54>)
 80002b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_I2C2_Init+0x58>)
 80002b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_I2C2_Init+0x50>)
 80002e6:	f000 fd2f 	bl	8000d48 <HAL_I2C_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f000 f8b8 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200001e4 	.word	0x200001e4
 80002fc:	40005800 	.word	0x40005800
 8000300:	000186a0 	.word	0x000186a0

08000304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <MX_USART1_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800033c:	f003 fb4a 	bl	80039d4 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f88d 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000238 	.word	0x20000238
 8000354:	40013800 	.word	0x40013800

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b2c      	ldr	r3, [pc, #176]	@ (8000420 <MX_GPIO_Init+0xc8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <MX_GPIO_Init+0xc8>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b29      	ldr	r3, [pc, #164]	@ (8000420 <MX_GPIO_Init+0xc8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b26      	ldr	r3, [pc, #152]	@ (8000420 <MX_GPIO_Init+0xc8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a25      	ldr	r2, [pc, #148]	@ (8000420 <MX_GPIO_Init+0xc8>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <MX_GPIO_Init+0xc8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_GPIO_Init+0xc8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000420 <MX_GPIO_Init+0xc8>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <MX_GPIO_Init+0xc8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2114      	movs	r1, #20
 80003b8:	481a      	ldr	r0, [pc, #104]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003ba:	f000 fcad 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2112      	movs	r1, #18
 80003c2:	4819      	ldr	r0, [pc, #100]	@ (8000428 <MX_GPIO_Init+0xd0>)
 80003c4:	f000 fca8 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80003c8:	2314      	movs	r3, #20
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2302      	movs	r3, #2
 80003d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4619      	mov	r1, r3
 80003de:	4811      	ldr	r0, [pc, #68]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003e0:	f000 fb16 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003e4:	23c0      	movs	r3, #192	@ 0xc0
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	480b      	ldr	r0, [pc, #44]	@ (8000424 <MX_GPIO_Init+0xcc>)
 80003f8:	f000 fb0a 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80003fc:	2312      	movs	r3, #18
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_GPIO_Init+0xd0>)
 8000414:	f000 fafc 	bl	8000a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000434:	f00a ff42 	bl	800b2bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f008 fb0f 	bl	8008a5c <osDelay>
 800043e:	e7fb      	b.n	8000438 <StartDefaultTask+0xc>

08000440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d101      	bne.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000452:	f000 f9e1 	bl	8000818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40012c00 	.word	0x40012c00

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000476:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <HAL_MspInit+0x68>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a17      	ldr	r2, [pc, #92]	@ (80004d8 <HAL_MspInit+0x68>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <HAL_MspInit+0x68>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_MspInit+0x68>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a11      	ldr	r2, [pc, #68]	@ (80004d8 <HAL_MspInit+0x68>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <HAL_MspInit+0x68>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	210f      	movs	r1, #15
 80004aa:	f06f 0001 	mvn.w	r0, #1
 80004ae:	f000 fa84 	bl	80009ba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <HAL_MspInit+0x6c>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <HAL_MspInit+0x6c>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010000 	.word	0x40010000

080004e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a2b      	ldr	r2, [pc, #172]	@ (80005a8 <HAL_I2C_MspInit+0xc8>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d124      	bne.n	800054a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a29      	ldr	r2, [pc, #164]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000518:	23c0      	movs	r3, #192	@ 0xc0
 800051a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051c:	2312      	movs	r3, #18
 800051e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4619      	mov	r1, r3
 800052a:	4821      	ldr	r0, [pc, #132]	@ (80005b0 <HAL_I2C_MspInit+0xd0>)
 800052c:	f000 fa70 	bl	8000a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4a1d      	ldr	r2, [pc, #116]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000536:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800053a:	61d3      	str	r3, [r2, #28]
 800053c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000548:	e029      	b.n	800059e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <HAL_I2C_MspInit+0xd4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d124      	bne.n	800059e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800056c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000572:	2312      	movs	r3, #18
 8000574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000576:	2303      	movs	r3, #3
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4619      	mov	r1, r3
 8000580:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <HAL_I2C_MspInit+0xd0>)
 8000582:	f000 fa45 	bl	8000a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a08      	ldr	r2, [pc, #32]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_I2C_MspInit+0xcc>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	@ 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40005800 	.word	0x40005800

080005b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d131      	bne.n	800063c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800060c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <HAL_UART_MspInit+0x94>)
 800061e:	f000 f9f7 	bl	8000a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <HAL_UART_MspInit+0x94>)
 8000638:	f000 f9ea 	bl	8000a10 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40013800 	.word	0x40013800
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <HAL_InitTick+0xd0>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a2d      	ldr	r2, [pc, #180]	@ (8000720 <HAL_InitTick+0xd0>)
 800066c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <HAL_InitTick+0xd0>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800067e:	f107 020c 	add.w	r2, r7, #12
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fe3b 	bl	8003304 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800068e:	f002 fe25 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8000692:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000696:	4a23      	ldr	r2, [pc, #140]	@ (8000724 <HAL_InitTick+0xd4>)
 8000698:	fba2 2303 	umull	r2, r3, r2, r3
 800069c:	0c9b      	lsrs	r3, r3, #18
 800069e:	3b01      	subs	r3, #1
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <HAL_InitTick+0xd8>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <HAL_InitTick+0xdc>)
 80006a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_InitTick+0xd8>)
 80006aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000728 <HAL_InitTick+0xd8>)
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <HAL_InitTick+0xd8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <HAL_InitTick+0xd8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <HAL_InitTick+0xd8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <HAL_InitTick+0xd8>)
 80006ca:	f002 ff39 	bl	8003540 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80006d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d11b      	bne.n	8000714 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006dc:	4812      	ldr	r0, [pc, #72]	@ (8000728 <HAL_InitTick+0xd8>)
 80006de:	f002 ff87 	bl	80035f0 <HAL_TIM_Base_Start_IT>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80006e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d111      	bne.n	8000714 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006f0:	2019      	movs	r0, #25
 80006f2:	f000 f97e 	bl	80009f2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d808      	bhi.n	800070e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	2019      	movs	r0, #25
 8000702:	f000 f95a 	bl	80009ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <HAL_InitTick+0xe0>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e002      	b.n	8000714 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000718:	4618      	mov	r0, r3
 800071a:	3730      	adds	r7, #48	@ 0x30
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	431bde83 	.word	0x431bde83
 8000728:	20000284 	.word	0x20000284
 800072c:	40012c00 	.word	0x40012c00
 8000730:	20000004 	.word	0x20000004

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000738:	f002 fe14 	bl	8003364 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x8>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <MemManage_Handler+0x4>

08000750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <UsageFault_Handler+0x4>

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000772:	f000 fd52 	bl	800121a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20004178 	.word	0x20004178

08000780 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <TIM1_UP_IRQHandler+0x10>)
 8000786:	f002 ff85 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000284 	.word	0x20000284

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff fff8 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a6:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007bc:	4c09      	ldr	r4, [pc, #36]	@ (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f00b fa49 	bl	800bc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcbf 	bl	8000150 <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80007dc:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 80007e0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80007e4:	20004818 	.word	0x20004818

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f8d1 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f7ff ff24 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe32 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	@ (8000838 <HAL_IncTick+0x20>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	20000008 	.word	0x20000008
 8000838:	200002cc 	.word	0x200002cc

0800083c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	@ (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	200002cc 	.word	0x200002cc

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4906      	ldr	r1, [pc, #24]	@ (80008e8 <__NVIC_EnableIRQ+0x34>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	@ (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	@ (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	@ 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	@ 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff4f 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff64 	bl	8000898 <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ffb2 	bl	8000940 <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff81 	bl	80008ec <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff57 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b08b      	sub	sp, #44	@ 0x2c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a22:	e169      	b.n	8000cf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a24:	2201      	movs	r2, #1
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f040 8158 	bne.w	8000cf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4a9a      	ldr	r2, [pc, #616]	@ (8000cb0 <HAL_GPIO_Init+0x2a0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d05e      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
 8000a4c:	4a98      	ldr	r2, [pc, #608]	@ (8000cb0 <HAL_GPIO_Init+0x2a0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d875      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a52:	4a98      	ldr	r2, [pc, #608]	@ (8000cb4 <HAL_GPIO_Init+0x2a4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d058      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
 8000a58:	4a96      	ldr	r2, [pc, #600]	@ (8000cb4 <HAL_GPIO_Init+0x2a4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d86f      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a5e:	4a96      	ldr	r2, [pc, #600]	@ (8000cb8 <HAL_GPIO_Init+0x2a8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d052      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
 8000a64:	4a94      	ldr	r2, [pc, #592]	@ (8000cb8 <HAL_GPIO_Init+0x2a8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d869      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a6a:	4a94      	ldr	r2, [pc, #592]	@ (8000cbc <HAL_GPIO_Init+0x2ac>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d04c      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
 8000a70:	4a92      	ldr	r2, [pc, #584]	@ (8000cbc <HAL_GPIO_Init+0x2ac>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d863      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a76:	4a92      	ldr	r2, [pc, #584]	@ (8000cc0 <HAL_GPIO_Init+0x2b0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d046      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
 8000a7c:	4a90      	ldr	r2, [pc, #576]	@ (8000cc0 <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d85d      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d82a      	bhi.n	8000adc <HAL_GPIO_Init+0xcc>
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d859      	bhi.n	8000b3e <HAL_GPIO_Init+0x12e>
 8000a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a90 <HAL_GPIO_Init+0x80>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000b0b 	.word	0x08000b0b
 8000a94:	08000ae5 	.word	0x08000ae5
 8000a98:	08000af7 	.word	0x08000af7
 8000a9c:	08000b39 	.word	0x08000b39
 8000aa0:	08000b3f 	.word	0x08000b3f
 8000aa4:	08000b3f 	.word	0x08000b3f
 8000aa8:	08000b3f 	.word	0x08000b3f
 8000aac:	08000b3f 	.word	0x08000b3f
 8000ab0:	08000b3f 	.word	0x08000b3f
 8000ab4:	08000b3f 	.word	0x08000b3f
 8000ab8:	08000b3f 	.word	0x08000b3f
 8000abc:	08000b3f 	.word	0x08000b3f
 8000ac0:	08000b3f 	.word	0x08000b3f
 8000ac4:	08000b3f 	.word	0x08000b3f
 8000ac8:	08000b3f 	.word	0x08000b3f
 8000acc:	08000b3f 	.word	0x08000b3f
 8000ad0:	08000b3f 	.word	0x08000b3f
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000b01 	.word	0x08000b01
 8000adc:	4a79      	ldr	r2, [pc, #484]	@ (8000cc4 <HAL_GPIO_Init+0x2b4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d013      	beq.n	8000b0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ae2:	e02c      	b.n	8000b3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	623b      	str	r3, [r7, #32]
          break;
 8000aea:	e029      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	3304      	adds	r3, #4
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	e024      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	3308      	adds	r3, #8
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e01f      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	330c      	adds	r3, #12
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e01a      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b12:	2304      	movs	r3, #4
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e013      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d105      	bne.n	8000b2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b20:	2308      	movs	r3, #8
 8000b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	611a      	str	r2, [r3, #16]
          break;
 8000b2a:	e009      	b.n	8000b40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	615a      	str	r2, [r3, #20]
          break;
 8000b36:	e003      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e000      	b.n	8000b40 <HAL_GPIO_Init+0x130>
          break;
 8000b3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2bff      	cmp	r3, #255	@ 0xff
 8000b44:	d801      	bhi.n	8000b4a <HAL_GPIO_Init+0x13a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	e001      	b.n	8000b4e <HAL_GPIO_Init+0x13e>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	2bff      	cmp	r3, #255	@ 0xff
 8000b54:	d802      	bhi.n	8000b5c <HAL_GPIO_Init+0x14c>
 8000b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x152>
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5e:	3b08      	subs	r3, #8
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	210f      	movs	r1, #15
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	6a39      	ldr	r1, [r7, #32]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 80b1 	beq.w	8000cf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b90:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc8 <HAL_GPIO_Init+0x2b8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc8 <HAL_GPIO_Init+0x2b8>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba8:	4a48      	ldr	r2, [pc, #288]	@ (8000ccc <HAL_GPIO_Init+0x2bc>)
 8000baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <HAL_GPIO_Init+0x2c0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d013      	beq.n	8000bfc <HAL_GPIO_Init+0x1ec>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cd4 <HAL_GPIO_Init+0x2c4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00d      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd8 <HAL_GPIO_Init+0x2c8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d101      	bne.n	8000bf0 <HAL_GPIO_Init+0x1e0>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e004      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c0e:	492f      	ldr	r1, [pc, #188]	@ (8000ccc <HAL_GPIO_Init+0x2bc>)
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	492c      	ldr	r1, [pc, #176]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	608b      	str	r3, [r1, #8]
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	4928      	ldr	r1, [pc, #160]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c50:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	4922      	ldr	r1, [pc, #136]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60cb      	str	r3, [r1, #12]
 8000c5c:	e006      	b.n	8000c6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	491e      	ldr	r1, [pc, #120]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	4918      	ldr	r1, [pc, #96]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4914      	ldr	r1, [pc, #80]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d021      	beq.n	8000ce4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	490e      	ldr	r1, [pc, #56]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
 8000cac:	e021      	b.n	8000cf2 <HAL_GPIO_Init+0x2e2>
 8000cae:	bf00      	nop
 8000cb0:	10320000 	.word	0x10320000
 8000cb4:	10310000 	.word	0x10310000
 8000cb8:	10220000 	.word	0x10220000
 8000cbc:	10210000 	.word	0x10210000
 8000cc0:	10120000 	.word	0x10120000
 8000cc4:	10110000 	.word	0x10110000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40010c00 	.word	0x40010c00
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	40011400 	.word	0x40011400
 8000ce0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_GPIO_Init+0x304>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4909      	ldr	r1, [pc, #36]	@ (8000d14 <HAL_GPIO_Init+0x304>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f47f ae8e 	bne.w	8000a24 <HAL_GPIO_Init+0x14>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	372c      	adds	r7, #44	@ 0x2c
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d34:	e003      	b.n	8000d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	041a      	lsls	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	611a      	str	r2, [r3, #16]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e12b      	b.n	8000fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fbb6 	bl	80004e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2224      	movs	r2, #36	@ 0x24
 8000d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0201 	bic.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dac:	f002 fa82 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8000db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a81      	ldr	r2, [pc, #516]	@ (8000fbc <HAL_I2C_Init+0x274>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d807      	bhi.n	8000dcc <HAL_I2C_Init+0x84>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a80      	ldr	r2, [pc, #512]	@ (8000fc0 <HAL_I2C_Init+0x278>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf94      	ite	ls
 8000dc4:	2301      	movls	r3, #1
 8000dc6:	2300      	movhi	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	e006      	b.n	8000dda <HAL_I2C_Init+0x92>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4a7d      	ldr	r2, [pc, #500]	@ (8000fc4 <HAL_I2C_Init+0x27c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	bf94      	ite	ls
 8000dd4:	2301      	movls	r3, #1
 8000dd6:	2300      	movhi	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0e7      	b.n	8000fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4a78      	ldr	r2, [pc, #480]	@ (8000fc8 <HAL_I2C_Init+0x280>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	@ (8000fbc <HAL_I2C_Init+0x274>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d802      	bhi.n	8000e1c <HAL_I2C_Init+0xd4>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	e009      	b.n	8000e30 <HAL_I2C_Init+0xe8>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e22:	fb02 f303 	mul.w	r3, r2, r3
 8000e26:	4a69      	ldr	r2, [pc, #420]	@ (8000fcc <HAL_I2C_Init+0x284>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	099b      	lsrs	r3, r3, #6
 8000e2e:	3301      	adds	r3, #1
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	495c      	ldr	r1, [pc, #368]	@ (8000fbc <HAL_I2C_Init+0x274>)
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d819      	bhi.n	8000e84 <HAL_I2C_Init+0x13c>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1e59      	subs	r1, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e5e:	1c59      	adds	r1, r3, #1
 8000e60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e64:	400b      	ands	r3, r1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00a      	beq.n	8000e80 <HAL_I2C_Init+0x138>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1e59      	subs	r1, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7e:	e051      	b.n	8000f24 <HAL_I2C_Init+0x1dc>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e04f      	b.n	8000f24 <HAL_I2C_Init+0x1dc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d111      	bne.n	8000eb0 <HAL_I2C_Init+0x168>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1e58      	subs	r0, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6859      	ldr	r1, [r3, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	440b      	add	r3, r1
 8000e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	e012      	b.n	8000ed6 <HAL_I2C_Init+0x18e>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1e58      	subs	r0, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6859      	ldr	r1, [r3, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	0099      	lsls	r1, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_I2C_Init+0x196>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e022      	b.n	8000f24 <HAL_I2C_Init+0x1dc>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10e      	bne.n	8000f04 <HAL_I2C_Init+0x1bc>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1e58      	subs	r0, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6859      	ldr	r1, [r3, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	440b      	add	r3, r1
 8000ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f02:	e00f      	b.n	8000f24 <HAL_I2C_Init+0x1dc>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1e58      	subs	r0, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	0099      	lsls	r1, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	6809      	ldr	r1, [r1, #0]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6911      	ldr	r1, [r2, #16]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68d2      	ldr	r2, [r2, #12]
 8000f5e:	4311      	orrs	r1, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	000186a0 	.word	0x000186a0
 8000fc0:	001e847f 	.word	0x001e847f
 8000fc4:	003d08ff 	.word	0x003d08ff
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	10624dd3 	.word	0x10624dd3

08000fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	@ 0x2c
 8000fd4:	af06      	add	r7, sp, #24
 8000fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0f1      	b.n	80011c6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f00a fb14 	bl	800b624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fde7 	bl	8003bdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	687e      	ldr	r6, [r7, #4]
 8001016:	466d      	mov	r5, sp
 8001018:	f106 0410 	add.w	r4, r6, #16
 800101c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	1d33      	adds	r3, r6, #4
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f002 fdb1 	bl	8003b90 <USB_CoreInit>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0c2      	b.n	80011c6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fde2 	bl	8003c10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e040      	b.n	80010d4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	3301      	adds	r3, #1
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3303      	adds	r3, #3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	3338      	adds	r3, #56	@ 0x38
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	333c      	adds	r3, #60	@ 0x3c
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3340      	adds	r3, #64	@ 0x40
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3b9      	bcc.n	8001052 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e044      	b.n	800116e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3b5      	bcc.n	80010e4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	687e      	ldr	r6, [r7, #4]
 8001180:	466d      	mov	r5, sp
 8001182:	f106 0410 	add.w	r4, r6, #16
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	602b      	str	r3, [r5, #0]
 800118e:	1d33      	adds	r3, r6, #4
 8001190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f002 fd48 	bl	8003c28 <USB_DevInit>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00d      	b.n	80011c6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 ffdf 	bl	8006182 <USB_DevDisconnect>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_PCD_Start+0x16>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e016      	b.n	8001212 <HAL_PCD_Start+0x44>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fcdd 	bl	8003bb0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011f6:	2101      	movs	r1, #1
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f00a fc9c 	bl	800bb36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f004 ffb3 	bl	800616e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b088      	sub	sp, #32
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ffb5 	bl	8006196 <USB_ReadInterrupts>
 800122c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb48 	bl	80018ce <PCD_EP_ISR_Handler>

    return;
 800123e:	e119      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001246:	2b00      	cmp	r3, #0
 8001248:	d013      	beq.n	8001272 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f00a fa59 	bl	800b71a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001268:	2100      	movs	r1, #0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f905 	bl	800147a <HAL_PCD_SetAddress>

    return;
 8001270:	e100      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00c      	beq.n	8001296 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800128e:	b292      	uxth	r2, r2
 8001290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001294:	e0ee      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80012b2:	b292      	uxth	r2, r2
 80012b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012b8:	e0dc      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d027      	beq.n	8001314 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0208 	bic.w	r2, r2, #8
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f00a fa49 	bl	800b78c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800130c:	b292      	uxth	r2, r2
 800130e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001312:	e0af      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8083 	beq.w	8001426 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	77fb      	strb	r3, [r7, #31]
 8001324:	e010      	b.n	8001348 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	441a      	add	r2, r3
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	8812      	ldrh	r2, [r2, #0]
 8001336:	b292      	uxth	r2, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	3320      	adds	r3, #32
 800133c:	443b      	add	r3, r7
 800133e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	3301      	adds	r3, #1
 8001346:	77fb      	strb	r3, [r7, #31]
 8001348:	7ffb      	ldrb	r3, [r7, #31]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d9eb      	bls.n	8001326 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	b292      	uxth	r2, r2
 8001362:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800136e:	b29a      	uxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	b292      	uxth	r2, r2
 800137a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800137e:	bf00      	nop
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001388:	b29b      	uxth	r3, r3
 800138a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f6      	beq.n	8001380 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	77fb      	strb	r3, [r7, #31]
 80013ae:	e00f      	b.n	80013d0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	4611      	mov	r1, r2
 80013b8:	7ffa      	ldrb	r2, [r7, #31]
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	440a      	add	r2, r1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3320      	adds	r3, #32
 80013c2:	443b      	add	r3, r7
 80013c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	3301      	adds	r3, #1
 80013ce:	77fb      	strb	r3, [r7, #31]
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d9ec      	bls.n	80013b0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0208 	orr.w	r2, r2, #8
 80013e8:	b292      	uxth	r2, r2
 80013ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0204 	orr.w	r2, r2, #4
 8001418:	b292      	uxth	r2, r2
 800141a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f00a f99a 	bl	800b758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001424:	e026      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f00a f958 	bl	800b6fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800144e:	e011      	b.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00c      	beq.n	8001474 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001472:	bf00      	nop
  }
}
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_PCD_SetAddress+0x1a>
 8001490:	2302      	movs	r3, #2
 8001492:	e013      	b.n	80014bc <HAL_PCD_SetAddress+0x42>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fe4b 	bl	8006148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	460b      	mov	r3, r1
 80014d8:	803b      	strh	r3, [r7, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0e      	bge.n	8001508 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	78ba      	ldrb	r2, [r7, #2]
 800153c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800153e:	78bb      	ldrb	r3, [r7, #2]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d102      	bne.n	800154a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_PCD_EP_Open+0x94>
 8001554:	2302      	movs	r3, #2
 8001556:	e00e      	b.n	8001576 <HAL_PCD_EP_Open+0xb2>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fb94 	bl	8003c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001574:	7afb      	ldrb	r3, [r7, #11]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800158a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da0e      	bge.n	80015b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	705a      	strb	r2, [r3, #1]
 80015ae:	e00e      	b.n	80015ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	f003 0207 	and.w	r2, r3, #7
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_PCD_EP_Close+0x6a>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e00e      	b.n	8001606 <HAL_PCD_EP_Close+0x88>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 ff0c 	bl	8004414 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	460b      	mov	r3, r1
 800161c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	f003 0207 	and.w	r2, r3, #7
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2200      	movs	r2, #0
 800164c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	b2da      	uxtb	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6979      	ldr	r1, [r7, #20]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f8c3 	bl	80047ec <USB_EPStartXfer>

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f003 0207 	and.w	r2, r3, #7
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	460b      	mov	r3, r1
 80016ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6979      	ldr	r1, [r7, #20]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 f875 	bl	80047ec <USB_EPStartXfer>

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	f003 0207 	and.w	r2, r3, #7
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d901      	bls.n	800172a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e04c      	b.n	80017c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800172a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	da0e      	bge.n	8001750 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	705a      	strb	r2, [r3, #1]
 800174e:	e00c      	b.n	800176a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_EP_SetStall+0x7e>
 8001786:	2302      	movs	r3, #2
 8001788:	e01c      	b.n	80017c4 <HAL_PCD_EP_SetStall+0xb8>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fbd8 	bl	8005f4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f004 fcfd 	bl	80061b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	f003 020f 	and.w	r2, r3, #15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d901      	bls.n	80017ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e040      	b.n	800186c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da0e      	bge.n	8001810 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	705a      	strb	r2, [r3, #1]
 800180e:	e00e      	b.n	800182e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0207 	and.w	r2, r3, #7
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	b2da      	uxtb	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_PCD_EP_ClrStall+0x82>
 800184a:	2302      	movs	r3, #2
 800184c:	e00e      	b.n	800186c <HAL_PCD_EP_ClrStall+0xa0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	f004 fbc6 	bl	8005fee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_PCD_EP_Flush+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e01b      	b.n	80018c6 <HAL_PCD_EP_Flush+0x52>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da09      	bge.n	80018b2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f002 f9dc 	bl	8003c68 <USB_FlushTxFifo>
 80018b0:	e004      	b.n	80018bc <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 f9e1 	bl	8003c7e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b096      	sub	sp, #88	@ 0x58
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018d6:	e3be      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80018f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8178 	bne.w	8001bec <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d151      	bne.n	80019ac <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001918:	81fb      	strh	r3, [r7, #14]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001928:	b29b      	uxth	r3, r3
 800192a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3328      	adds	r3, #40	@ 0x28
 8001930:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	3302      	adds	r3, #2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800195e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	441a      	add	r2, r3
 8001968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800196c:	2100      	movs	r1, #0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f009 feab 	bl	800b6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 836a 	beq.w	8002056 <PCD_EP_ISR_Handler+0x788>
 8001982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8365 	bne.w	8002056 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80019aa:	e354      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019b2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d034      	beq.n	8001a34 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	3306      	adds	r3, #6
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a06:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f004 fc23 	bl	8006254 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	823b      	strh	r3, [r7, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	8a3a      	ldrh	r2, [r7, #16]
 8001a24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f009 fe1f 	bl	800b670 <HAL_PCD_SetupStageCallback>
 8001a32:	e310      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a34:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f280 830c 	bge.w	8002056 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	83fb      	strh	r3, [r7, #30]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	8bfa      	ldrh	r2, [r7, #30]
 8001a54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3306      	adds	r3, #6
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d019      	beq.n	8001ac4 <PCD_EP_ISR_Handler+0x1f6>
 8001a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9e:	6959      	ldr	r1, [r3, #20]
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f004 fbd3 	bl	8006254 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001abc:	2100      	movs	r1, #0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f009 fde8 	bl	800b694 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ace:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 82bd 	bne.w	8002056 <PCD_EP_ISR_Handler+0x788>
 8001adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ae0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ae4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ae8:	f000 82b5 	beq.w	8002056 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4413      	add	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	801a      	strh	r2, [r3, #0]
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b22:	d91d      	bls.n	8001b60 <PCD_EP_ISR_Handler+0x292>
 8001b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <PCD_EP_ISR_Handler+0x270>
 8001b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	029b      	lsls	r3, r3, #10
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	e026      	b.n	8001bae <PCD_EP_ISR_Handler+0x2e0>
 8001b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <PCD_EP_ISR_Handler+0x2b0>
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	e017      	b.n	8001bae <PCD_EP_ISR_Handler+0x2e0>
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <PCD_EP_ISR_Handler+0x2ca>
 8001b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b94:	3301      	adds	r3, #1
 8001b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bbe:	827b      	strh	r3, [r7, #18]
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bc6:	827b      	strh	r3, [r7, #18]
 8001bc8:	8a7b      	ldrh	r3, [r7, #18]
 8001bca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bce:	827b      	strh	r3, [r7, #18]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8013      	strh	r3, [r2, #0]
 8001bea:	e234      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f280 80fc 	bge.w	8001e02 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c20:	4013      	ands	r3, r2
 8001c22:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001c38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c40:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c58:	7b1b      	ldrb	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d125      	bne.n	8001caa <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	3306      	adds	r3, #6
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8092 	beq.w	8001db8 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	6959      	ldr	r1, [r3, #20]
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	88da      	ldrh	r2, [r3, #6]
 8001ca0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ca4:	f004 fad6 	bl	8006254 <USB_ReadPMA>
 8001ca8:	e086      	b.n	8001db8 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	78db      	ldrb	r3, [r3, #3]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d10a      	bne.n	8001cc8 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9d9 	bl	8002072 <HAL_PCD_EP_DB_Receive>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cc6:	e077      	b.n	8001db8 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	441a      	add	r2, r3
 8001cf4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d024      	beq.n	8001d70 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02e      	beq.n	8001db8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	6959      	ldr	r1, [r3, #20]
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	891a      	ldrh	r2, [r3, #8]
 8001d66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d6a:	f004 fa73 	bl	8006254 <USB_ReadPMA>
 8001d6e:	e023      	b.n	8001db8 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	3306      	adds	r3, #6
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	6959      	ldr	r1, [r3, #20]
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	895a      	ldrh	r2, [r3, #10]
 8001db0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001db4:	f004 fa4e 	bl	8006254 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dc0:	441a      	add	r2, r3
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dce:	441a      	add	r2, r3
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x51a>
 8001ddc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d206      	bcs.n	8001df6 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f009 fc50 	bl	800b694 <HAL_PCD_DataOutStageCallback>
 8001df4:	e005      	b.n	8001e02 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fcf5 	bl	80047ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8123 	beq.w	8002056 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e62:	78db      	ldrb	r3, [r3, #3]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	f040 80a2 	bne.w	8001fae <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	7b1b      	ldrb	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8093 	beq.w	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d046      	beq.n	8001f14 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d126      	bne.n	8001edc <PCD_EP_ISR_Handler+0x60e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	4413      	add	r3, r2
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	011a      	lsls	r2, r3, #4
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	4413      	add	r3, r2
 8001eb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	e061      	b.n	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
 8001edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d15d      	bne.n	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef8:	4413      	add	r3, r2
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	011a      	lsls	r2, r3, #4
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	4413      	add	r3, r2
 8001f06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	801a      	strh	r2, [r3, #0]
 8001f12:	e045      	b.n	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d126      	bne.n	8001f70 <PCD_EP_ISR_Handler+0x6a2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f36:	4413      	add	r3, r2
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	011a      	lsls	r2, r3, #4
 8001f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f42:	4413      	add	r3, r2
 8001f44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e017      	b.n	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
 8001f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d113      	bne.n	8001fa0 <PCD_EP_ISR_Handler+0x6d2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f86:	4413      	add	r3, r2
 8001f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	011a      	lsls	r2, r3, #4
 8001f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f009 fb8f 	bl	800b6ca <HAL_PCD_DataInStageCallback>
 8001fac:	e053      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d146      	bne.n	8002048 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d907      	bls.n	8002002 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	e002      	b.n	8002008 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f009 fb57 	bl	800b6ca <HAL_PCD_DataInStageCallback>
 800201c:	e01b      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800201e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002026:	441a      	add	r2, r3
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800202c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002034:	441a      	add	r2, r3
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fbd3 	bl	80047ec <USB_EPStartXfer>
 8002046:	e006      	b.n	8002056 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800204c:	461a      	mov	r2, r3
 800204e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f91b 	bl	800228c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800205e:	b29b      	uxth	r3, r3
 8002060:	b21b      	sxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f6ff ac38 	blt.w	80018d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3758      	adds	r7, #88	@ 0x58
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b088      	sub	sp, #32
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	4613      	mov	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d07e      	beq.n	8002188 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	3302      	adds	r3, #2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	8b7b      	ldrh	r3, [r7, #26]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d306      	bcc.n	80020cc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	8b7b      	ldrh	r3, [r7, #26]
 80020c4:	1ad2      	subs	r2, r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	619a      	str	r2, [r3, #24]
 80020ca:	e002      	b.n	80020d2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d123      	bne.n	8002122 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f4:	833b      	strh	r3, [r7, #24]
 80020f6:	8b3b      	ldrh	r3, [r7, #24]
 80020f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020fc:	833b      	strh	r3, [r7, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	441a      	add	r2, r3
 800210c:	8b3b      	ldrh	r3, [r7, #24]
 800210e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800211a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211e:	b29b      	uxth	r3, r3
 8002120:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01f      	beq.n	800216c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	82fb      	strh	r3, [r7, #22]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	441a      	add	r2, r3
 8002156:	8afb      	ldrh	r3, [r7, #22]
 8002158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800215c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002164:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002168:	b29b      	uxth	r3, r3
 800216a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800216c:	8b7b      	ldrh	r3, [r7, #26]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6959      	ldr	r1, [r3, #20]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	891a      	ldrh	r2, [r3, #8]
 8002180:	8b7b      	ldrh	r3, [r7, #26]
 8002182:	f004 f867 	bl	8006254 <USB_ReadPMA>
 8002186:	e07c      	b.n	8002282 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	3306      	adds	r3, #6
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d306      	bcc.n	80021ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	619a      	str	r2, [r3, #24]
 80021c8:	e002      	b.n	80021d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d123      	bne.n	8002220 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f2:	83fb      	strh	r3, [r7, #30]
 80021f4:	8bfb      	ldrh	r3, [r7, #30]
 80021f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021fa:	83fb      	strh	r3, [r7, #30]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	8bfb      	ldrh	r3, [r7, #30]
 800220c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221c:	b29b      	uxth	r3, r3
 800221e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d11f      	bne.n	800226a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002244:	83bb      	strh	r3, [r7, #28]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	8bbb      	ldrh	r3, [r7, #28]
 8002256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800225a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002262:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002266:	b29b      	uxth	r3, r3
 8002268:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800226a:	8b7b      	ldrh	r3, [r7, #26]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6959      	ldr	r1, [r3, #20]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	895a      	ldrh	r2, [r3, #10]
 800227c:	8b7b      	ldrh	r3, [r7, #26]
 800227e:	f003 ffe9 	bl	8006254 <USB_ReadPMA>
    }
  }

  return count;
 8002282:	8b7b      	ldrh	r3, [r7, #26]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0a4      	sub	sp, #144	@ 0x90
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 81dd 	beq.w	8002660 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	3302      	adds	r3, #2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ce:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022da:	429a      	cmp	r2, r3
 80022dc:	d907      	bls.n	80022ee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	e002      	b.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 80b9 	bne.w	8002470 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d126      	bne.n	8002354 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	4413      	add	r3, r2
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	011a      	lsls	r2, r3, #4
 8002324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002326:	4413      	add	r3, r2
 8002328:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	b29a      	uxth	r2, r3
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e01a      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d116      	bne.n	800238a <HAL_PCD_EP_DB_Transmit+0xfe>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	4413      	add	r3, r2
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	011a      	lsls	r2, r3, #4
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	4413      	add	r3, r2
 800237e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002382:	633b      	str	r3, [r7, #48]	@ 0x30
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	2200      	movs	r2, #0
 8002388:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d126      	bne.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	011a      	lsls	r2, r3, #4
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	801a      	strh	r2, [r3, #0]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023de:	b29a      	uxth	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	e017      	b.n	8002416 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	785b      	ldrb	r3, [r3, #1]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d113      	bne.n	8002416 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	4413      	add	r3, r2
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	011a      	lsls	r2, r3, #4
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	4413      	add	r3, r2
 800240a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	2200      	movs	r2, #0
 8002414:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f009 f954 	bl	800b6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 82fc 	beq.w	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002448:	82fb      	strh	r3, [r7, #22]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	441a      	add	r2, r3
 8002458:	8afb      	ldrh	r3, [r7, #22]
 800245a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800245e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]
 800246e:	e2da      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d021      	beq.n	80024be <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002494:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 82ae 	bne.w	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024d2:	441a      	add	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024e0:	441a      	add	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d30b      	bcc.n	800250a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	621a      	str	r2, [r3, #32]
 8002508:	e017      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002522:	e00a      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	785b      	ldrb	r3, [r3, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d165      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x382>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002556:	4413      	add	r3, r2
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	011a      	lsls	r2, r3, #4
 8002560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002562:	4413      	add	r3, r2
 8002564:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800256a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002574:	b29a      	uxth	r2, r3
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002580:	d91d      	bls.n	80025be <HAL_PCD_EP_DB_Transmit+0x332>
 8002582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800258a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0x310>
 8002596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002598:	3b01      	subs	r3, #1
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e044      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x350>
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	e035      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80025f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025f2:	3301      	adds	r3, #1
 80025f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025fe:	b29b      	uxth	r3, r3
 8002600:	029b      	lsls	r3, r3, #10
 8002602:	b29b      	uxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e01c      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d118      	bne.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800262a:	4413      	add	r3, r2
 800262c:	647b      	str	r3, [r7, #68]	@ 0x44
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011a      	lsls	r2, r3, #4
 8002634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002636:	4413      	add	r3, r2
 8002638:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800263c:	643b      	str	r3, [r7, #64]	@ 0x40
 800263e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002642:	b29a      	uxth	r2, r3
 8002644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002646:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6959      	ldr	r1, [r3, #20]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	891a      	ldrh	r2, [r3, #8]
 8002654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002658:	b29b      	uxth	r3, r3
 800265a:	f003 fdb6 	bl	80061ca <USB_WritePMA>
 800265e:	e1e2      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	3306      	adds	r3, #6
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002694:	429a      	cmp	r2, r3
 8002696:	d307      	bcc.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026a0:	1ad2      	subs	r2, r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e002      	b.n	80026ae <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80c0 	bne.w	8002838 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d126      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0x482>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026d4:	4413      	add	r3, r2
 80026d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	011a      	lsls	r2, r3, #4
 80026de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e0:	4413      	add	r3, r2
 80026e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002706:	b29a      	uxth	r2, r3
 8002708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	e01a      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d116      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	667b      	str	r3, [r7, #100]	@ 0x64
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800272a:	4413      	add	r3, r2
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	011a      	lsls	r2, r3, #4
 8002734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002736:	4413      	add	r3, r2
 8002738:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800273c:	663b      	str	r3, [r7, #96]	@ 0x60
 800273e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	677b      	str	r3, [r7, #116]	@ 0x74
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d12b      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x51e>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002766:	4413      	add	r3, r2
 8002768:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	011a      	lsls	r2, r3, #4
 8002770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002772:	4413      	add	r3, r2
 8002774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800277c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002788:	b29a      	uxth	r2, r3
 800278a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e017      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x54e>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d113      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0x54e>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c0:	4413      	add	r3, r2
 80027c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	011a      	lsls	r2, r3, #4
 80027ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80027d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f008 ff72 	bl	800b6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 811a 	bne.w	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800282a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800282e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]
 8002836:	e0f6      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d121      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800285c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800287e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800288c:	2b01      	cmp	r3, #1
 800288e:	f040 80ca 	bne.w	8002a26 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800289a:	441a      	add	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028a8:	441a      	add	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d30b      	bcc.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6a1a      	ldr	r2, [r3, #32]
 80028c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	621a      	str	r2, [r3, #32]
 80028d0:	e017      	b.n	8002902 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028ea:	e00a      	b.n	8002902 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	657b      	str	r3, [r7, #84]	@ 0x54
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d165      	bne.n	80029dc <HAL_PCD_EP_DB_Transmit+0x750>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002924:	4413      	add	r3, r2
 8002926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	011a      	lsls	r2, r3, #4
 800292e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002930:	4413      	add	r3, r2
 8002932:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002936:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	b29a      	uxth	r2, r3
 8002944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800294c:	2b3e      	cmp	r3, #62	@ 0x3e
 800294e:	d91d      	bls.n	800298c <HAL_PCD_EP_DB_Transmit+0x700>
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002966:	3b01      	subs	r3, #1
 8002968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800296a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29a      	uxth	r2, r3
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	b29b      	uxth	r3, r3
 8002974:	029b      	lsls	r3, r3, #10
 8002976:	b29b      	uxth	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002984:	b29a      	uxth	r2, r3
 8002986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	e041      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x784>
 800298c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <HAL_PCD_EP_DB_Transmit+0x71e>
 8002994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	e032      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x784>
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x738>
 80029be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c0:	3301      	adds	r3, #1
 80029c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	e019      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x784>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d115      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x784>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f2:	4413      	add	r3, r2
 80029f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	011a      	lsls	r2, r3, #4
 80029fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fe:	4413      	add	r3, r2
 8002a00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6959      	ldr	r1, [r3, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	895a      	ldrh	r2, [r3, #10]
 8002a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f003 fbd2 	bl	80061ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a40:	82bb      	strh	r3, [r7, #20]
 8002a42:	8abb      	ldrh	r3, [r7, #20]
 8002a44:	f083 0310 	eor.w	r3, r3, #16
 8002a48:	82bb      	strh	r3, [r7, #20]
 8002a4a:	8abb      	ldrh	r3, [r7, #20]
 8002a4c:	f083 0320 	eor.w	r3, r3, #32
 8002a50:	82bb      	strh	r3, [r7, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	8abb      	ldrh	r3, [r7, #20]
 8002a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3790      	adds	r7, #144	@ 0x90
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e009      	b.n	8002aca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab6:	897a      	ldrh	r2, [r7, #10]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	80da      	strh	r2, [r3, #6]
 8002ade:	e00b      	b.n	8002af8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e272      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8087 	beq.w	8002c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b24:	4b92      	ldr	r3, [pc, #584]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b30:	4b8f      	ldr	r3, [pc, #572]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d112      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b48:	d10b      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4a:	4b89      	ldr	r3, [pc, #548]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d06c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x12c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d168      	bne.n	8002c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e24c      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x76>
 8002b6c:	4b80      	ldr	r3, [pc, #512]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7f      	ldr	r2, [pc, #508]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e02e      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x98>
 8002b82:	4b7b      	ldr	r3, [pc, #492]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7a      	ldr	r2, [pc, #488]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b78      	ldr	r3, [pc, #480]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a77      	ldr	r2, [pc, #476]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xbc>
 8002ba6:	4b72      	ldr	r3, [pc, #456]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a71      	ldr	r2, [pc, #452]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b68      	ldr	r3, [pc, #416]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a67      	ldr	r2, [pc, #412]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fd fe2c 	bl	800083c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fd fe28 	bl	800083c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e200      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xe4>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd fe18 	bl	800083c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fd fe14 	bl	800083c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1ec      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x10c>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c4a:	4b49      	ldr	r3, [pc, #292]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
 8002c56:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1c0      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4939      	ldr	r1, [pc, #228]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fd fdcd 	bl	800083c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fd fdc9 	bl	800083c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1a1      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4927      	ldr	r1, [pc, #156]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fdac 	bl	800083c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fd fda8 	bl	800083c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e180      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d03a      	beq.n	8002d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fd fd8c 	bl	800083c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fd fd88 	bl	800083c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e160      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d46:	2001      	movs	r0, #1
 8002d48:	f000 fb20 	bl	800338c <RCC_Delay>
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fd fd72 	bl	800083c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5a:	e00f      	b.n	8002d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fd fd6e 	bl	800083c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e146      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	42420000 	.word	0x42420000
 8002d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b92      	ldr	r3, [pc, #584]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e9      	bne.n	8002d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a6 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b88      	ldr	r3, [pc, #544]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a87      	ldr	r2, [pc, #540]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b85      	ldr	r3, [pc, #532]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b82      	ldr	r3, [pc, #520]	@ (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b7f      	ldr	r3, [pc, #508]	@ (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fd fd2f 	bl	800083c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fd fd2b 	bl	800083c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	@ 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e103      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b75      	ldr	r3, [pc, #468]	@ (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x312>
 8002e08:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	e02d      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x334>
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b67      	ldr	r3, [pc, #412]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a66      	ldr	r2, [pc, #408]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	e01c      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x356>
 8002e40:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a60      	ldr	r2, [pc, #384]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6213      	str	r3, [r2, #32]
 8002e58:	e00b      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	4b58      	ldr	r3, [pc, #352]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a57      	ldr	r2, [pc, #348]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d015      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fd fcdf 	bl	800083c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fd fcdb 	bl	800083c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0b1      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ee      	beq.n	8002e82 <HAL_RCC_OscConfig+0x37e>
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fd fcc9 	bl	800083c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fd fcc5 	bl	800083c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e09b      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	4b40      	ldr	r3, [pc, #256]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d061      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d146      	bne.n	8002f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fc99 	bl	800083c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fd fc95 	bl	800083c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e06d      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	4b29      	ldr	r3, [pc, #164]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f36:	4b24      	ldr	r3, [pc, #144]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4921      	ldr	r1, [pc, #132]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a19      	ldr	r1, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	491b      	ldr	r1, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fd fc69 	bl	800083c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fd fc65 	bl	800083c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e03d      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x46a>
 8002f8c:	e035      	b.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd fc52 	bl	800083c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fd fc4e 	bl	800083c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e026      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x498>
 8002fba:	e01e      	b.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e019      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_RCC_OscConfig+0x500>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d0      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d910      	bls.n	800304c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b67      	ldr	r3, [pc, #412]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	4965      	ldr	r1, [pc, #404]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800306e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d040      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d115      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b41      	ldr	r3, [pc, #260]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e073      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3d      	ldr	r3, [pc, #244]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06b      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b39      	ldr	r3, [pc, #228]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4936      	ldr	r1, [pc, #216]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fd fba0 	bl	800083c <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fd fb9c 	bl	800083c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e053      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d210      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0207 	bic.w	r2, r3, #7
 800313e:	4922      	ldr	r1, [pc, #136]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f82d 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <HAL_RCC_ClockConfig+0x1cc>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_ClockConfig+0x1d0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fa4a 	bl	8000650 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	0800be08 	.word	0x0800be08
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <HAL_RCC_EnableCSS+0x14>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	4242004c 	.word	0x4242004c

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b04      	cmp	r3, #4
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x30>
 800321e:	2b08      	cmp	r3, #8
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x36>
 8003222:	e027      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	613b      	str	r3, [r7, #16]
      break;
 8003228:	e027      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d010      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0c5b      	lsrs	r3, r3, #17
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003256:	fb03 f202 	mul.w	r2, r3, r2
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e004      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	@ (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	613b      	str	r3, [r7, #16]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003276:	613b      	str	r3, [r7, #16]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	693b      	ldr	r3, [r7, #16]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	00f42400 	.word	0x00f42400
 8003290:	0800be20 	.word	0x0800be20
 8003294:	0800be30 	.word	0x0800be30
 8003298:	003d0900 	.word	0x003d0900
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b02      	ldr	r3, [pc, #8]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff2 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	@ (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	0800be18 	.word	0x0800be18

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffde 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0adb      	lsrs	r3, r3, #11
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800be18 	.word	0x0800be18

08003304 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_RCC_GetClockConfig+0x58>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003320:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <HAL_RCC_GetClockConfig+0x58>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_GetClockConfig+0x58>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <HAL_RCC_GetClockConfig+0x58>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	40021000 	.word	0x40021000
 8003360:	40022000 	.word	0x40022000

08003364 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_NMI_IRQHandler+0x20>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003370:	2b80      	cmp	r3, #128	@ 0x80
 8003372:	d104      	bne.n	800337e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003374:	f000 f828 	bl	80033c8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <HAL_RCC_NMI_IRQHandler+0x24>)
 800337a:	2280      	movs	r2, #128	@ 0x80
 800337c:	701a      	strb	r2, [r3, #0]
  }
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	4002100a 	.word	0x4002100a

0800338c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <RCC_Delay+0x34>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <RCC_Delay+0x38>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a8:	bf00      	nop
  }
  while (Delay --);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	60fa      	str	r2, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <RCC_Delay+0x1c>
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d07d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b4c      	ldr	r3, [pc, #304]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4a4b      	ldr	r2, [pc, #300]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	61d3      	str	r3, [r2, #28]
 800340c:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a42      	ldr	r2, [pc, #264]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fd fa02 	bl	800083c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd f9fe 	bl	800083c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e06d      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800345a:	4b36      	ldr	r3, [pc, #216]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02e      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d027      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003478:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003480:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003482:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003488:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800348e:	4a29      	ldr	r2, [pc, #164]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fd f9cd 	bl	800083c <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fd f9c9 	bl	800083c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e036      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ee      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4917      	ldr	r1, [pc, #92]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e0:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	490b      	ldr	r1, [pc, #44]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4904      	ldr	r1, [pc, #16]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	40007000 	.word	0x40007000
 800353c:	42420440 	.word	0x42420440

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e041      	b.n	80035d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f839 	bl	80035de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 f9b4 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e03a      	b.n	800367e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIM_Base_Start_IT+0x98>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <HAL_TIM_Base_Start_IT+0x9c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <HAL_TIM_Base_Start_IT+0xa0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d111      	bne.n	800366c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d010      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	e007      	b.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8ed 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8e0 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8ef 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8c3 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8b6 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8c5 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f899 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f88c 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f89b 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f86f 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f862 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f871 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fc fe14 	bl	8000440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b80      	cmp	r3, #128	@ 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8bf 	bl	80039c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f835 	bl	80038da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0220 	mvn.w	r2, #32
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f88a 	bl	80039b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <TIM_Base_SetConfig+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <TIM_Base_SetConfig+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800

080039b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e042      	b.n	8003a6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fc fddc 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	@ 0x24
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f82b 	bl	8003a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b88 <UART_SetConfig+0x114>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7ff fbfe 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	e002      	b.n	8003aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7ff fbe6 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	0119      	lsls	r1, r3, #4
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <UART_SetConfig+0x118>)
 8003b22:	fba3 0302 	umull	r0, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2064      	movs	r0, #100	@ 0x64
 8003b2a:	fb00 f303 	mul.w	r3, r0, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	@ 0x32
 8003b34:	4a15      	ldr	r2, [pc, #84]	@ (8003b8c <UART_SetConfig+0x118>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b40:	4419      	add	r1, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <UART_SetConfig+0x118>)
 8003b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2064      	movs	r0, #100	@ 0x64
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	3332      	adds	r3, #50	@ 0x32
 8003b6c:	4a07      	ldr	r2, [pc, #28]	@ (8003b8c <UART_SetConfig+0x118>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	51eb851f 	.word	0x51eb851f

08003b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b90:	b084      	sub	sp, #16
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	f107 0014 	add.w	r0, r7, #20
 8003b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	b004      	add	sp, #16
 8003bae:	4770      	bx	lr

08003bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bc0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003bc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003be4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003be8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c28:	b084      	sub	sp, #16
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	f107 0014 	add.w	r0, r7, #20
 8003c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	b004      	add	sp, #16
 8003c66:	4770      	bx	lr

08003c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
	...

08003c94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b09d      	sub	sp, #116	@ 0x74
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d81f      	bhi.n	8003d06 <USB_ActivateEndpoint+0x72>
 8003cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <USB_ActivateEndpoint+0x38>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003d0f 	.word	0x08003d0f
 8003cd8:	08003ceb 	.word	0x08003ceb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003cdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ce0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ce4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003ce8:	e012      	b.n	8003d10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003cea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003cee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003cf2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003cf6:	e00b      	b.n	8003d10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003cf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003cfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003d04:	e004      	b.n	8003d10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003d0c:	e000      	b.n	8003d10 <USB_ActivateEndpoint+0x7c>
      break;
 8003d0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	7b1b      	ldrb	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8178 	bne.w	8004070 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8084 	beq.w	8003e92 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	011a      	lsls	r2, r3, #4
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	88db      	ldrh	r3, [r3, #6]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	827b      	strh	r3, [r7, #18]
 8003dcc:	8a7b      	ldrh	r3, [r7, #18]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <USB_ActivateEndpoint+0x17a>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dec:	823b      	strh	r3, [r7, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	8a3b      	ldrh	r3, [r7, #16]
 8003dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d020      	beq.n	8003e58 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2c:	81bb      	strh	r3, [r7, #12]
 8003e2e:	89bb      	ldrh	r3, [r7, #12]
 8003e30:	f083 0320 	eor.w	r3, r3, #32
 8003e34:	81bb      	strh	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	89bb      	ldrh	r3, [r7, #12]
 8003e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
 8003e56:	e2d5      	b.n	8004404 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6e:	81fb      	strh	r3, [r7, #14]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]
 8003e90:	e2b8      	b.n	8004404 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	4413      	add	r3, r2
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	011a      	lsls	r2, r3, #4
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	88db      	ldrh	r3, [r3, #6]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	011a      	lsls	r2, r3, #4
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f00:	d91d      	bls.n	8003f3e <USB_ActivateEndpoint+0x2aa>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <USB_ActivateEndpoint+0x288>
 8003f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e026      	b.n	8003f8c <USB_ActivateEndpoint+0x2f8>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <USB_ActivateEndpoint+0x2c8>
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e017      	b.n	8003f8c <USB_ActivateEndpoint+0x2f8>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <USB_ActivateEndpoint+0x2e2>
 8003f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f72:	3301      	adds	r3, #1
 8003f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003f9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01b      	beq.n	8003fdc <USB_ActivateEndpoint+0x348>
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	843b      	strh	r3, [r7, #32]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	8c3b      	ldrh	r3, [r7, #32]
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d124      	bne.n	800402e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	83bb      	strh	r3, [r7, #28]
 8003ffc:	8bbb      	ldrh	r3, [r7, #28]
 8003ffe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004002:	83bb      	strh	r3, [r7, #28]
 8004004:	8bbb      	ldrh	r3, [r7, #28]
 8004006:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800400a:	83bb      	strh	r3, [r7, #28]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	8bbb      	ldrh	r3, [r7, #28]
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]
 800402c:	e1ea      	b.n	8004404 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004044:	83fb      	strh	r3, [r7, #30]
 8004046:	8bfb      	ldrh	r3, [r7, #30]
 8004048:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800404c:	83fb      	strh	r3, [r7, #30]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8bfb      	ldrh	r3, [r7, #30]
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]
 800406e:	e1c9      	b.n	8004404 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	78db      	ldrb	r3, [r3, #3]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11e      	bne.n	80040b6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80040a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80040ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]
 80040b4:	e01d      	b.n	80040f2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004102:	4413      	add	r3, r2
 8004104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	011a      	lsls	r2, r3, #4
 800410c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800410e:	4413      	add	r3, r2
 8004110:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004114:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	891b      	ldrh	r3, [r3, #8]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	657b      	str	r3, [r7, #84]	@ 0x54
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004136:	4413      	add	r3, r2
 8004138:	657b      	str	r3, [r7, #84]	@ 0x54
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004142:	4413      	add	r3, r2
 8004144:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004148:	653b      	str	r3, [r7, #80]	@ 0x50
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	895b      	ldrh	r3, [r3, #10]
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004158:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 8093 	bne.w	800428a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <USB_ActivateEndpoint+0x524>
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004196:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80041c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <USB_ActivateEndpoint+0x574>
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80041f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004200:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004204:	b29b      	uxth	r3, r3
 8004206:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004220:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004222:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004226:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004228:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800422a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800422e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004266:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
 8004288:	e0bc      	b.n	8004404 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800429a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800429e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01d      	beq.n	80042e2 <USB_ActivateEndpoint+0x64e>
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80042ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042de:	b29b      	uxth	r3, r3
 80042e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80042f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01d      	beq.n	800433a <USB_ActivateEndpoint+0x6a6>
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004314:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800432e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004332:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d024      	beq.n	800438c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004358:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800435c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004360:	f083 0320 	eor.w	r3, r3, #32
 8004364:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800437a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800437e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004386:	b29b      	uxth	r3, r3
 8004388:	8013      	strh	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80043b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004404:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004408:	4618      	mov	r0, r3
 800440a:	3774      	adds	r7, #116	@ 0x74
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop

08004414 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004414:	b480      	push	{r7}
 8004416:	b08d      	sub	sp, #52	@ 0x34
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 808e 	bne.w	8004544 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d044      	beq.n	80044ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	81bb      	strh	r3, [r7, #12]
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <USB_DeactivateEndpoint+0x6c>
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	817b      	strh	r3, [r7, #10]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	897b      	ldrh	r3, [r7, #10]
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004496:	813b      	strh	r3, [r7, #8]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8013      	strh	r3, [r2, #0]
 80044b8:	e192      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	827b      	strh	r3, [r7, #18]
 80044c8:	8a7b      	ldrh	r3, [r7, #18]
 80044ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <USB_DeactivateEndpoint+0xf6>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e8:	823b      	strh	r3, [r7, #16]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8a3b      	ldrh	r3, [r7, #16]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800451c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004520:	81fb      	strh	r3, [r7, #14]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
 8004542:	e14d      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 80a5 	bne.w	8004698 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	843b      	strh	r3, [r7, #32]
 800455c:	8c3b      	ldrh	r3, [r7, #32]
 800455e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01b      	beq.n	800459e <USB_DeactivateEndpoint+0x18a>
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	83fb      	strh	r3, [r7, #30]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8bfb      	ldrh	r3, [r7, #30]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	83bb      	strh	r3, [r7, #28]
 80045ac:	8bbb      	ldrh	r3, [r7, #28]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01b      	beq.n	80045ee <USB_DeactivateEndpoint+0x1da>
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045cc:	837b      	strh	r3, [r7, #26]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	833b      	strh	r3, [r7, #24]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8b3b      	ldrh	r3, [r7, #24]
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463c:	82fb      	strh	r3, [r7, #22]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004674:	82bb      	strh	r3, [r7, #20]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8abb      	ldrh	r3, [r7, #20]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
 8004696:	e0a3      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80046a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80046a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <USB_DeactivateEndpoint+0x2d4>
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80046f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <USB_DeactivateEndpoint+0x324>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004786:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3734      	adds	r7, #52	@ 0x34
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0c2      	sub	sp, #264	@ 0x108
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047fa:	6018      	str	r0, [r3, #0]
 80047fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004804:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800480a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	f040 86b7 	bne.w	8005586 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d908      	bls.n	8004846 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004844:	e007      	b.n	8004856 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800485a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	7b1b      	ldrb	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d13a      	bne.n	80048dc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6959      	ldr	r1, [r3, #20]
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	88da      	ldrh	r2, [r3, #6]
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004882:	b29b      	uxth	r3, r3
 8004884:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004888:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f001 fc9c 	bl	80061ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	011a      	lsls	r2, r3, #4
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	f000 be1f 	b.w	800551a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	78db      	ldrb	r3, [r3, #3]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f040 8462 	bne.w	80051b2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	f240 83df 	bls.w	80050ca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800490c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800491a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004932:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800493a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800496c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	1ad2      	subs	r2, r2, r3
 800497a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800497e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800498a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 81c7 	beq.w	8004d3c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d177      	bne.n	8004aba <USB_EPStartXfer+0x2ce>
 80049ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	4413      	add	r3, r2
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	801a      	strh	r2, [r3, #0]
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a1c:	d921      	bls.n	8004a62 <USB_EPStartXfer+0x276>
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <USB_EPStartXfer+0x252>
 8004a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	029b      	lsls	r3, r3, #10
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e050      	b.n	8004b04 <USB_EPStartXfer+0x318>
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <USB_EPStartXfer+0x294>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	e041      	b.n	8004b04 <USB_EPStartXfer+0x318>
 8004a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <USB_EPStartXfer+0x2b4>
 8004a96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e024      	b.n	8004b04 <USB_EPStartXfer+0x318>
 8004aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d11c      	bne.n	8004b04 <USB_EPStartXfer+0x318>
 8004aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	4413      	add	r3, r2
 8004ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	4413      	add	r3, r2
 8004af4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	895b      	ldrh	r3, [r3, #10]
 8004b10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6959      	ldr	r1, [r3, #20]
 8004b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004b2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004b2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004b32:	6800      	ldr	r0, [r0, #0]
 8004b34:	f001 fb49 	bl	80061ca <USB_WritePMA>
            ep->xfer_buff += len;
 8004b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	441a      	add	r2, r3
 8004b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d90f      	bls.n	8004b92 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	621a      	str	r2, [r3, #32]
 8004b90:	e00e      	b.n	8004bb0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d177      	bne.n	8004cb0 <USB_EPStartXfer+0x4c4>
 8004bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	4413      	add	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	011a      	lsls	r2, r3, #4
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c10:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c12:	d921      	bls.n	8004c58 <USB_EPStartXfer+0x46c>
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <USB_EPStartXfer+0x448>
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e056      	b.n	8004d06 <USB_EPStartXfer+0x51a>
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <USB_EPStartXfer+0x48a>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e047      	b.n	8004d06 <USB_EPStartXfer+0x51a>
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <USB_EPStartXfer+0x4aa>
 8004c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c90:	3301      	adds	r3, #1
 8004c92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e02a      	b.n	8004d06 <USB_EPStartXfer+0x51a>
 8004cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d122      	bne.n	8004d06 <USB_EPStartXfer+0x51a>
 8004cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	011a      	lsls	r2, r3, #4
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	891b      	ldrh	r3, [r3, #8]
 8004d12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6959      	ldr	r1, [r3, #20]
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d2c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d30:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d34:	6800      	ldr	r0, [r0, #0]
 8004d36:	f001 fa48 	bl	80061ca <USB_WritePMA>
 8004d3a:	e3ee      	b.n	800551a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d177      	bne.n	8004e3c <USB_EPStartXfer+0x650>
 8004d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d6c:	4413      	add	r3, r2
 8004d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	011a      	lsls	r2, r3, #4
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d80:	4413      	add	r3, r2
 8004d82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d9e:	d921      	bls.n	8004de4 <USB_EPStartXfer+0x5f8>
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <USB_EPStartXfer+0x5d4>
 8004db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e056      	b.n	8004e92 <USB_EPStartXfer+0x6a6>
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <USB_EPStartXfer+0x616>
 8004dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e047      	b.n	8004e92 <USB_EPStartXfer+0x6a6>
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <USB_EPStartXfer+0x636>
 8004e18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e02a      	b.n	8004e92 <USB_EPStartXfer+0x6a6>
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d122      	bne.n	8004e92 <USB_EPStartXfer+0x6a6>
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e6c:	4413      	add	r3, r2
 8004e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	011a      	lsls	r2, r3, #4
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e80:	4413      	add	r3, r2
 8004e82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	891b      	ldrh	r3, [r3, #8]
 8004e9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004eb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ebc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ec0:	6800      	ldr	r0, [r0, #0]
 8004ec2:	f001 f982 	bl	80061ca <USB_WritePMA>
            ep->xfer_buff += len;
 8004ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed6:	441a      	add	r2, r3
 8004ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a1a      	ldr	r2, [r3, #32]
 8004ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d90f      	bls.n	8004f20 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	621a      	str	r2, [r3, #32]
 8004f1e:	e00e      	b.n	8004f3e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d177      	bne.n	800504a <USB_EPStartXfer+0x85e>
 8004f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	4413      	add	r3, r2
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011a      	lsls	r2, r3, #4
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	4413      	add	r3, r2
 8004f90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004faa:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fac:	d921      	bls.n	8004ff2 <USB_EPStartXfer+0x806>
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <USB_EPStartXfer+0x7e2>
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e050      	b.n	8005094 <USB_EPStartXfer+0x8a8>
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <USB_EPStartXfer+0x824>
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005008:	b29a      	uxth	r2, r3
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e041      	b.n	8005094 <USB_EPStartXfer+0x8a8>
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <USB_EPStartXfer+0x844>
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	3301      	adds	r3, #1
 800502c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	b29b      	uxth	r3, r3
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	b29b      	uxth	r3, r3
 8005040:	4313      	orrs	r3, r2
 8005042:	b29a      	uxth	r2, r3
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e024      	b.n	8005094 <USB_EPStartXfer+0x8a8>
 800504a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800504e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d11c      	bne.n	8005094 <USB_EPStartXfer+0x8a8>
 800505a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506e:	4413      	add	r3, r2
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
 8005072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	011a      	lsls	r2, r3, #4
 8005080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005082:	4413      	add	r3, r2
 8005084:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508e:	b29a      	uxth	r2, r3
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	895b      	ldrh	r3, [r3, #10]
 80050a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6959      	ldr	r1, [r3, #20]
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050c2:	6800      	ldr	r0, [r0, #0]
 80050c4:	f001 f881 	bl	80061ca <USB_WritePMA>
 80050c8:	e227      	b.n	800551a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80050ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80050da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80050fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005100:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005132:	b29b      	uxth	r3, r3
 8005134:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005156:	4413      	add	r3, r2
 8005158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800515a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	011a      	lsls	r2, r3, #4
 8005168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800516a:	4413      	add	r3, r2
 800516c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005176:	b29a      	uxth	r2, r3
 8005178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800517a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	891b      	ldrh	r3, [r3, #8]
 8005188:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6959      	ldr	r1, [r3, #20]
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519c:	b29b      	uxth	r3, r3
 800519e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80051a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80051a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	f001 f80d 	bl	80061ca <USB_WritePMA>
 80051b0:	e1b3      	b.n	800551a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80051b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80c6 	beq.w	8005384 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	673b      	str	r3, [r7, #112]	@ 0x70
 8005204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d177      	bne.n	8005304 <USB_EPStartXfer+0xb18>
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005234:	4413      	add	r3, r2
 8005236:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005248:	4413      	add	r3, r2
 800524a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800524e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525a:	b29a      	uxth	r2, r3
 800525c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	2b3e      	cmp	r3, #62	@ 0x3e
 8005266:	d921      	bls.n	80052ac <USB_EPStartXfer+0xac0>
 8005268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <USB_EPStartXfer+0xa9c>
 800527e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005282:	3b01      	subs	r3, #1
 8005284:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29b      	uxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	e050      	b.n	800534e <USB_EPStartXfer+0xb62>
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <USB_EPStartXfer+0xade>
 80052b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e041      	b.n	800534e <USB_EPStartXfer+0xb62>
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <USB_EPStartXfer+0xafe>
 80052e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80052e4:	3301      	adds	r3, #1
 80052e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e024      	b.n	800534e <USB_EPStartXfer+0xb62>
 8005304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d11c      	bne.n	800534e <USB_EPStartXfer+0xb62>
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005328:	4413      	add	r3, r2
 800532a:	673b      	str	r3, [r7, #112]	@ 0x70
 800532c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800533c:	4413      	add	r3, r2
 800533e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	b29a      	uxth	r2, r3
 800534a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800534e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	895b      	ldrh	r3, [r3, #10]
 800535a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800535e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6959      	ldr	r1, [r3, #20]
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	b29b      	uxth	r3, r3
 8005370:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005374:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005378:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f000 ff24 	bl	80061ca <USB_WritePMA>
 8005382:	e0ca      	b.n	800551a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d177      	bne.n	8005484 <USB_EPStartXfer+0xc98>
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053b4:	4413      	add	r3, r2
 80053b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053e6:	d921      	bls.n	800542c <USB_EPStartXfer+0xc40>
 80053e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <USB_EPStartXfer+0xc1c>
 80053fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005402:	3b01      	subs	r3, #1
 8005404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29a      	uxth	r2, r3
 800540e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e05c      	b.n	80054e6 <USB_EPStartXfer+0xcfa>
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <USB_EPStartXfer+0xc5e>
 8005434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005442:	b29a      	uxth	r2, r3
 8005444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	e04d      	b.n	80054e6 <USB_EPStartXfer+0xcfa>
 800544a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <USB_EPStartXfer+0xc7e>
 8005460:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005464:	3301      	adds	r3, #1
 8005466:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800546a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29a      	uxth	r2, r3
 8005470:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005474:	b29b      	uxth	r3, r3
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	b29b      	uxth	r3, r3
 800547a:	4313      	orrs	r3, r2
 800547c:	b29a      	uxth	r2, r3
 800547e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	e030      	b.n	80054e6 <USB_EPStartXfer+0xcfa>
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d128      	bne.n	80054e6 <USB_EPStartXfer+0xcfa>
 8005494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054b8:	4413      	add	r3, r2
 80054ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	011a      	lsls	r2, r3, #4
 80054cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054d0:	4413      	add	r3, r2
 80054d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	b29a      	uxth	r2, r3
 80054e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	891b      	ldrh	r3, [r3, #8]
 80054f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005506:	b29b      	uxth	r3, r3
 8005508:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800550c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005510:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f000 fe58 	bl	80061ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005540:	817b      	strh	r3, [r7, #10]
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	f083 0310 	eor.w	r3, r3, #16
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	f083 0320 	eor.w	r3, r3, #32
 8005550:	817b      	strh	r3, [r7, #10]
 8005552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557e:	b29b      	uxth	r3, r3
 8005580:	8013      	strh	r3, [r2, #0]
 8005582:	f000 bcde 	b.w	8005f42 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	7b1b      	ldrb	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 80bb 	bne.w	800570e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d917      	bls.n	80055e4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	619a      	str	r2, [r3, #24]
 80055e2:	e00e      	b.n	8005602 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80055f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005626:	4413      	add	r3, r2
 8005628:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800563e:	4413      	add	r3, r2
 8005640:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005654:	b29a      	uxth	r2, r3
 8005656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	2b3e      	cmp	r3, #62	@ 0x3e
 8005662:	d924      	bls.n	80056ae <USB_EPStartXfer+0xec2>
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <USB_EPStartXfer+0xe98>
 800567a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800567e:	3b01      	subs	r3, #1
 8005680:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29a      	uxth	r2, r3
 800568c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005690:	b29b      	uxth	r3, r3
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	b29b      	uxth	r3, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	f000 bc10 	b.w	8005ece <USB_EPStartXfer+0x16e2>
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <USB_EPStartXfer+0xee4>
 80056b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	e3fe      	b.n	8005ece <USB_EPStartXfer+0x16e2>
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <USB_EPStartXfer+0xf04>
 80056e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80056ea:	3301      	adds	r3, #1
 80056ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	029b      	lsls	r3, r3, #10
 8005700:	b29b      	uxth	r3, r3
 8005702:	4313      	orrs	r3, r2
 8005704:	b29a      	uxth	r2, r3
 8005706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	e3df      	b.n	8005ece <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800570e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	2b02      	cmp	r3, #2
 800571c:	f040 8218 	bne.w	8005b50 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 809d 	bne.w	800586c <USB_EPStartXfer+0x1080>
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005756:	4413      	add	r3, r2
 8005758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800576e:	4413      	add	r3, r2
 8005770:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005784:	b29a      	uxth	r2, r3
 8005786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b3e      	cmp	r3, #62	@ 0x3e
 800579a:	d92b      	bls.n	80057f4 <USB_EPStartXfer+0x1008>
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0xfe0>
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d8:	b29b      	uxth	r3, r3
 80057da:	029b      	lsls	r3, r3, #10
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e070      	b.n	80058d6 <USB_EPStartXfer+0x10ea>
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10c      	bne.n	800581e <USB_EPStartXfer+0x1032>
 8005804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005814:	b29a      	uxth	r2, r3
 8005816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e05b      	b.n	80058d6 <USB_EPStartXfer+0x10ea>
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0x1062>
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800584e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b29a      	uxth	r2, r3
 8005864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e034      	b.n	80058d6 <USB_EPStartXfer+0x10ea>
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d12c      	bne.n	80058d6 <USB_EPStartXfer+0x10ea>
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058a0:	4413      	add	r3, r2
 80058a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80058e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 809d 	bne.w	8005a30 <USB_EPStartXfer+0x1244>
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800591a:	4413      	add	r3, r2
 800591c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005932:	4413      	add	r3, r2
 8005934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800593c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005948:	b29a      	uxth	r2, r3
 800594a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b3e      	cmp	r3, #62	@ 0x3e
 800595e:	d92b      	bls.n	80059b8 <USB_EPStartXfer+0x11cc>
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <USB_EPStartXfer+0x11a4>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598a:	3b01      	subs	r3, #1
 800598c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800599c:	b29b      	uxth	r3, r3
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	e069      	b.n	8005a8c <USB_EPStartXfer+0x12a0>
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <USB_EPStartXfer+0x11f6>
 80059c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d8:	b29a      	uxth	r2, r3
 80059da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e054      	b.n	8005a8c <USB_EPStartXfer+0x12a0>
 80059e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0x1226>
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a2c:	801a      	strh	r2, [r3, #0]
 8005a2e:	e02d      	b.n	8005a8c <USB_EPStartXfer+0x12a0>
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d125      	bne.n	8005a8c <USB_EPStartXfer+0x12a0>
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8218 	beq.w	8005ece <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005abe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <USB_EPStartXfer+0x12ea>
 8005aca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ad6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 81f5 	bne.w	8005ece <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ae4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 81ee 	bne.w	8005ece <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
 8005b4e:	e1be      	b.n	8005ece <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f040 81b4 	bne.w	8005eca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d917      	bls.n	8005bae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	619a      	str	r2, [r3, #24]
 8005bac:	e00e      	b.n	8005bcc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 8085 	bne.w	8005ce8 <USB_EPStartXfer+0x14fc>
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c02:	4413      	add	r3, r2
 8005c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	011a      	lsls	r2, r3, #4
 8005c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c3e:	d923      	bls.n	8005c88 <USB_EPStartXfer+0x149c>
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <USB_EPStartXfer+0x1474>
 8005c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	029b      	lsls	r3, r3, #10
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e060      	b.n	8005d4a <USB_EPStartXfer+0x155e>
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10c      	bne.n	8005caa <USB_EPStartXfer+0x14be>
 8005c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e04f      	b.n	8005d4a <USB_EPStartXfer+0x155e>
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <USB_EPStartXfer+0x14de>
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e030      	b.n	8005d4a <USB_EPStartXfer+0x155e>
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d128      	bne.n	8005d4a <USB_EPStartXfer+0x155e>
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 8085 	bne.w	8005e74 <USB_EPStartXfer+0x1688>
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d8e:	4413      	add	r3, r2
 8005d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dca:	d923      	bls.n	8005e14 <USB_EPStartXfer+0x1628>
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <USB_EPStartXfer+0x1600>
 8005de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005de6:	3b01      	subs	r3, #1
 8005de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e05c      	b.n	8005ece <USB_EPStartXfer+0x16e2>
 8005e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10c      	bne.n	8005e36 <USB_EPStartXfer+0x164a>
 8005e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e04b      	b.n	8005ece <USB_EPStartXfer+0x16e2>
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <USB_EPStartXfer+0x166a>
 8005e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e50:	3301      	adds	r3, #1
 8005e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e02c      	b.n	8005ece <USB_EPStartXfer+0x16e2>
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d124      	bne.n	8005ece <USB_EPStartXfer+0x16e2>
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	011a      	lsls	r2, r3, #4
 8005eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e001      	b.n	8005ece <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e03a      	b.n	8005f44 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005ef8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005efc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005f04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005f08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f76:	81bb      	strh	r3, [r7, #12]
 8005f78:	89bb      	ldrh	r3, [r7, #12]
 8005f7a:	f083 0310 	eor.w	r3, r3, #16
 8005f7e:	81bb      	strh	r3, [r7, #12]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	89bb      	ldrh	r3, [r7, #12]
 8005f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8013      	strh	r3, [r2, #0]
 8005fa0:	e01f      	b.n	8005fe2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb8:	81fb      	strh	r3, [r7, #14]
 8005fba:	89fb      	ldrh	r3, [r7, #14]
 8005fbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fc0:	81fb      	strh	r3, [r7, #14]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr

08005fee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b087      	sub	sp, #28
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	7b1b      	ldrb	r3, [r3, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 809d 	bne.w	800613c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d04c      	beq.n	80060a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	823b      	strh	r3, [r7, #16]
 8006018:	8a3b      	ldrh	r3, [r7, #16]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <USB_EPClearStall+0x6c>
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	81fb      	strh	r3, [r7, #14]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	89fb      	ldrh	r3, [r7, #14]
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d06c      	beq.n	800613c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006078:	81bb      	strh	r3, [r7, #12]
 800607a:	89bb      	ldrh	r3, [r7, #12]
 800607c:	f083 0320 	eor.w	r3, r3, #32
 8006080:	81bb      	strh	r3, [r7, #12]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	89bb      	ldrh	r3, [r7, #12]
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]
 80060a2:	e04b      	b.n	800613c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	82fb      	strh	r3, [r7, #22]
 80060b2:	8afb      	ldrh	r3, [r7, #22]
 80060b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01b      	beq.n	80060f4 <USB_EPClearStall+0x106>
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d2:	82bb      	strh	r3, [r7, #20]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	8abb      	ldrh	r3, [r7, #20]
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	827b      	strh	r3, [r7, #18]
 800610c:	8a7b      	ldrh	r3, [r7, #18]
 800610e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006112:	827b      	strh	r3, [r7, #18]
 8006114:	8a7b      	ldrh	r3, [r7, #18]
 8006116:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800611a:	827b      	strh	r3, [r7, #18]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061a8:	68fb      	ldr	r3, [r7, #12]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b08b      	sub	sp, #44	@ 0x2c
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	4611      	mov	r1, r2
 80061d6:	461a      	mov	r2, r3
 80061d8:	460b      	mov	r3, r1
 80061da:	80fb      	strh	r3, [r7, #6]
 80061dc:	4613      	mov	r3, r2
 80061de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061e0:	88bb      	ldrh	r3, [r7, #4]
 80061e2:	3301      	adds	r3, #1
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	005a      	lsls	r2, r3, #1
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
 8006202:	e01e      	b.n	8006242 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3301      	adds	r3, #1
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	b21a      	sxth	r2, r3
 8006214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006218:	4313      	orrs	r3, r2
 800621a:	b21b      	sxth	r3, r3
 800621c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	8a7a      	ldrh	r2, [r7, #18]
 8006222:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	3302      	adds	r3, #2
 8006228:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	3302      	adds	r3, #2
 800622e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3301      	adds	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	3b01      	subs	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1dd      	bne.n	8006204 <USB_WritePMA+0x3a>
  }
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	372c      	adds	r7, #44	@ 0x2c
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006254:	b480      	push	{r7}
 8006256:	b08b      	sub	sp, #44	@ 0x2c
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	460b      	mov	r3, r1
 8006264:	80fb      	strh	r3, [r7, #6]
 8006266:	4613      	mov	r3, r2
 8006268:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800626a:	88bb      	ldrh	r3, [r7, #4]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	005a      	lsls	r2, r3, #1
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006286:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
 800628c:	e01b      	b.n	80062c6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	3302      	adds	r3, #2
 800629a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	3301      	adds	r3, #1
 80062a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	3301      	adds	r3, #1
 80062b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	3302      	adds	r3, #2
 80062be:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	3b01      	subs	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e0      	bne.n	800628e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80062cc:	88bb      	ldrh	r3, [r7, #4]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	701a      	strb	r2, [r3, #0]
  }
}
 80062e8:	bf00      	nop
 80062ea:	372c      	adds	r7, #44	@ 0x2c
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	7c1b      	ldrb	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d115      	bne.n	8006332 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800630a:	2202      	movs	r2, #2
 800630c:	2101      	movs	r1, #1
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f005 fab5 	bl	800b87e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800631c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006320:	2202      	movs	r2, #2
 8006322:	2181      	movs	r1, #129	@ 0x81
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f005 faaa 	bl	800b87e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006330:	e012      	b.n	8006358 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006332:	2340      	movs	r3, #64	@ 0x40
 8006334:	2202      	movs	r2, #2
 8006336:	2101      	movs	r1, #1
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f005 faa0 	bl	800b87e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006346:	2340      	movs	r3, #64	@ 0x40
 8006348:	2202      	movs	r2, #2
 800634a:	2181      	movs	r1, #129	@ 0x81
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f005 fa96 	bl	800b87e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006358:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 800635c:	f005 fbd6 	bl	800bb0c <USBD_static_malloc>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006372:	2302      	movs	r3, #2
 8006374:	e003      	b.n	800637e <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9da 	bl	8006730 <MSC_BOT_Init>

  return USBD_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006392:	2101      	movs	r1, #1
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f005 fa98 	bl	800b8ca <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80063a2:	2181      	movs	r1, #129	@ 0x81
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f005 fa90 	bl	800b8ca <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa07 	bl	80067c4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f005 fbac 	bl	800bb24 <USBD_static_free>
    pdev->pClassData  = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04d      	beq.n	80064a2 <USBD_MSC_Setup+0xc2>
 8006406:	2b20      	cmp	r3, #32
 8006408:	f040 8113 	bne.w	8006632 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2bfe      	cmp	r3, #254	@ 0xfe
 8006412:	d002      	beq.n	800641a <USBD_MSC_Setup+0x3a>
 8006414:	2bff      	cmp	r3, #255	@ 0xff
 8006416:	d024      	beq.n	8006462 <USBD_MSC_Setup+0x82>
 8006418:	e03b      	b.n	8006492 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d118      	bne.n	8006454 <USBD_MSC_Setup+0x74>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88db      	ldrh	r3, [r3, #6]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d114      	bne.n	8006454 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006430:	2b00      	cmp	r3, #0
 8006432:	da0f      	bge.n	8006454 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	4798      	blx	r3
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2201      	movs	r2, #1
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f002 f98f 	bl	8008770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006452:	e025      	b.n	80064a0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f002 f920 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 800645c:	2302      	movs	r3, #2
 800645e:	75fb      	strb	r3, [r7, #23]
          break;
 8006460:	e01e      	b.n	80064a0 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10c      	bne.n	8006484 <USBD_MSC_Setup+0xa4>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d108      	bne.n	8006484 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006478:	2b00      	cmp	r3, #0
 800647a:	db03      	blt.n	8006484 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f987 	bl	8006790 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006482:	e00d      	b.n	80064a0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f002 f908 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 800648c:	2302      	movs	r3, #2
 800648e:	75fb      	strb	r3, [r7, #23]
          break;
 8006490:	e006      	b.n	80064a0 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 f901 	bl	800869c <USBD_CtlError>
          ret = USBD_FAIL;
 800649a:	2302      	movs	r3, #2
 800649c:	75fb      	strb	r3, [r7, #23]
          break;
 800649e:	bf00      	nop
      }
      break;
 80064a0:	e0ce      	b.n	8006640 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b0b      	cmp	r3, #11
 80064a8:	f200 80bb 	bhi.w	8006622 <USBD_MSC_Setup+0x242>
 80064ac:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <USBD_MSC_Setup+0xd4>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	0800655b 	.word	0x0800655b
 80064bc:	08006623 	.word	0x08006623
 80064c0:	08006623 	.word	0x08006623
 80064c4:	08006623 	.word	0x08006623
 80064c8:	08006623 	.word	0x08006623
 80064cc:	08006623 	.word	0x08006623
 80064d0:	08006623 	.word	0x08006623
 80064d4:	08006623 	.word	0x08006623
 80064d8:	08006623 	.word	0x08006623
 80064dc:	0800650d 	.word	0x0800650d
 80064e0:	08006535 	.word	0x08006535
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d107      	bne.n	80064fe <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064ee:	f107 030e 	add.w	r3, r7, #14
 80064f2:	2202      	movs	r2, #2
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f002 f93a 	bl	8008770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064fc:	e098      	b.n	8006630 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f002 f8cb 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 8006506:	2302      	movs	r3, #2
 8006508:	75fb      	strb	r3, [r7, #23]
          break;
 800650a:	e091      	b.n	8006630 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006512:	2b03      	cmp	r3, #3
 8006514:	d107      	bne.n	8006526 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3304      	adds	r3, #4
 800651a:	2201      	movs	r2, #1
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f002 f926 	bl	8008770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006524:	e084      	b.n	8006630 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 f8b7 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	75fb      	strb	r3, [r7, #23]
          break;
 8006532:	e07d      	b.n	8006630 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653a:	2b03      	cmp	r3, #3
 800653c:	d106      	bne.n	800654c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800654a:	e071      	b.n	8006630 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f002 f8a4 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 8006554:	2302      	movs	r3, #2
 8006556:	75fb      	strb	r3, [r7, #23]
          break;
 8006558:	e06a      	b.n	8006630 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	889b      	ldrh	r3, [r3, #4]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f005 f9d0 	bl	800b908 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	889b      	ldrh	r3, [r3, #4]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f005 f9aa 	bl	800b8ca <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	b25b      	sxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	da23      	bge.n	80065c8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	889b      	ldrh	r3, [r3, #4]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 020f 	and.w	r2, r3, #15
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	3318      	adds	r3, #24
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7c1b      	ldrb	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80065a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065a8:	2202      	movs	r2, #2
 80065aa:	2181      	movs	r1, #129	@ 0x81
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f005 f966 	bl	800b87e <USBD_LL_OpenEP>
 80065b2:	e005      	b.n	80065c0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80065b4:	2340      	movs	r3, #64	@ 0x40
 80065b6:	2202      	movs	r2, #2
 80065b8:	2181      	movs	r1, #129	@ 0x81
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f005 f95f 	bl	800b87e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80065c6:	e024      	b.n	8006612 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	889b      	ldrh	r3, [r3, #4]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7c1b      	ldrb	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80065ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065f2:	2202      	movs	r2, #2
 80065f4:	2101      	movs	r1, #1
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f005 f941 	bl	800b87e <USBD_LL_OpenEP>
 80065fc:	e005      	b.n	800660a <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80065fe:	2340      	movs	r3, #64	@ 0x40
 8006600:	2202      	movs	r2, #2
 8006602:	2101      	movs	r1, #1
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f005 f93a 	bl	800b87e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	889b      	ldrh	r3, [r3, #4]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa52 	bl	8006ac4 <MSC_BOT_CplClrFeature>
          break;
 8006620:	e006      	b.n	8006630 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 f839 	bl	800869c <USBD_CtlError>
          ret = USBD_FAIL;
 800662a:	2302      	movs	r3, #2
 800662c:	75fb      	strb	r3, [r7, #23]
          break;
 800662e:	bf00      	nop
      }
      break;
 8006630:	e006      	b.n	8006640 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 f831 	bl	800869c <USBD_CtlError>
      ret = USBD_FAIL;
 800663a:	2302      	movs	r3, #2
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	bf00      	nop
  }

  return ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop

0800664c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8c1 	bl	80067e4 <MSC_BOT_DataIn>

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8e3 	bl	8006848 <MSC_BOT_DataOut>

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800669a:	4b03      	ldr	r3, [pc, #12]	@ (80066a8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20000044 	.word	0x20000044

080066ac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	@ (80066c8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000064 	.word	0x20000064

080066cc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80066da:	4b03      	ldr	r3, [pc, #12]	@ (80066e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000084 	.word	0x20000084

080066ec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	220a      	movs	r2, #10
 80066f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80066fa:	4b03      	ldr	r3, [pc, #12]	@ (8006708 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	200000a4 	.word	0x200000a4

0800670c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  hmsc->scsi_sense_head = 0U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2000      	movs	r0, #0
 8006766:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006768:	2101      	movs	r1, #1
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f005 f8cc 	bl	800b908 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006770:	2181      	movs	r1, #129	@ 0x81
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f005 f8c8 	bl	800b908 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 800677e:	231f      	movs	r3, #31
 8006780:	2101      	movs	r1, #1
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f005 f98b 	bl	800ba9e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800679e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 80067b2:	231f      	movs	r3, #31
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f005 f971 	bl	800ba9e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	721a      	strb	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	7a1b      	ldrb	r3, [r3, #8]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d005      	beq.n	800680c <MSC_BOT_DataIn+0x28>
 8006800:	2b02      	cmp	r3, #2
 8006802:	db1a      	blt.n	800683a <MSC_BOT_DataIn+0x56>
 8006804:	3b03      	subs	r3, #3
 8006806:	2b01      	cmp	r3, #1
 8006808:	d817      	bhi.n	800683a <MSC_BOT_DataIn+0x56>
 800680a:	e011      	b.n	8006830 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8006818:	461a      	mov	r2, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f97a 	bl	8006b14 <SCSI_ProcessCmd>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0b      	bge.n	800683e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006826:	2101      	movs	r1, #1
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8f1 	bl	8006a10 <MSC_BOT_SendCSW>
      }
      break;
 800682e:	e006      	b.n	800683e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8ec 	bl	8006a10 <MSC_BOT_SendCSW>
      break;
 8006838:	e002      	b.n	8006840 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <MSC_BOT_DataIn+0x5c>
      break;
 800683e:	bf00      	nop
  }
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	7a1b      	ldrb	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <MSC_BOT_DataOut+0x22>
 8006864:	2b01      	cmp	r3, #1
 8006866:	d004      	beq.n	8006872 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006868:	e015      	b.n	8006896 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f818 	bl	80068a0 <MSC_BOT_CBW_Decode>
      break;
 8006870:	e011      	b.n	8006896 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800687e:	461a      	mov	r2, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f947 	bl	8006b14 <SCSI_ProcessCmd>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	da03      	bge.n	8006894 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800688c:	2101      	movs	r1, #1
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f8be 	bl	8006a10 <MSC_BOT_SendCSW>
      break;
 8006894:	bf00      	nop
  }
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ae:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068c8:	2101      	movs	r1, #1
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f005 f90a 	bl	800bae4 <USBD_LL_GetRxDataSize>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b1f      	cmp	r3, #31
 80068d4:	d114      	bne.n	8006900 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068dc:	4a32      	ldr	r2, [pc, #200]	@ (80069a8 <MSC_BOT_CBW_Decode+0x108>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10e      	bne.n	8006900 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d809      	bhi.n	8006900 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d90e      	bls.n	800691e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006906:	2320      	movs	r3, #32
 8006908:	2205      	movs	r2, #5
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fc48 	bl	80071a0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2202      	movs	r2, #2
 8006914:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8a6 	bl	8006a68 <MSC_BOT_Abort>
 800691c:	e041      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800692a:	461a      	mov	r2, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8f1 	bl	8006b14 <SCSI_ProcessCmd>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	da0c      	bge.n	8006952 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	7a1b      	ldrb	r3, [r3, #8]
 800693c:	2b05      	cmp	r3, #5
 800693e:	d104      	bne.n	800694a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f864 	bl	8006a10 <MSC_BOT_SendCSW>
 8006948:	e02b      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f88c 	bl	8006a68 <MSC_BOT_Abort>
 8006950:	e027      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	7a1b      	ldrb	r3, [r3, #8]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d022      	beq.n	80069a0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800695e:	2b01      	cmp	r3, #1
 8006960:	d01e      	beq.n	80069a0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006966:	2b03      	cmp	r3, #3
 8006968:	d01a      	beq.n	80069a0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f103 010c 	add.w	r1, r3, #12
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	895b      	ldrh	r3, [r3, #10]
 800697c:	461a      	mov	r2, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f814 	bl	80069ac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006984:	e00d      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	895b      	ldrh	r3, [r3, #10]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800698e:	2100      	movs	r1, #0
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f83d 	bl	8006a10 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006996:	e004      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f865 	bl	8006a68 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800699e:	e000      	b.n	80069a2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80069a0:	bf00      	nop
    }
  }
}
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	43425355 	.word	0x43425355

080069ac <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069c0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d204      	bcs.n	80069d8 <MSC_BOT_SendData+0x2c>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	e000      	b.n	80069da <MSC_BOT_SendData+0x2e>
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2204      	movs	r2, #4
 80069f8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80069fa:	8a7b      	ldrh	r3, [r7, #18]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	2181      	movs	r1, #129	@ 0x81
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f005 f829 	bl	800ba58 <USBD_LL_Transmit>
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a22:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a0f      	ldr	r2, [pc, #60]	@ (8006a64 <MSC_BOT_SendCSW+0x54>)
 8006a28:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 8006a40:	230d      	movs	r3, #13
 8006a42:	2181      	movs	r1, #129	@ 0x81
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f005 f807 	bl	800ba58 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8006a50:	231f      	movs	r3, #31
 8006a52:	2101      	movs	r1, #1
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f005 f822 	bl	800ba9e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	53425355 	.word	0x53425355

08006a68 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a76:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10c      	bne.n	8006a9c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006a94:	2101      	movs	r1, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f004 ff55 	bl	800b946 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006a9c:	2181      	movs	r1, #129	@ 0x81
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f004 ff51 	bl	800b946 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	7a5b      	ldrb	r3, [r3, #9]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d107      	bne.n	8006abc <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8006ab2:	231f      	movs	r3, #31
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f004 fff1 	bl	800ba9e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	7a5b      	ldrb	r3, [r3, #9]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d107      	bne.n	8006af0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ae0:	2181      	movs	r1, #129	@ 0x81
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f004 ff2f 	bl	800b946 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	725a      	strb	r2, [r3, #9]
 8006aee:	e00d      	b.n	8006b0c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da08      	bge.n	8006b0a <MSC_BOT_CplClrFeature+0x46>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	7a5b      	ldrb	r3, [r3, #9]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d004      	beq.n	8006b0a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006b00:	2101      	movs	r1, #1
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff84 	bl	8006a10 <MSC_BOT_SendCSW>
 8006b08:	e000      	b.n	8006b0c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006b0a:	bf00      	nop
  }
}
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b5a      	cmp	r3, #90	@ 0x5a
 8006b28:	f200 810e 	bhi.w	8006d48 <SCSI_ProcessCmd+0x234>
 8006b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <SCSI_ProcessCmd+0x20>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006ca1 	.word	0x08006ca1
 8006b38:	08006d49 	.word	0x08006d49
 8006b3c:	08006d49 	.word	0x08006d49
 8006b40:	08006caf 	.word	0x08006caf
 8006b44:	08006d49 	.word	0x08006d49
 8006b48:	08006d49 	.word	0x08006d49
 8006b4c:	08006d49 	.word	0x08006d49
 8006b50:	08006d49 	.word	0x08006d49
 8006b54:	08006d49 	.word	0x08006d49
 8006b58:	08006d49 	.word	0x08006d49
 8006b5c:	08006d49 	.word	0x08006d49
 8006b60:	08006d49 	.word	0x08006d49
 8006b64:	08006d49 	.word	0x08006d49
 8006b68:	08006d49 	.word	0x08006d49
 8006b6c:	08006d49 	.word	0x08006d49
 8006b70:	08006d49 	.word	0x08006d49
 8006b74:	08006d49 	.word	0x08006d49
 8006b78:	08006d49 	.word	0x08006d49
 8006b7c:	08006cbd 	.word	0x08006cbd
 8006b80:	08006d49 	.word	0x08006d49
 8006b84:	08006d49 	.word	0x08006d49
 8006b88:	08006d49 	.word	0x08006d49
 8006b8c:	08006d49 	.word	0x08006d49
 8006b90:	08006d49 	.word	0x08006d49
 8006b94:	08006d49 	.word	0x08006d49
 8006b98:	08006d49 	.word	0x08006d49
 8006b9c:	08006ce7 	.word	0x08006ce7
 8006ba0:	08006ccb 	.word	0x08006ccb
 8006ba4:	08006d49 	.word	0x08006d49
 8006ba8:	08006d49 	.word	0x08006d49
 8006bac:	08006cd9 	.word	0x08006cd9
 8006bb0:	08006d49 	.word	0x08006d49
 8006bb4:	08006d49 	.word	0x08006d49
 8006bb8:	08006d49 	.word	0x08006d49
 8006bbc:	08006d49 	.word	0x08006d49
 8006bc0:	08006d03 	.word	0x08006d03
 8006bc4:	08006d49 	.word	0x08006d49
 8006bc8:	08006d11 	.word	0x08006d11
 8006bcc:	08006d49 	.word	0x08006d49
 8006bd0:	08006d49 	.word	0x08006d49
 8006bd4:	08006d1f 	.word	0x08006d1f
 8006bd8:	08006d49 	.word	0x08006d49
 8006bdc:	08006d2d 	.word	0x08006d2d
 8006be0:	08006d49 	.word	0x08006d49
 8006be4:	08006d49 	.word	0x08006d49
 8006be8:	08006d49 	.word	0x08006d49
 8006bec:	08006d49 	.word	0x08006d49
 8006bf0:	08006d3b 	.word	0x08006d3b
 8006bf4:	08006d49 	.word	0x08006d49
 8006bf8:	08006d49 	.word	0x08006d49
 8006bfc:	08006d49 	.word	0x08006d49
 8006c00:	08006d49 	.word	0x08006d49
 8006c04:	08006d49 	.word	0x08006d49
 8006c08:	08006d49 	.word	0x08006d49
 8006c0c:	08006d49 	.word	0x08006d49
 8006c10:	08006d49 	.word	0x08006d49
 8006c14:	08006d49 	.word	0x08006d49
 8006c18:	08006d49 	.word	0x08006d49
 8006c1c:	08006d49 	.word	0x08006d49
 8006c20:	08006d49 	.word	0x08006d49
 8006c24:	08006d49 	.word	0x08006d49
 8006c28:	08006d49 	.word	0x08006d49
 8006c2c:	08006d49 	.word	0x08006d49
 8006c30:	08006d49 	.word	0x08006d49
 8006c34:	08006d49 	.word	0x08006d49
 8006c38:	08006d49 	.word	0x08006d49
 8006c3c:	08006d49 	.word	0x08006d49
 8006c40:	08006d49 	.word	0x08006d49
 8006c44:	08006d49 	.word	0x08006d49
 8006c48:	08006d49 	.word	0x08006d49
 8006c4c:	08006d49 	.word	0x08006d49
 8006c50:	08006d49 	.word	0x08006d49
 8006c54:	08006d49 	.word	0x08006d49
 8006c58:	08006d49 	.word	0x08006d49
 8006c5c:	08006d49 	.word	0x08006d49
 8006c60:	08006d49 	.word	0x08006d49
 8006c64:	08006d49 	.word	0x08006d49
 8006c68:	08006d49 	.word	0x08006d49
 8006c6c:	08006d49 	.word	0x08006d49
 8006c70:	08006d49 	.word	0x08006d49
 8006c74:	08006d49 	.word	0x08006d49
 8006c78:	08006d49 	.word	0x08006d49
 8006c7c:	08006d49 	.word	0x08006d49
 8006c80:	08006d49 	.word	0x08006d49
 8006c84:	08006d49 	.word	0x08006d49
 8006c88:	08006d49 	.word	0x08006d49
 8006c8c:	08006d49 	.word	0x08006d49
 8006c90:	08006d49 	.word	0x08006d49
 8006c94:	08006d49 	.word	0x08006d49
 8006c98:	08006d49 	.word	0x08006d49
 8006c9c:	08006cf5 	.word	0x08006cf5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f85c 	bl	8006d64 <SCSI_TestUnitReady>
      break;
 8006cac:	e055      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fa09 	bl	80070cc <SCSI_RequestSense>
      break;
 8006cba:	e04e      	b.n	8006d5a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f888 	bl	8006dd8 <SCSI_Inquiry>
      break;
 8006cc8:	e047      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fa9e 	bl	8007212 <SCSI_StartStopUnit>
      break;
 8006cd6:	e040      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fa97 	bl	8007212 <SCSI_StartStopUnit>
      break;
 8006ce4:	e039      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4619      	mov	r1, r3
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f99d 	bl	800702c <SCSI_ModeSense6>
      break;
 8006cf2:	e032      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f9be 	bl	800707c <SCSI_ModeSense10>
      break;
 8006d00:	e02b      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	4619      	mov	r1, r3
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f92a 	bl	8006f62 <SCSI_ReadFormatCapacity>
      break;
 8006d0e:	e024      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4619      	mov	r1, r3
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f8bc 	bl	8006e94 <SCSI_ReadCapacity10>
      break;
 8006d1c:	e01d      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fa88 	bl	800723a <SCSI_Read10>
      break;
 8006d2a:	e016      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4619      	mov	r1, r3
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fb0d 	bl	8007352 <SCSI_Write10>
      break;
 8006d38:	e00f      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fbb6 	bl	80074b2 <SCSI_Verify10>
      break;
 8006d46:	e008      	b.n	8006d5a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d48:	7af9      	ldrb	r1, [r7, #11]
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fa26 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d58:	e000      	b.n	8006d5c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d78:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006d8a:	2320      	movs	r3, #32
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fa06 	bl	80071a0 <SCSI_SenseCode>

    return -1;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d98:	e019      	b.n	8006dce <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	7afa      	ldrb	r2, [r7, #11]
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006dae:	7af9      	ldrb	r1, [r7, #11]
 8006db0:	233a      	movs	r3, #58	@ 0x3a
 8006db2:	2202      	movs	r2, #2
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f9f3 	bl	80071a0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	721a      	strb	r2, [r3, #8]

    return -1;
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dc4:	e003      	b.n	8006dce <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	815a      	strh	r2, [r3, #10]

  return 0;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b089      	sub	sp, #36	@ 0x24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	460b      	mov	r3, r1
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dec:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3301      	adds	r3, #1
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d014      	beq.n	8006e26 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006dfc:	2307      	movs	r3, #7
 8006dfe:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	8bfa      	ldrh	r2, [r7, #30]
 8006e04:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e06:	e00a      	b.n	8006e1e <SCSI_Inquiry+0x46>
    {
      len--;
 8006e08:	8bfb      	ldrh	r3, [r7, #30]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006e0e:	8bfa      	ldrh	r2, [r7, #30]
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	491f      	ldr	r1, [pc, #124]	@ (8006e90 <SCSI_Inquiry+0xb8>)
 8006e14:	5c89      	ldrb	r1, [r1, r2]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4413      	add	r3, r2
 8006e1a:	460a      	mov	r2, r1
 8006e1c:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e1e:	8bfb      	ldrh	r3, [r7, #30]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f1      	bne.n	8006e08 <SCSI_Inquiry+0x30>
 8006e24:	e02d      	b.n	8006e82 <SCSI_Inquiry+0xaa>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e2c:	69d9      	ldr	r1, [r3, #28]
 8006e2e:	7afa      	ldrb	r2, [r7, #11]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	3305      	adds	r3, #5
 8006e44:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	8bfb      	ldrh	r3, [r7, #30]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d303      	bcc.n	8006e5c <SCSI_Inquiry+0x84>
    {
      len = params[4];
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	8bfa      	ldrh	r2, [r7, #30]
 8006e60:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e62:	e00b      	b.n	8006e7c <SCSI_Inquiry+0xa4>
    {
      len--;
 8006e64:	8bfb      	ldrh	r3, [r7, #30]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006e6a:	8bfb      	ldrh	r3, [r7, #30]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	441a      	add	r2, r3
 8006e70:	8bfb      	ldrh	r3, [r7, #30]
 8006e72:	7811      	ldrb	r1, [r2, #0]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4413      	add	r3, r2
 8006e78:	460a      	mov	r2, r1
 8006e7a:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e7c:	8bfb      	ldrh	r3, [r7, #30]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <SCSI_Inquiry+0x8c>
    }
  }

  return 0;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3724      	adds	r7, #36	@ 0x24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	0800be34 	.word	0x0800be34

08006e94 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea8:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	f502 7118 	add.w	r1, r2, #608	@ 0x260
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	f202 225e 	addw	r2, r2, #606	@ 0x25e
 8006ebe:	7af8      	ldrb	r0, [r7, #11]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ec8:	7af9      	ldrb	r1, [r7, #11]
 8006eca:	233a      	movs	r3, #58	@ 0x3a
 8006ecc:	2202      	movs	r2, #2
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f966 	bl	80071a0 <SCSI_SenseCode>
    return -1;
 8006ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ed8:	e03f      	b.n	8006f5a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	0e1b      	lsrs	r3, r3, #24
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f00:	3b01      	subs	r3, #1
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f20:	161b      	asrs	r3, r3, #24
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f2e:	141b      	asrs	r3, r3, #16
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2208      	movs	r2, #8
 8006f56:	815a      	strh	r2, [r3, #10]
    return 0;
 8006f58:	2300      	movs	r3, #0
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b088      	sub	sp, #32
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f76:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	83fb      	strh	r3, [r7, #30]
 8006f7c:	e007      	b.n	8006f8e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8006f7e:	8bfb      	ldrh	r3, [r7, #30]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4413      	add	r3, r2
 8006f84:	2200      	movs	r2, #0
 8006f86:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8006f88:	8bfb      	ldrh	r3, [r7, #30]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	83fb      	strh	r3, [r7, #30]
 8006f8e:	8bfb      	ldrh	r3, [r7, #30]
 8006f90:	2b0b      	cmp	r3, #11
 8006f92:	d9f4      	bls.n	8006f7e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f107 0216 	add.w	r2, r7, #22
 8006fa0:	f107 0110 	add.w	r1, r7, #16
 8006fa4:	7af8      	ldrb	r0, [r7, #11]
 8006fa6:	4798      	blx	r3
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fae:	7af9      	ldrb	r1, [r7, #11]
 8006fb0:	233a      	movs	r3, #58	@ 0x3a
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f8f3 	bl	80071a0 <SCSI_SenseCode>
    return -1;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fbe:	e030      	b.n	8007022 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	0e1b      	lsrs	r3, r3, #24
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006ffc:	8afb      	ldrh	r3, [r7, #22]
 8006ffe:	141b      	asrs	r3, r3, #16
 8007000:	b2da      	uxtb	r2, r3
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	b29b      	uxth	r3, r3
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007012:	8afb      	ldrh	r3, [r7, #22]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	220c      	movs	r2, #12
 800701e:	815a      	strh	r2, [r3, #10]
    return 0;
 8007020:	2300      	movs	r3, #0
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	460b      	mov	r3, r1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007040:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007042:	2308      	movs	r3, #8
 8007044:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	8afa      	ldrh	r2, [r7, #22]
 800704a:	815a      	strh	r2, [r3, #10]

  while (len)
 800704c:	e00a      	b.n	8007064 <SCSI_ModeSense6+0x38>
  {
    len--;
 800704e:	8afb      	ldrh	r3, [r7, #22]
 8007050:	3b01      	subs	r3, #1
 8007052:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007054:	8afa      	ldrh	r2, [r7, #22]
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	4907      	ldr	r1, [pc, #28]	@ (8007078 <SCSI_ModeSense6+0x4c>)
 800705a:	5c89      	ldrb	r1, [r1, r2]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	460a      	mov	r2, r1
 8007062:	731a      	strb	r2, [r3, #12]
  while (len)
 8007064:	8afb      	ldrh	r3, [r7, #22]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f1      	bne.n	800704e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	0800be3c 	.word	0x0800be3c

0800707c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	460b      	mov	r3, r1
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800708a:	2308      	movs	r3, #8
 800708c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007094:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	8afa      	ldrh	r2, [r7, #22]
 800709a:	815a      	strh	r2, [r3, #10]

  while (len)
 800709c:	e00a      	b.n	80070b4 <SCSI_ModeSense10+0x38>
  {
    len--;
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80070a4:	8afa      	ldrh	r2, [r7, #22]
 80070a6:	8afb      	ldrh	r3, [r7, #22]
 80070a8:	4907      	ldr	r1, [pc, #28]	@ (80070c8 <SCSI_ModeSense10+0x4c>)
 80070aa:	5c89      	ldrb	r1, [r1, r2]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	460a      	mov	r2, r1
 80070b2:	731a      	strb	r2, [r3, #12]
  while (len)
 80070b4:	8afb      	ldrh	r3, [r7, #22]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f1      	bne.n	800709e <SCSI_ModeSense10+0x22>
  }

  return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	0800be44 	.word	0x0800be44

080070cc <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
 80070e6:	e007      	b.n	80070f8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4413      	add	r3, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	3301      	adds	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b11      	cmp	r3, #17
 80070fc:	d9f4      	bls.n	80070e8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2270      	movs	r2, #112	@ 0x70
 8007102:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	220c      	movs	r2, #12
 8007108:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f893 225c 	ldrb.w	r2, [r3, #604]	@ 0x25c
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8007116:	429a      	cmp	r2, r3
 8007118:	d02e      	beq.n	8007178 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	3347      	adds	r3, #71	@ 0x47
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	791a      	ldrb	r2, [r3, #4]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	3347      	adds	r3, #71	@ 0x47
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	4413      	add	r3, r2
 800713c:	7a5a      	ldrb	r2, [r3, #9]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	3347      	adds	r3, #71	@ 0x47
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	7a1a      	ldrb	r2, [r3, #8]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800715c:	3301      	adds	r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800716c:	2b04      	cmp	r3, #4
 800716e:	d103      	bne.n	8007178 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2212      	movs	r2, #18
 800717c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b12      	cmp	r3, #18
 8007186:	d805      	bhi.n	8007194 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	70fb      	strb	r3, [r7, #3]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70bb      	strb	r3, [r7, #2]
 80071b6:	4613      	mov	r3, r2
 80071b8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071c0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	3347      	adds	r3, #71	@ 0x47
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	78ba      	ldrb	r2, [r7, #2]
 80071d2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	3347      	adds	r3, #71	@ 0x47
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4413      	add	r3, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071ec:	3301      	adds	r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d103      	bne.n	8007208 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  }
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	460b      	mov	r3, r1
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007226:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	815a      	strh	r2, [r3, #10]
  return 0;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	460b      	mov	r3, r1
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800724e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	7a1b      	ldrb	r3, [r3, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d16e      	bne.n	8007336 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 800725e:	b25b      	sxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	db0a      	blt.n	800727a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800726a:	2320      	movs	r3, #32
 800726c:	2205      	movs	r2, #5
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff96 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007278:	e067      	b.n	800734a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	7afa      	ldrb	r2, [r7, #11]
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800728e:	7af9      	ldrb	r1, [r7, #11]
 8007290:	233a      	movs	r3, #58	@ 0x3a
 8007292:	2202      	movs	r2, #2
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff ff83 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 800729a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800729e:	e054      	b.n	800734a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3302      	adds	r3, #2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3303      	adds	r3, #3
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072ba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	3205      	adds	r2, #5
 80072c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80072c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3307      	adds	r3, #7
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	3208      	adds	r2, #8
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	431a      	orrs	r2, r3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80072ec:	7af9      	ldrb	r1, [r7, #11]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f912 	bl	8007518 <SCSI_CheckAddressRange>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da02      	bge.n	8007300 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072fe:	e024      	b.n	800734a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2202      	movs	r2, #2
 8007304:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007312:	6979      	ldr	r1, [r7, #20]
 8007314:	f8b1 125e 	ldrh.w	r1, [r1, #606]	@ 0x25e
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	429a      	cmp	r2, r3
 800731e:	d00a      	beq.n	8007336 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8007326:	2320      	movs	r3, #32
 8007328:	2205      	movs	r2, #5
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff ff38 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 8007330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007334:	e009      	b.n	800734a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800733c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	4619      	mov	r1, r3
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f90a 	bl	800755c <SCSI_ProcessRead>
 8007348:	4603      	mov	r3, r0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	460b      	mov	r3, r1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	7a1b      	ldrb	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8096 	bne.w	800749e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8007378:	b25b      	sxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	da0a      	bge.n	8007394 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8007384:	2320      	movs	r3, #32
 8007386:	2205      	movs	r2, #5
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ff09 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 800738e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007392:	e08a      	b.n	80074aa <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	7afa      	ldrb	r2, [r7, #11]
 800739e:	4610      	mov	r0, r2
 80073a0:	4798      	blx	r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073a8:	7af9      	ldrb	r1, [r7, #11]
 80073aa:	233a      	movs	r3, #58	@ 0x3a
 80073ac:	2202      	movs	r2, #2
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fef6 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073b8:	e077      	b.n	80074aa <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	7afa      	ldrb	r2, [r7, #11]
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80073ce:	7af9      	ldrb	r1, [r7, #11]
 80073d0:	2327      	movs	r3, #39	@ 0x27
 80073d2:	2202      	movs	r2, #2
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff fee3 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073de:	e064      	b.n	80074aa <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3302      	adds	r3, #2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80073fa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	3205      	adds	r2, #5
 8007400:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007402:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3307      	adds	r3, #7
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	3208      	adds	r2, #8
 8007416:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007418:	431a      	orrs	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800742c:	7af9      	ldrb	r1, [r7, #11]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f872 	bl	8007518 <SCSI_CheckAddressRange>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	da02      	bge.n	8007440 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800743a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800743e:	e034      	b.n	80074aa <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d00a      	beq.n	8007474 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8007464:	2320      	movs	r3, #32
 8007466:	2205      	movs	r2, #5
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fe99 	bl	80071a0 <SCSI_SenseCode>
      return -1;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007472:	e01a      	b.n	80074aa <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747a:	bf28      	it	cs
 800747c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007480:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2201      	movs	r2, #1
 8007486:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f103 020c 	add.w	r2, r3, #12
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	b29b      	uxth	r3, r3
 8007492:	2101      	movs	r1, #1
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f004 fb02 	bl	800ba9e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800749a:	2300      	movs	r3, #0
 800749c:	e005      	b.n	80074aa <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	4619      	mov	r1, r3
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f8ce 	bl	8007644 <SCSI_ProcessWrite>
 80074a8:	4603      	mov	r3, r0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b086      	sub	sp, #24
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	460b      	mov	r3, r1
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80074d6:	7af9      	ldrb	r1, [r7, #11]
 80074d8:	2324      	movs	r3, #36	@ 0x24
 80074da:	2205      	movs	r2, #5
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fe5f 	bl	80071a0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074e6:	e013      	b.n	8007510 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80074f4:	7af9      	ldrb	r1, [r7, #11]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f80e 	bl	8007518 <SCSI_CheckAddressRange>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da02      	bge.n	8007508 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007506:	e003      	b.n	8007510 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2200      	movs	r2, #0
 800750c:	815a      	strh	r2, [r3, #10]
  return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	460b      	mov	r3, r1
 8007526:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	441a      	add	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 800753c:	429a      	cmp	r2, r3
 800753e:	d908      	bls.n	8007552 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007540:	7af9      	ldrb	r1, [r7, #11]
 8007542:	2321      	movs	r3, #33	@ 0x21
 8007544:	2205      	movs	r2, #5
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fe2a 	bl	80071a0 <SCSI_SenseCode>
    return -1;
 800754c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007550:	e000      	b.n	8007554 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007588:	bf28      	it	cs
 800758a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800758e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007596:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80075aa:	4618      	mov	r0, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	78f8      	ldrb	r0, [r7, #3]
 80075b6:	47a0      	blx	r4
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da08      	bge.n	80075d0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80075be:	78f9      	ldrb	r1, [r7, #3]
 80075c0:	2311      	movs	r3, #17
 80075c2:	2204      	movs	r2, #4
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fdeb 	bl	80071a0 <SCSI_SenseCode>
    return -1;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ce:	e035      	b.n	800763c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f103 020c 	add.w	r2, r3, #12
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2181      	movs	r1, #129	@ 0x81
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f004 fa3b 	bl	800ba58 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80075ee:	4619      	mov	r1, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075f6:	441a      	add	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800760a:	4619      	mov	r1, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2203      	movs	r2, #3
 8007638:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007670:	bf28      	it	cs
 8007672:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007676:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800767e:	695c      	ldr	r4, [r3, #20]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f103 010c 	add.w	r1, r3, #12
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8007692:	4618      	mov	r0, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800769a:	b29b      	uxth	r3, r3
 800769c:	78f8      	ldrb	r0, [r7, #3]
 800769e:	47a0      	blx	r4
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da08      	bge.n	80076b8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80076a6:	78f9      	ldrb	r1, [r7, #3]
 80076a8:	2303      	movs	r3, #3
 80076aa:	2204      	movs	r2, #4
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fd77 	bl	80071a0 <SCSI_SenseCode>

    return -1;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076b6:	e045      	b.n	8007744 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80076c4:	4619      	mov	r1, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80076e0:	4619      	mov	r1, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800770a:	2100      	movs	r1, #0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff f97f 	bl	8006a10 <MSC_BOT_SendCSW>
 8007712:	e016      	b.n	8007742 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007728:	bf28      	it	cs
 800772a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800772e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f103 020c 	add.w	r2, r3, #12
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	b29b      	uxth	r3, r3
 800773a:	2101      	movs	r1, #1
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f004 f9ae 	bl	800ba9e <USBD_LL_PrepareReceive>
  }

  return 0;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bd90      	pop	{r4, r7, pc}

0800774c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	e01a      	b.n	800779a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	79fa      	ldrb	r2, [r7, #7]
 8007790:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f004 f808 	bl	800b7a8 <USBD_LL_Init>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d006      	beq.n	80077c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
 80077c2:	e001      	b.n	80077c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80077c4:	2302      	movs	r3, #2
 80077c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f004 f833 	bl	800b848 <USBD_LL_Start>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr

08007800 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00c      	beq.n	8007834 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fed7 	bl	800862a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	2b02      	cmp	r3, #2
 800789e:	d016      	beq.n	80078ce <USBD_LL_SetupStage+0x6a>
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d81c      	bhi.n	80078de <USBD_LL_SetupStage+0x7a>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <USBD_LL_SetupStage+0x4a>
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d008      	beq.n	80078be <USBD_LL_SetupStage+0x5a>
 80078ac:	e017      	b.n	80078de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9ca 	bl	8007c50 <USBD_StdDevReq>
      break;
 80078bc:	e01a      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa2c 	bl	8007d24 <USBD_StdItfReq>
      break;
 80078cc:	e012      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa6c 	bl	8007db4 <USBD_StdEPReq>
      break;
 80078dc:	e00a      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f004 f82a 	bl	800b946 <USBD_LL_StallEP>
      break;
 80078f2:	bf00      	nop
  }

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	460b      	mov	r3, r1
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d14b      	bne.n	80079aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007918:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007920:	2b03      	cmp	r3, #3
 8007922:	d134      	bne.n	800798e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	429a      	cmp	r2, r3
 800792e:	d919      	bls.n	8007964 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007946:	429a      	cmp	r2, r3
 8007948:	d203      	bcs.n	8007952 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800794e:	b29b      	uxth	r3, r3
 8007950:	e002      	b.n	8007958 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007956:	b29b      	uxth	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 ff35 	bl	80087cc <USBD_CtlContinueRx>
 8007962:	e038      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007976:	2b03      	cmp	r3, #3
 8007978:	d105      	bne.n	8007986 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 ff32 	bl	80087f0 <USBD_CtlSendStatus>
 800798c:	e023      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007994:	2b05      	cmp	r3, #5
 8007996:	d11e      	bne.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f003 ffcf 	bl	800b946 <USBD_LL_StallEP>
 80079a8:	e015      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d108      	bne.n	80079d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	4611      	mov	r1, r2
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	4798      	blx	r3
 80079d0:	e001      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e000      	b.n	80079d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	460b      	mov	r3, r1
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d17f      	bne.n	8007af4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3314      	adds	r3, #20
 80079f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d15c      	bne.n	8007abe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d915      	bls.n	8007a3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 febd 	bl	80087a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f004 f832 	bl	800ba9e <USBD_LL_PrepareReceive>
 8007a3a:	e04e      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	6912      	ldr	r2, [r2, #16]
 8007a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a48:	fb01 f202 	mul.w	r2, r1, r2
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11c      	bne.n	8007a8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d316      	bcc.n	8007a8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d20f      	bcs.n	8007a8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fe99 	bl	80087a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f004 f80a 	bl	800ba9e <USBD_LL_PrepareReceive>
 8007a8a:	e026      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d105      	bne.n	8007aae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007aae:	2180      	movs	r1, #128	@ 0x80
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f003 ff48 	bl	800b946 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fead 	bl	8008816 <USBD_CtlReceiveStatus>
 8007abc:	e00d      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d004      	beq.n	8007ad2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f003 ff36 	bl	800b946 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d11d      	bne.n	8007b20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fe81 	bl	80077ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007af2:	e015      	b.n	8007b20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00d      	beq.n	8007b1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d108      	bne.n	8007b1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	7afa      	ldrb	r2, [r7, #11]
 8007b14:	4611      	mov	r1, r2
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	4798      	blx	r3
 8007b1a:	e001      	b.n	8007b20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e000      	b.n	8007b22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b32:	2340      	movs	r3, #64	@ 0x40
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f003 fea0 	bl	800b87e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2240      	movs	r2, #64	@ 0x40
 8007b4a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b4e:	2340      	movs	r3, #64	@ 0x40
 8007b50:	2200      	movs	r2, #0
 8007b52:	2180      	movs	r1, #128	@ 0x80
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f003 fe92 	bl	800b87e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2240      	movs	r2, #64	@ 0x40
 8007b64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6852      	ldr	r2, [r2, #4]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d105      	bne.n	8007c10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d10b      	bne.n	8007c46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c66:	2b40      	cmp	r3, #64	@ 0x40
 8007c68:	d005      	beq.n	8007c76 <USBD_StdDevReq+0x26>
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	d84f      	bhi.n	8007d0e <USBD_StdDevReq+0xbe>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <USBD_StdDevReq+0x36>
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d14b      	bne.n	8007d0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      break;
 8007c84:	e048      	b.n	8007d18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d839      	bhi.n	8007d02 <USBD_StdDevReq+0xb2>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <USBD_StdDevReq+0x44>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ce5 	.word	0x08007ce5
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	08007d03 	.word	0x08007d03
 8007ca0:	08007cef 	.word	0x08007cef
 8007ca4:	08007d03 	.word	0x08007d03
 8007ca8:	08007cc7 	.word	0x08007cc7
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007d03 	.word	0x08007d03
 8007cb4:	08007cdb 	.word	0x08007cdb
 8007cb8:	08007cd1 	.word	0x08007cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9dc 	bl	800807c <USBD_GetDescriptor>
          break;
 8007cc4:	e022      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb3f 	bl	800834c <USBD_SetAddress>
          break;
 8007cce:	e01d      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb7e 	bl	80083d4 <USBD_SetConfig>
          break;
 8007cd8:	e018      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc07 	bl	80084f0 <USBD_GetConfig>
          break;
 8007ce2:	e013      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fc37 	bl	800855a <USBD_GetStatus>
          break;
 8007cec:	e00e      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc65 	bl	80085c0 <USBD_SetFeature>
          break;
 8007cf6:	e009      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fc74 	bl	80085e8 <USBD_ClrFeature>
          break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fcc9 	bl	800869c <USBD_CtlError>
          break;
 8007d0a:	bf00      	nop
      }
      break;
 8007d0c:	e004      	b.n	8007d18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fcc3 	bl	800869c <USBD_CtlError>
      break;
 8007d16:	bf00      	nop
  }

  return ret;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop

08007d24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d005      	beq.n	8007d4a <USBD_StdItfReq+0x26>
 8007d3e:	2b40      	cmp	r3, #64	@ 0x40
 8007d40:	d82e      	bhi.n	8007da0 <USBD_StdItfReq+0x7c>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <USBD_StdItfReq+0x26>
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d12a      	bne.n	8007da0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d50:	3b01      	subs	r3, #1
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d81d      	bhi.n	8007d92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	889b      	ldrh	r3, [r3, #4]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d813      	bhi.n	8007d88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	88db      	ldrh	r3, [r3, #6]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d110      	bne.n	8007d9c <USBD_StdItfReq+0x78>
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10d      	bne.n	8007d9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fd35 	bl	80087f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d86:	e009      	b.n	8007d9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc86 	bl	800869c <USBD_CtlError>
          break;
 8007d90:	e004      	b.n	8007d9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc81 	bl	800869c <USBD_CtlError>
          break;
 8007d9a:	e000      	b.n	8007d9e <USBD_StdItfReq+0x7a>
          break;
 8007d9c:	bf00      	nop
      }
      break;
 8007d9e:	e004      	b.n	8007daa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fc7a 	bl	800869c <USBD_CtlError>
      break;
 8007da8:	bf00      	nop
  }

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	889b      	ldrh	r3, [r3, #4]
 8007dc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d007      	beq.n	8007de4 <USBD_StdEPReq+0x30>
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	f200 8146 	bhi.w	8008066 <USBD_StdEPReq+0x2b2>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <USBD_StdEPReq+0x40>
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	f040 8141 	bne.w	8008066 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
      break;
 8007df2:	e13d      	b.n	8008070 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d10a      	bne.n	8007e16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	e12d      	b.n	8008072 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d007      	beq.n	8007e2e <USBD_StdEPReq+0x7a>
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	f300 811b 	bgt.w	800805a <USBD_StdEPReq+0x2a6>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d072      	beq.n	8007f0e <USBD_StdEPReq+0x15a>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d03a      	beq.n	8007ea2 <USBD_StdEPReq+0xee>
 8007e2c:	e115      	b.n	800805a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x8a>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d015      	beq.n	8007e68 <USBD_StdEPReq+0xb4>
 8007e3c:	e02b      	b.n	8007e96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <USBD_StdEPReq+0xaa>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b80      	cmp	r3, #128	@ 0x80
 8007e48:	d009      	beq.n	8007e5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f003 fd79 	bl	800b946 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e54:	2180      	movs	r1, #128	@ 0x80
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f003 fd75 	bl	800b946 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e5c:	e020      	b.n	8007ea0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc1b 	bl	800869c <USBD_CtlError>
              break;
 8007e66:	e01b      	b.n	8007ea0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <USBD_StdEPReq+0xda>
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b80      	cmp	r3, #128	@ 0x80
 8007e7a:	d008      	beq.n	8007e8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	88db      	ldrh	r3, [r3, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f003 fd5c 	bl	800b946 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fcae 	bl	80087f0 <USBD_CtlSendStatus>

              break;
 8007e94:	e004      	b.n	8007ea0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fbff 	bl	800869c <USBD_CtlError>
              break;
 8007e9e:	bf00      	nop
          }
          break;
 8007ea0:	e0e0      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d002      	beq.n	8007eb2 <USBD_StdEPReq+0xfe>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d015      	beq.n	8007edc <USBD_StdEPReq+0x128>
 8007eb0:	e026      	b.n	8007f00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <USBD_StdEPReq+0x11e>
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d009      	beq.n	8007ed2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f003 fd3f 	bl	800b946 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ec8:	2180      	movs	r1, #128	@ 0x80
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f003 fd3b 	bl	800b946 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ed0:	e01c      	b.n	8007f0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fbe1 	bl	800869c <USBD_CtlError>
              break;
 8007eda:	e017      	b.n	8007f0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	885b      	ldrh	r3, [r3, #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f003 fd46 	bl	800b984 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc79 	bl	80087f0 <USBD_CtlSendStatus>
              }
              break;
 8007efe:	e004      	b.n	8007f0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbca 	bl	800869c <USBD_CtlError>
              break;
 8007f08:	e000      	b.n	8007f0c <USBD_StdEPReq+0x158>
              break;
 8007f0a:	bf00      	nop
          }
          break;
 8007f0c:	e0aa      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d002      	beq.n	8007f1e <USBD_StdEPReq+0x16a>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d032      	beq.n	8007f82 <USBD_StdEPReq+0x1ce>
 8007f1c:	e097      	b.n	800804e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <USBD_StdEPReq+0x180>
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d004      	beq.n	8007f34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbb5 	bl	800869c <USBD_CtlError>
                break;
 8007f32:	e091      	b.n	8008058 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da0b      	bge.n	8007f54 <USBD_StdEPReq+0x1a0>
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	3304      	adds	r3, #4
 8007f52:	e00b      	b.n	8007f6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2202      	movs	r2, #2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fbf8 	bl	8008770 <USBD_CtlSendData>
              break;
 8007f80:	e06a      	b.n	8008058 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da11      	bge.n	8007fae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d117      	bne.n	8007fd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fb78 	bl	800869c <USBD_CtlError>
                  break;
 8007fac:	e054      	b.n	8008058 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb65 	bl	800869c <USBD_CtlError>
                  break;
 8007fd2:	e041      	b.n	8008058 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0b      	bge.n	8007ff4 <USBD_StdEPReq+0x240>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	3310      	adds	r3, #16
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	e00b      	b.n	800800c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <USBD_StdEPReq+0x266>
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d103      	bne.n	8008022 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e00e      	b.n	8008040 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f003 fccb 	bl	800b9c2 <USBD_LL_IsStallEP>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2201      	movs	r2, #1
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb92 	bl	8008770 <USBD_CtlSendData>
              break;
 800804c:	e004      	b.n	8008058 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb23 	bl	800869c <USBD_CtlError>
              break;
 8008056:	bf00      	nop
          }
          break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb1d 	bl	800869c <USBD_CtlError>
          break;
 8008062:	bf00      	nop
      }
      break;
 8008064:	e004      	b.n	8008070 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb17 	bl	800869c <USBD_CtlError>
      break;
 800806e:	bf00      	nop
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	885b      	ldrh	r3, [r3, #2]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	2b06      	cmp	r3, #6
 800809e:	f200 8128 	bhi.w	80082f2 <USBD_GetDescriptor+0x276>
 80080a2:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <USBD_GetDescriptor+0x2c>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	080082f3 	.word	0x080082f3
 80080b8:	080082f3 	.word	0x080082f3
 80080bc:	08008293 	.word	0x08008293
 80080c0:	080082bf 	.word	0x080082bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7c12      	ldrb	r2, [r2, #16]
 80080d0:	f107 0108 	add.w	r1, r7, #8
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	60f8      	str	r0, [r7, #12]
      break;
 80080da:	e112      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	f107 0208 	add.w	r2, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	2202      	movs	r2, #2
 80080fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080fe:	e100      	b.n	8008302 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	2202      	movs	r2, #2
 8008118:	701a      	strb	r2, [r3, #0]
      break;
 800811a:	e0f2      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b05      	cmp	r3, #5
 8008124:	f200 80ac 	bhi.w	8008280 <USBD_GetDescriptor+0x204>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <USBD_GetDescriptor+0xb4>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	0800817d 	.word	0x0800817d
 8008138:	080081b1 	.word	0x080081b1
 800813c:	080081e5 	.word	0x080081e5
 8008140:	08008219 	.word	0x08008219
 8008144:	0800824d 	.word	0x0800824d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e091      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa94 	bl	800869c <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e089      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e077      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa7a 	bl	800869c <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e06f      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d2:	e05d      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa60 	bl	800869c <USBD_CtlError>
            err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
          break;
 80081e2:	e055      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008206:	e043      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa46 	bl	800869c <USBD_CtlError>
            err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
          break;
 8008216:	e03b      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e029      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa2c 	bl	800869c <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e021      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e00f      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa12 	bl	800869c <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e007      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa0a 	bl	800869c <USBD_CtlError>
          err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800828e:	e038      	b.n	8008302 <USBD_GetDescriptor+0x286>
 8008290:	e037      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	4610      	mov	r0, r2
 80082a8:	4798      	blx	r3
 80082aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ac:	e029      	b.n	8008302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9f3 	bl	800869c <USBD_CtlError>
        err++;
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	3301      	adds	r3, #1
 80082ba:	72fb      	strb	r3, [r7, #11]
      break;
 80082bc:	e021      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7c1b      	ldrb	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10d      	bne.n	80082e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	f107 0208 	add.w	r2, r7, #8
 80082d2:	4610      	mov	r0, r2
 80082d4:	4798      	blx	r3
 80082d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	2207      	movs	r2, #7
 80082de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e0:	e00f      	b.n	8008302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9d9 	bl	800869c <USBD_CtlError>
        err++;
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	3301      	adds	r3, #1
 80082ee:	72fb      	strb	r3, [r7, #11]
      break;
 80082f0:	e007      	b.n	8008302 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9d1 	bl	800869c <USBD_CtlError>
      err++;
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	3301      	adds	r3, #1
 80082fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008300:	bf00      	nop
  }

  if (err != 0U)
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d11c      	bne.n	8008342 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008308:	893b      	ldrh	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d011      	beq.n	8008332 <USBD_GetDescriptor+0x2b6>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88da      	ldrh	r2, [r3, #6]
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	4293      	cmp	r3, r2
 800831e:	bf28      	it	cs
 8008320:	4613      	movcs	r3, r2
 8008322:	b29b      	uxth	r3, r3
 8008324:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	461a      	mov	r2, r3
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa1f 	bl	8008770 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa58 	bl	80087f0 <USBD_CtlSendStatus>
 8008340:	e000      	b.n	8008344 <USBD_GetDescriptor+0x2c8>
    return;
 8008342:	bf00      	nop
    }
  }
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d130      	bne.n	80083c0 <USBD_SetAddress+0x74>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12c      	bne.n	80083c0 <USBD_SetAddress+0x74>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b7f      	cmp	r3, #127	@ 0x7f
 800836c:	d828      	bhi.n	80083c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008380:	2b03      	cmp	r3, #3
 8008382:	d104      	bne.n	800838e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f988 	bl	800869c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838c:	e01d      	b.n	80083ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f003 fb3d 	bl	800ba1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa25 	bl	80087f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	e009      	b.n	80083ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083be:	e004      	b.n	80083ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f96a 	bl	800869c <USBD_CtlError>
  }
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	4b41      	ldr	r3, [pc, #260]	@ (80084ec <USBD_SetConfig+0x118>)
 80083e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083e8:	4b40      	ldr	r3, [pc, #256]	@ (80084ec <USBD_SetConfig+0x118>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d904      	bls.n	80083fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f952 	bl	800869c <USBD_CtlError>
 80083f8:	e075      	b.n	80084e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008400:	2b02      	cmp	r3, #2
 8008402:	d002      	beq.n	800840a <USBD_SetConfig+0x36>
 8008404:	2b03      	cmp	r3, #3
 8008406:	d023      	beq.n	8008450 <USBD_SetConfig+0x7c>
 8008408:	e062      	b.n	80084d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800840a:	4b38      	ldr	r3, [pc, #224]	@ (80084ec <USBD_SetConfig+0x118>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01a      	beq.n	8008448 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008412:	4b36      	ldr	r3, [pc, #216]	@ (80084ec <USBD_SetConfig+0x118>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2203      	movs	r2, #3
 8008420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008424:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <USBD_SetConfig+0x118>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff f9e8 	bl	8007800 <USBD_SetClassConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	2b02      	cmp	r3, #2
 8008434:	d104      	bne.n	8008440 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f92f 	bl	800869c <USBD_CtlError>
            return;
 800843e:	e052      	b.n	80084e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f9d5 	bl	80087f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008446:	e04e      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f9d1 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 800844e:	e04a      	b.n	80084e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008450:	4b26      	ldr	r3, [pc, #152]	@ (80084ec <USBD_SetConfig+0x118>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d112      	bne.n	800847e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008460:	4b22      	ldr	r3, [pc, #136]	@ (80084ec <USBD_SetConfig+0x118>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800846a:	4b20      	ldr	r3, [pc, #128]	@ (80084ec <USBD_SetConfig+0x118>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff f9e4 	bl	800783e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9ba 	bl	80087f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800847c:	e033      	b.n	80084e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800847e:	4b1b      	ldr	r3, [pc, #108]	@ (80084ec <USBD_SetConfig+0x118>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d01d      	beq.n	80084c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff f9d2 	bl	800783e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800849a:	4b14      	ldr	r3, [pc, #80]	@ (80084ec <USBD_SetConfig+0x118>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084a4:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <USBD_SetConfig+0x118>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff f9a8 	bl	8007800 <USBD_SetClassConfig>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d104      	bne.n	80084c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8ef 	bl	800869c <USBD_CtlError>
            return;
 80084be:	e012      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f995 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 80084c6:	e00e      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f991 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 80084ce:	e00a      	b.n	80084e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f8e2 	bl	800869c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <USBD_SetConfig+0x118>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f9ad 	bl	800783e <USBD_ClrClassConfig>
        break;
 80084e4:	bf00      	nop
    }
  }
}
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	200002d0 	.word	0x200002d0

080084f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d004      	beq.n	800850c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8c9 	bl	800869c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800850a:	e022      	b.n	8008552 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008512:	2b02      	cmp	r3, #2
 8008514:	dc02      	bgt.n	800851c <USBD_GetConfig+0x2c>
 8008516:	2b00      	cmp	r3, #0
 8008518:	dc03      	bgt.n	8008522 <USBD_GetConfig+0x32>
 800851a:	e015      	b.n	8008548 <USBD_GetConfig+0x58>
 800851c:	2b03      	cmp	r3, #3
 800851e:	d00b      	beq.n	8008538 <USBD_GetConfig+0x48>
 8008520:	e012      	b.n	8008548 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3308      	adds	r3, #8
 800852c:	2201      	movs	r2, #1
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f91d 	bl	8008770 <USBD_CtlSendData>
        break;
 8008536:	e00c      	b.n	8008552 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	2201      	movs	r2, #1
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f915 	bl	8008770 <USBD_CtlSendData>
        break;
 8008546:	e004      	b.n	8008552 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8a6 	bl	800869c <USBD_CtlError>
        break;
 8008550:	bf00      	nop
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856a:	3b01      	subs	r3, #1
 800856c:	2b02      	cmp	r3, #2
 800856e:	d81e      	bhi.n	80085ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	88db      	ldrh	r3, [r3, #6]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d004      	beq.n	8008582 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f88e 	bl	800869c <USBD_CtlError>
        break;
 8008580:	e01a      	b.n	80085b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	330c      	adds	r3, #12
 80085a2:	2202      	movs	r2, #2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8e2 	bl	8008770 <USBD_CtlSendData>
      break;
 80085ac:	e004      	b.n	80085b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f873 	bl	800869c <USBD_CtlError>
      break;
 80085b6:	bf00      	nop
  }
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d106      	bne.n	80085e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f908 	bl	80087f0 <USBD_CtlSendStatus>
  }
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d80b      	bhi.n	8008616 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	885b      	ldrh	r3, [r3, #2]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10c      	bne.n	8008620 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8ee 	bl	80087f0 <USBD_CtlSendStatus>
      }
      break;
 8008614:	e004      	b.n	8008620 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f83f 	bl	800869c <USBD_CtlError>
      break;
 800861e:	e000      	b.n	8008622 <USBD_ClrFeature+0x3a>
      break;
 8008620:	bf00      	nop
  }
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785a      	ldrb	r2, [r3, #1]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3302      	adds	r3, #2
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	3303      	adds	r3, #3
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b29b      	uxth	r3, r3
 8008656:	4413      	add	r3, r2
 8008658:	b29a      	uxth	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3305      	adds	r3, #5
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	b29b      	uxth	r3, r3
 8008670:	4413      	add	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3306      	adds	r3, #6
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3307      	adds	r3, #7
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	b29b      	uxth	r3, r3
 800868a:	4413      	add	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	80da      	strh	r2, [r3, #6]

}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086a6:	2180      	movs	r1, #128	@ 0x80
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f003 f94c 	bl	800b946 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f003 f948 	bl	800b946 <USBD_LL_StallEP>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d032      	beq.n	800873a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f834 	bl	8008742 <USBD_GetLen>
 80086da:	4603      	mov	r3, r0
 80086dc:	3301      	adds	r3, #1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	75fa      	strb	r2, [r7, #23]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4413      	add	r3, r2
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	75fa      	strb	r2, [r7, #23]
 8008700:	461a      	mov	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	2203      	movs	r2, #3
 8008708:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800870a:	e012      	b.n	8008732 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	60fa      	str	r2, [r7, #12]
 8008712:	7dfa      	ldrb	r2, [r7, #23]
 8008714:	1c51      	adds	r1, r2, #1
 8008716:	75f9      	strb	r1, [r7, #23]
 8008718:	4611      	mov	r1, r2
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	440a      	add	r2, r1
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	75fa      	strb	r2, [r7, #23]
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e8      	bne.n	800870c <USBD_GetString+0x4e>
    }
  }
}
 800873a:	bf00      	nop
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800874e:	e005      	b.n	800875c <USBD_GetLen+0x1a>
  {
    len++;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	3301      	adds	r3, #1
 8008754:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3301      	adds	r3, #1
 800875a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f5      	bne.n	8008750 <USBD_GetLen+0xe>
  }

  return len;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr

08008770 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008786:	88fa      	ldrh	r2, [r7, #6]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800878c:	88fa      	ldrh	r2, [r7, #6]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	2100      	movs	r1, #0
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f003 f95d 	bl	800ba58 <USBD_LL_Transmit>

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	2100      	movs	r1, #0
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f003 f94b 	bl	800ba58 <USBD_LL_Transmit>

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	2100      	movs	r1, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f003 f95c 	bl	800ba9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2204      	movs	r2, #4
 80087fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008800:	2300      	movs	r3, #0
 8008802:	2200      	movs	r2, #0
 8008804:	2100      	movs	r1, #0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f003 f926 	bl	800ba58 <USBD_LL_Transmit>

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2205      	movs	r2, #5
 8008822:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008826:	2300      	movs	r3, #0
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f003 f936 	bl	800ba9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008842:	f3ef 8305 	mrs	r3, IPSR
 8008846:	60bb      	str	r3, [r7, #8]
  return(result);
 8008848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10f      	bne.n	800886e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884e:	f3ef 8310 	mrs	r3, PRIMASK
 8008852:	607b      	str	r3, [r7, #4]
  return(result);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <osKernelInitialize+0x32>
 800885a:	4b10      	ldr	r3, [pc, #64]	@ (800889c <osKernelInitialize+0x60>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d109      	bne.n	8008876 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008862:	f3ef 8311 	mrs	r3, BASEPRI
 8008866:	603b      	str	r3, [r7, #0]
  return(result);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800886e:	f06f 0305 	mvn.w	r3, #5
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e00c      	b.n	8008890 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008876:	4b09      	ldr	r3, [pc, #36]	@ (800889c <osKernelInitialize+0x60>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800887e:	4b07      	ldr	r3, [pc, #28]	@ (800889c <osKernelInitialize+0x60>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e002      	b.n	8008890 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800888e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008890:	68fb      	ldr	r3, [r7, #12]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr
 800889c:	200002d4 	.word	0x200002d4

080088a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a6:	f3ef 8305 	mrs	r3, IPSR
 80088aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80088ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10f      	bne.n	80088d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	607b      	str	r3, [r7, #4]
  return(result);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d109      	bne.n	80088d2 <osKernelStart+0x32>
 80088be:	4b11      	ldr	r3, [pc, #68]	@ (8008904 <osKernelStart+0x64>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d109      	bne.n	80088da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088c6:	f3ef 8311 	mrs	r3, BASEPRI
 80088ca:	603b      	str	r3, [r7, #0]
  return(result);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <osKernelStart+0x3a>
    stat = osErrorISR;
 80088d2:	f06f 0305 	mvn.w	r3, #5
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e00e      	b.n	80088f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80088da:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <osKernelStart+0x64>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80088e2:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <osKernelStart+0x64>)
 80088e4:	2202      	movs	r2, #2
 80088e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80088e8:	f001 f8a8 	bl	8009a3c <vTaskStartScheduler>
      stat = osOK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e002      	b.n	80088f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80088f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088f8:	68fb      	ldr	r3, [r7, #12]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	200002d4 	.word	0x200002d4

08008908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b092      	sub	sp, #72	@ 0x48
 800890c:	af04      	add	r7, sp, #16
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008918:	f3ef 8305 	mrs	r3, IPSR
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 8094 	bne.w	8008a4e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008926:	f3ef 8310 	mrs	r3, PRIMASK
 800892a:	623b      	str	r3, [r7, #32]
  return(result);
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f040 808d 	bne.w	8008a4e <osThreadNew+0x146>
 8008934:	4b48      	ldr	r3, [pc, #288]	@ (8008a58 <osThreadNew+0x150>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d106      	bne.n	800894a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800893c:	f3ef 8311 	mrs	r3, BASEPRI
 8008940:	61fb      	str	r3, [r7, #28]
  return(result);
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 8082 	bne.w	8008a4e <osThreadNew+0x146>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d07e      	beq.n	8008a4e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008950:	2380      	movs	r3, #128	@ 0x80
 8008952:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008954:	2318      	movs	r3, #24
 8008956:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8008958:	2300      	movs	r3, #0
 800895a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800895c:	f107 031b 	add.w	r3, r7, #27
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008966:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d045      	beq.n	80089fa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <osThreadNew+0x74>
        name = attr->name;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d008      	beq.n	80089a2 <osThreadNew+0x9a>
 8008990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008992:	2b38      	cmp	r3, #56	@ 0x38
 8008994:	d805      	bhi.n	80089a2 <osThreadNew+0x9a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <osThreadNew+0x9e>
        return (NULL);
 80089a2:	2300      	movs	r3, #0
 80089a4:	e054      	b.n	8008a50 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	089b      	lsrs	r3, r3, #2
 80089b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00e      	beq.n	80089dc <osThreadNew+0xd4>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2ba7      	cmp	r3, #167	@ 0xa7
 80089c4:	d90a      	bls.n	80089dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d006      	beq.n	80089dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <osThreadNew+0xd4>
        mem = 1;
 80089d6:	2301      	movs	r3, #1
 80089d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089da:	e010      	b.n	80089fe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10c      	bne.n	80089fe <osThreadNew+0xf6>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <osThreadNew+0xf6>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <osThreadNew+0xf6>
          mem = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089f8:	e001      	b.n	80089fe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d110      	bne.n	8008a26 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fe24 	bl	8009668 <xTaskCreateStatic>
 8008a20:	4603      	mov	r3, r0
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	e013      	b.n	8008a4e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d110      	bne.n	8008a4e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fe71 	bl	8009726 <xTaskCreate>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d001      	beq.n	8008a4e <osThreadNew+0x146>
          hTask = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a4e:	697b      	ldr	r3, [r7, #20]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3738      	adds	r7, #56	@ 0x38
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	200002d4 	.word	0x200002d4

08008a5c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a64:	f3ef 8305 	mrs	r3, IPSR
 8008a68:	613b      	str	r3, [r7, #16]
  return(result);
 8008a6a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10f      	bne.n	8008a90 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a70:	f3ef 8310 	mrs	r3, PRIMASK
 8008a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <osDelay+0x34>
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <osDelay+0x58>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d109      	bne.n	8008a98 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a84:	f3ef 8311 	mrs	r3, BASEPRI
 8008a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <osDelay+0x3c>
    stat = osErrorISR;
 8008a90:	f06f 0305 	mvn.w	r3, #5
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e007      	b.n	8008aa8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 ff94 	bl	80099d0 <vTaskDelay>
    }
  }

  return (stat);
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200002d4 	.word	0x200002d4

08008ab8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a06      	ldr	r2, [pc, #24]	@ (8008ae0 <vApplicationGetIdleTaskMemory+0x28>)
 8008ac8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4a05      	ldr	r2, [pc, #20]	@ (8008ae4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ace:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2280      	movs	r2, #128	@ 0x80
 8008ad4:	601a      	str	r2, [r3, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr
 8008ae0:	200002d8 	.word	0x200002d8
 8008ae4:	20000380 	.word	0x20000380

08008ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4a07      	ldr	r2, [pc, #28]	@ (8008b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8008af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a06      	ldr	r2, [pc, #24]	@ (8008b18 <vApplicationGetTimerTaskMemory+0x30>)
 8008afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b06:	601a      	str	r2, [r3, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000580 	.word	0x20000580
 8008b18:	20000628 	.word	0x20000628

08008b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f103 0208 	add.w	r2, r3, #8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f103 0208 	add.w	r2, r3, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bce:	d103      	bne.n	8008bd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e00c      	b.n	8008bf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	e002      	b.n	8008be6 <vListInsert+0x2e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d2f6      	bcs.n	8008be0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr

08008c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6892      	ldr	r2, [r2, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6852      	ldr	r2, [r2, #4]
 8008c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d103      	bne.n	8008c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr
	...

08008c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ca8:	f002 f828 	bl	800acfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	68f9      	ldr	r1, [r7, #12]
 8008cb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	441a      	add	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	22ff      	movs	r2, #255	@ 0xff
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	22ff      	movs	r2, #255	@ 0xff
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d114      	bne.n	8008d28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01a      	beq.n	8008d3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3310      	adds	r3, #16
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 f936 	bl	8009f7c <xTaskRemoveFromEventList>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <xQueueGenericReset+0xd0>)
 8008d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	e009      	b.n	8008d3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fef5 	bl	8008b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3324      	adds	r3, #36	@ 0x24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff fef0 	bl	8008b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d3c:	f002 f80e 	bl	800ad5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d40:	2301      	movs	r3, #1
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	@ 0x38
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <xQueueGenericCreateStatic+0x56>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <xQueueGenericCreateStatic+0x5a>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueGenericCreateStatic+0x5c>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <xQueueGenericCreateStatic+0x84>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <xQueueGenericCreateStatic+0x88>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <xQueueGenericCreateStatic+0x8a>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10b      	bne.n	8008df6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	61fb      	str	r3, [r7, #28]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008df6:	2350      	movs	r3, #80	@ 0x50
 8008df8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b50      	cmp	r3, #80	@ 0x50
 8008dfe:	d00b      	beq.n	8008e18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61bb      	str	r3, [r7, #24]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e2a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f805 	bl	8008e48 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3730      	adds	r7, #48	@ 0x30
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e76:	2101      	movs	r1, #1
 8008e78:	69b8      	ldr	r0, [r7, #24]
 8008e7a:	f7ff feff 	bl	8008c7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	78fa      	ldrb	r2, [r7, #3]
 8008e82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	@ 0x38
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <xQueueGenericSend+0x34>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	e7fd      	b.n	8008ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <xQueueGenericSend+0x42>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <xQueueGenericSend+0x46>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <xQueueGenericSend+0x48>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10b      	bne.n	8008ef4 <xQueueGenericSend+0x64>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d103      	bne.n	8008f02 <xQueueGenericSend+0x72>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <xQueueGenericSend+0x76>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <xQueueGenericSend+0x78>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <xQueueGenericSend+0x94>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	623b      	str	r3, [r7, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f24:	f001 f9f4 	bl	800a310 <xTaskGetSchedulerState>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <xQueueGenericSend+0xa4>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <xQueueGenericSend+0xa8>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <xQueueGenericSend+0xaa>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <xQueueGenericSend+0xc6>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	61fb      	str	r3, [r7, #28]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f56:	f001 fed1 	bl	800acfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d302      	bcc.n	8008f6c <xQueueGenericSend+0xdc>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d129      	bne.n	8008fc0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f72:	f000 fa0d 	bl	8009390 <prvCopyDataToQueue>
 8008f76:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	3324      	adds	r3, #36	@ 0x24
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fff9 	bl	8009f7c <xTaskRemoveFromEventList>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d013      	beq.n	8008fb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f90:	4b3f      	ldr	r3, [pc, #252]	@ (8009090 <xQueueGenericSend+0x200>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	e00a      	b.n	8008fb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fa8:	4b39      	ldr	r3, [pc, #228]	@ (8009090 <xQueueGenericSend+0x200>)
 8008faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fb8:	f001 fed0 	bl	800ad5c <vPortExitCritical>
				return pdPASS;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e063      	b.n	8009088 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fc6:	f001 fec9 	bl	800ad5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e05c      	b.n	8009088 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fd4:	f107 0314 	add.w	r3, r7, #20
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f833 	bl	800a044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fe2:	f001 febb 	bl	800ad5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fe6:	f000 fd99 	bl	8009b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fea:	f001 fe87 	bl	800acfc <vPortEnterCritical>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ffa:	d103      	bne.n	8009004 <xQueueGenericSend+0x174>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800900a:	b25b      	sxtb	r3, r3
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009010:	d103      	bne.n	800901a <xQueueGenericSend+0x18a>
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800901a:	f001 fe9f 	bl	800ad5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800901e:	1d3a      	adds	r2, r7, #4
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f822 	bl	800a070 <xTaskCheckForTimeOut>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d124      	bne.n	800907c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009032:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009034:	f000 faa4 	bl	8009580 <prvIsQueueFull>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d018      	beq.n	8009070 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009040:	3310      	adds	r3, #16
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f000 ff46 	bl	8009ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800904c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800904e:	f000 fa2f 	bl	80094b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009052:	f000 fd71 	bl	8009b38 <xTaskResumeAll>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	f47f af7c 	bne.w	8008f56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800905e:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <xQueueGenericSend+0x200>)
 8009060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	e772      	b.n	8008f56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009072:	f000 fa1d 	bl	80094b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009076:	f000 fd5f 	bl	8009b38 <xTaskResumeAll>
 800907a:	e76c      	b.n	8008f56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800907c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800907e:	f000 fa17 	bl	80094b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009082:	f000 fd59 	bl	8009b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009086:	2300      	movs	r3, #0
		}
	}
}
 8009088:	4618      	mov	r0, r3
 800908a:	3738      	adds	r7, #56	@ 0x38
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08e      	sub	sp, #56	@ 0x38
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <xQueueGenericSendFromISR+0x3e>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <xQueueGenericSendFromISR+0x42>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <xQueueGenericSendFromISR+0x44>
 80090d6:	2300      	movs	r3, #0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	623b      	str	r3, [r7, #32]
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	e7fd      	b.n	80090f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <xQueueGenericSendFromISR+0x6e>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <xQueueGenericSendFromISR+0x72>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueGenericSendFromISR+0x74>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10b      	bne.n	8009124 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61fb      	str	r3, [r7, #28]
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	e7fd      	b.n	8009120 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009124:	f001 feac 	bl	800ae80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009128:	f3ef 8211 	mrs	r2, BASEPRI
 800912c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	61ba      	str	r2, [r7, #24]
 800913e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009140:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009142:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800914c:	429a      	cmp	r2, r3
 800914e:	d302      	bcc.n	8009156 <xQueueGenericSendFromISR+0xc2>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d12c      	bne.n	80091b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800915c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009166:	f000 f913 	bl	8009390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800916a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009172:	d112      	bne.n	800919a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d016      	beq.n	80091aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	3324      	adds	r3, #36	@ 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fefb 	bl	8009f7c <xTaskRemoveFromEventList>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00e      	beq.n	80091aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e007      	b.n	80091aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800919a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800919e:	3301      	adds	r3, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	b25a      	sxtb	r2, r3
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80091aa:	2301      	movs	r3, #1
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80091ae:	e001      	b.n	80091b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3738      	adds	r7, #56	@ 0x38
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	@ 0x30
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091d8:	2300      	movs	r3, #0
 80091da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <xQueueReceive+0x32>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	623b      	str	r3, [r7, #32]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <xQueueReceive+0x40>
 8009204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <xQueueReceive+0x44>
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <xQueueReceive+0x46>
 8009210:	2300      	movs	r3, #0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10b      	bne.n	800922e <xQueueReceive+0x62>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	61fb      	str	r3, [r7, #28]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800922e:	f001 f86f 	bl	800a310 <xTaskGetSchedulerState>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <xQueueReceive+0x72>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <xQueueReceive+0x76>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueReceive+0x78>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <xQueueReceive+0x94>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	61bb      	str	r3, [r7, #24]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009260:	f001 fd4c 	bl	800acfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01f      	beq.n	80092b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009274:	f000 f8f6 	bl	8009464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00f      	beq.n	80092a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928a:	3310      	adds	r3, #16
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fe75 	bl	8009f7c <xTaskRemoveFromEventList>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009298:	4b3c      	ldr	r3, [pc, #240]	@ (800938c <xQueueReceive+0x1c0>)
 800929a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092a8:	f001 fd58 	bl	800ad5c <vPortExitCritical>
				return pdPASS;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e069      	b.n	8009384 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092b6:	f001 fd51 	bl	800ad5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e062      	b.n	8009384 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092c4:	f107 0310 	add.w	r3, r7, #16
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 febb 	bl	800a044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092ce:	2301      	movs	r3, #1
 80092d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092d2:	f001 fd43 	bl	800ad5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092d6:	f000 fc21 	bl	8009b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092da:	f001 fd0f 	bl	800acfc <vPortEnterCritical>
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092ea:	d103      	bne.n	80092f4 <xQueueReceive+0x128>
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009300:	d103      	bne.n	800930a <xQueueReceive+0x13e>
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800930a:	f001 fd27 	bl	800ad5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800930e:	1d3a      	adds	r2, r7, #4
 8009310:	f107 0310 	add.w	r3, r7, #16
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f000 feaa 	bl	800a070 <xTaskCheckForTimeOut>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d123      	bne.n	800936a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009324:	f000 f916 	bl	8009554 <prvIsQueueEmpty>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d017      	beq.n	800935e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	3324      	adds	r3, #36	@ 0x24
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fdce 	bl	8009ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800933c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800933e:	f000 f8b7 	bl	80094b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009342:	f000 fbf9 	bl	8009b38 <xTaskResumeAll>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d189      	bne.n	8009260 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800934c:	4b0f      	ldr	r3, [pc, #60]	@ (800938c <xQueueReceive+0x1c0>)
 800934e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	e780      	b.n	8009260 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800935e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009360:	f000 f8a6 	bl	80094b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009364:	f000 fbe8 	bl	8009b38 <xTaskResumeAll>
 8009368:	e77a      	b.n	8009260 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800936a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800936c:	f000 f8a0 	bl	80094b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009370:	f000 fbe2 	bl	8009b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009376:	f000 f8ed 	bl	8009554 <prvIsQueueEmpty>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	f43f af6f 	beq.w	8009260 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009384:	4618      	mov	r0, r3
 8009386:	3730      	adds	r7, #48	@ 0x30
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10d      	bne.n	80093ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d14d      	bne.n	8009452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 ffc6 	bl	800a34c <xTaskPriorityDisinherit>
 80093c0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	605a      	str	r2, [r3, #4]
 80093c8:	e043      	b.n	8009452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d119      	bne.n	8009404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6898      	ldr	r0, [r3, #8]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d8:	461a      	mov	r2, r3
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	f002 fc66 	bl	800bcac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e8:	441a      	add	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d32b      	bcc.n	8009452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	609a      	str	r2, [r3, #8]
 8009402:	e026      	b.n	8009452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68d8      	ldr	r0, [r3, #12]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940c:	461a      	mov	r2, r3
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	f002 fc4c 	bl	800bcac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941c:	425b      	negs	r3, r3
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d207      	bcs.n	8009440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009438:	425b      	negs	r3, r3
 800943a:	441a      	add	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d105      	bne.n	8009452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	3b01      	subs	r3, #1
 8009450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800945a:	697b      	ldr	r3, [r7, #20]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d018      	beq.n	80094a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947e:	441a      	add	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	d303      	bcc.n	8009498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68d9      	ldr	r1, [r3, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a0:	461a      	mov	r2, r3
 80094a2:	6838      	ldr	r0, [r7, #0]
 80094a4:	f002 fc02 	bl	800bcac <memcpy>
	}
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094b8:	f001 fc20 	bl	800acfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c4:	e011      	b.n	80094ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d012      	beq.n	80094f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	@ 0x24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fd52 	bl	8009f7c <xTaskRemoveFromEventList>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094de:	f000 fe2b 	bl	800a138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dce9      	bgt.n	80094c6 <prvUnlockQueue+0x16>
 80094f2:	e000      	b.n	80094f6 <prvUnlockQueue+0x46>
					break;
 80094f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	22ff      	movs	r2, #255	@ 0xff
 80094fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80094fe:	f001 fc2d 	bl	800ad5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009502:	f001 fbfb 	bl	800acfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800950c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800950e:	e011      	b.n	8009534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d012      	beq.n	800953e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3310      	adds	r3, #16
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fd2d 	bl	8009f7c <xTaskRemoveFromEventList>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009528:	f000 fe06 	bl	800a138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	3b01      	subs	r3, #1
 8009530:	b2db      	uxtb	r3, r3
 8009532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dce9      	bgt.n	8009510 <prvUnlockQueue+0x60>
 800953c:	e000      	b.n	8009540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800953e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	22ff      	movs	r2, #255	@ 0xff
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009548:	f001 fc08 	bl	800ad5c <vPortExitCritical>
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800955c:	f001 fbce 	bl	800acfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009568:	2301      	movs	r3, #1
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e001      	b.n	8009572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009572:	f001 fbf3 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 8009576:	68fb      	ldr	r3, [r7, #12]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009588:	f001 fbb8 	bl	800acfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009594:	429a      	cmp	r2, r3
 8009596:	d102      	bne.n	800959e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e001      	b.n	80095a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095a2:	f001 fbdb 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 80095a6:	68fb      	ldr	r3, [r7, #12]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e014      	b.n	80095ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095c0:	4a0e      	ldr	r2, [pc, #56]	@ (80095fc <vQueueAddToRegistry+0x4c>)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095cc:	490b      	ldr	r1, [pc, #44]	@ (80095fc <vQueueAddToRegistry+0x4c>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095d6:	4a09      	ldr	r2, [pc, #36]	@ (80095fc <vQueueAddToRegistry+0x4c>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095e2:	e006      	b.n	80095f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3301      	adds	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d9e7      	bls.n	80095c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr
 80095fc:	20000a28 	.word	0x20000a28

08009600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009610:	f001 fb74 	bl	800acfc <vPortEnterCritical>
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800961a:	b25b      	sxtb	r3, r3
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009620:	d103      	bne.n	800962a <vQueueWaitForMessageRestricted+0x2a>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009630:	b25b      	sxtb	r3, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009636:	d103      	bne.n	8009640 <vQueueWaitForMessageRestricted+0x40>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009640:	f001 fb8c 	bl	800ad5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3324      	adds	r3, #36	@ 0x24
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fc65 	bl	8009f24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f7ff ff28 	bl	80094b0 <prvUnlockQueue>
	}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08e      	sub	sp, #56	@ 0x38
 800966c:	af04      	add	r7, sp, #16
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <xTaskCreateStatic+0x2c>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	623b      	str	r3, [r7, #32]
}
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	e7fd      	b.n	8009690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	61fb      	str	r3, [r7, #28]
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	e7fd      	b.n	80096ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096b2:	23a8      	movs	r3, #168	@ 0xa8
 80096b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80096ba:	d00b      	beq.n	80096d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	61bb      	str	r3, [r7, #24]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01e      	beq.n	8009718 <xTaskCreateStatic+0xb0>
 80096da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01b      	beq.n	8009718 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	2202      	movs	r2, #2
 80096ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096f2:	2300      	movs	r3, #0
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f8:	9302      	str	r3, [sp, #8]
 80096fa:	f107 0314 	add.w	r3, r7, #20
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f850 	bl	80097b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009710:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009712:	f000 f8ed 	bl	80098f0 <prvAddNewTaskToReadyList>
 8009716:	e001      	b.n	800971c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800971c:	697b      	ldr	r3, [r7, #20]
	}
 800971e:	4618      	mov	r0, r3
 8009720:	3728      	adds	r7, #40	@ 0x28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009726:	b580      	push	{r7, lr}
 8009728:	b08c      	sub	sp, #48	@ 0x30
 800972a:	af04      	add	r7, sp, #16
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f001 fbe0 	bl	800af00 <pvPortMalloc>
 8009740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009748:	20a8      	movs	r0, #168	@ 0xa8
 800974a:	f001 fbd9 	bl	800af00 <pvPortMalloc>
 800974e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	631a      	str	r2, [r3, #48]	@ 0x30
 800975c:	e005      	b.n	800976a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800975e:	6978      	ldr	r0, [r7, #20]
 8009760:	f001 fc96 	bl	800b090 <vPortFree>
 8009764:	e001      	b.n	800976a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d017      	beq.n	80097a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	2300      	movs	r3, #0
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	9302      	str	r3, [sp, #8]
 8009782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f80e 	bl	80097b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009794:	69f8      	ldr	r0, [r7, #28]
 8009796:	f000 f8ab 	bl	80098f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800979a:	2301      	movs	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	e002      	b.n	80097a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097a6:	69bb      	ldr	r3, [r7, #24]
	}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	461a      	mov	r2, r3
 80097c8:	21a5      	movs	r1, #165	@ 0xa5
 80097ca:	f002 f9eb 	bl	800bba4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80097d8:	3b01      	subs	r3, #1
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	617b      	str	r3, [r7, #20]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	e012      	b.n	8009836 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	7819      	ldrb	r1, [r3, #0]
 8009818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	3334      	adds	r3, #52	@ 0x34
 8009820:	460a      	mov	r2, r1
 8009822:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	3301      	adds	r3, #1
 8009834:	61fb      	str	r3, [r7, #28]
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d9e9      	bls.n	8009810 <prvInitialiseNewTask+0x60>
 800983c:	e000      	b.n	8009840 <prvInitialiseNewTask+0x90>
		{
			break;
 800983e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	2b37      	cmp	r3, #55	@ 0x37
 800984c:	d901      	bls.n	8009852 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800984e:	2337      	movs	r3, #55	@ 0x37
 8009850:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009856:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800985c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	2200      	movs	r2, #0
 8009862:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff f976 	bl	8008b5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	3318      	adds	r3, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff f971 	bl	8008b5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800987c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	2200      	movs	r2, #0
 800989a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	3354      	adds	r3, #84	@ 0x54
 80098a2:	224c      	movs	r2, #76	@ 0x4c
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f002 f97c 	bl	800bba4 <memset>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	4a0d      	ldr	r2, [pc, #52]	@ (80098e4 <prvInitialiseNewTask+0x134>)
 80098b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	4a0c      	ldr	r2, [pc, #48]	@ (80098e8 <prvInitialiseNewTask+0x138>)
 80098b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	4a0c      	ldr	r2, [pc, #48]	@ (80098ec <prvInitialiseNewTask+0x13c>)
 80098bc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	68f9      	ldr	r1, [r7, #12]
 80098c2:	69b8      	ldr	r0, [r7, #24]
 80098c4:	f001 f926 	bl	800ab14 <pxPortInitialiseStack>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098da:	bf00      	nop
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	200046d8 	.word	0x200046d8
 80098e8:	20004740 	.word	0x20004740
 80098ec:	200047a8 	.word	0x200047a8

080098f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098f8:	f001 fa00 	bl	800acfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098fc:	4b2d      	ldr	r3, [pc, #180]	@ (80099b4 <prvAddNewTaskToReadyList+0xc4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	4a2c      	ldr	r2, [pc, #176]	@ (80099b4 <prvAddNewTaskToReadyList+0xc4>)
 8009904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009906:	4b2c      	ldr	r3, [pc, #176]	@ (80099b8 <prvAddNewTaskToReadyList+0xc8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d109      	bne.n	8009922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800990e:	4a2a      	ldr	r2, [pc, #168]	@ (80099b8 <prvAddNewTaskToReadyList+0xc8>)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009914:	4b27      	ldr	r3, [pc, #156]	@ (80099b4 <prvAddNewTaskToReadyList+0xc4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d110      	bne.n	800993e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800991c:	f000 fc30 	bl	800a180 <prvInitialiseTaskLists>
 8009920:	e00d      	b.n	800993e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009922:	4b26      	ldr	r3, [pc, #152]	@ (80099bc <prvAddNewTaskToReadyList+0xcc>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800992a:	4b23      	ldr	r3, [pc, #140]	@ (80099b8 <prvAddNewTaskToReadyList+0xc8>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	429a      	cmp	r2, r3
 8009936:	d802      	bhi.n	800993e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009938:	4a1f      	ldr	r2, [pc, #124]	@ (80099b8 <prvAddNewTaskToReadyList+0xc8>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800993e:	4b20      	ldr	r3, [pc, #128]	@ (80099c0 <prvAddNewTaskToReadyList+0xd0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	4a1e      	ldr	r2, [pc, #120]	@ (80099c0 <prvAddNewTaskToReadyList+0xd0>)
 8009946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009948:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <prvAddNewTaskToReadyList+0xd0>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009954:	4b1b      	ldr	r3, [pc, #108]	@ (80099c4 <prvAddNewTaskToReadyList+0xd4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d903      	bls.n	8009964 <prvAddNewTaskToReadyList+0x74>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009960:	4a18      	ldr	r2, [pc, #96]	@ (80099c4 <prvAddNewTaskToReadyList+0xd4>)
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4a15      	ldr	r2, [pc, #84]	@ (80099c8 <prvAddNewTaskToReadyList+0xd8>)
 8009972:	441a      	add	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7ff f8f9 	bl	8008b72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009980:	f001 f9ec 	bl	800ad5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009984:	4b0d      	ldr	r3, [pc, #52]	@ (80099bc <prvAddNewTaskToReadyList+0xcc>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800998c:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <prvAddNewTaskToReadyList+0xc8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	429a      	cmp	r2, r3
 8009998:	d207      	bcs.n	80099aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800999a:	4b0c      	ldr	r3, [pc, #48]	@ (80099cc <prvAddNewTaskToReadyList+0xdc>)
 800999c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000f3c 	.word	0x20000f3c
 80099b8:	20000a68 	.word	0x20000a68
 80099bc:	20000f48 	.word	0x20000f48
 80099c0:	20000f58 	.word	0x20000f58
 80099c4:	20000f44 	.word	0x20000f44
 80099c8:	20000a6c 	.word	0x20000a6c
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d018      	beq.n	8009a14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099e2:	4b14      	ldr	r3, [pc, #80]	@ (8009a34 <vTaskDelay+0x64>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <vTaskDelay+0x32>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	60bb      	str	r3, [r7, #8]
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	e7fd      	b.n	80099fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a02:	f000 f88b 	bl	8009b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a06:	2100      	movs	r1, #0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd0f 	bl	800a42c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a0e:	f000 f893 	bl	8009b38 <xTaskResumeAll>
 8009a12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d107      	bne.n	8009a2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009a1a:	4b07      	ldr	r3, [pc, #28]	@ (8009a38 <vTaskDelay+0x68>)
 8009a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a2a:	bf00      	nop
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000f64 	.word	0x20000f64
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08a      	sub	sp, #40	@ 0x28
 8009a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	1d39      	adds	r1, r7, #4
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff f830 	bl	8008ab8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	9202      	str	r2, [sp, #8]
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	2300      	movs	r3, #0
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	2300      	movs	r3, #0
 8009a68:	460a      	mov	r2, r1
 8009a6a:	4924      	ldr	r1, [pc, #144]	@ (8009afc <vTaskStartScheduler+0xc0>)
 8009a6c:	4824      	ldr	r0, [pc, #144]	@ (8009b00 <vTaskStartScheduler+0xc4>)
 8009a6e:	f7ff fdfb 	bl	8009668 <xTaskCreateStatic>
 8009a72:	4603      	mov	r3, r0
 8009a74:	4a23      	ldr	r2, [pc, #140]	@ (8009b04 <vTaskStartScheduler+0xc8>)
 8009a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a78:	4b22      	ldr	r3, [pc, #136]	@ (8009b04 <vTaskStartScheduler+0xc8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a80:	2301      	movs	r3, #1
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	e001      	b.n	8009a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d102      	bne.n	8009a96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a90:	f000 fd20 	bl	800a4d4 <xTimerCreateTimerTask>
 8009a94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d11b      	bne.n	8009ad4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	613b      	str	r3, [r7, #16]
}
 8009aae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ab0:	4b15      	ldr	r3, [pc, #84]	@ (8009b08 <vTaskStartScheduler+0xcc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3354      	adds	r3, #84	@ 0x54
 8009ab6:	4a15      	ldr	r2, [pc, #84]	@ (8009b0c <vTaskStartScheduler+0xd0>)
 8009ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009aba:	4b15      	ldr	r3, [pc, #84]	@ (8009b10 <vTaskStartScheduler+0xd4>)
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ac2:	4b14      	ldr	r3, [pc, #80]	@ (8009b14 <vTaskStartScheduler+0xd8>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009ac8:	4b13      	ldr	r3, [pc, #76]	@ (8009b18 <vTaskStartScheduler+0xdc>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ace:	f001 f8a3 	bl	800ac18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ad2:	e00f      	b.n	8009af4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ada:	d10b      	bne.n	8009af4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	e7fd      	b.n	8009af0 <vTaskStartScheduler+0xb4>
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	0800bd94 	.word	0x0800bd94
 8009b00:	0800a151 	.word	0x0800a151
 8009b04:	20000f60 	.word	0x20000f60
 8009b08:	20000a68 	.word	0x20000a68
 8009b0c:	20000124 	.word	0x20000124
 8009b10:	20000f5c 	.word	0x20000f5c
 8009b14:	20000f48 	.word	0x20000f48
 8009b18:	20000f40 	.word	0x20000f40

08009b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b20:	4b04      	ldr	r3, [pc, #16]	@ (8009b34 <vTaskSuspendAll+0x18>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4a03      	ldr	r2, [pc, #12]	@ (8009b34 <vTaskSuspendAll+0x18>)
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000f64 	.word	0x20000f64

08009b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b46:	4b42      	ldr	r3, [pc, #264]	@ (8009c50 <xTaskResumeAll+0x118>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <xTaskResumeAll+0x2e>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	603b      	str	r3, [r7, #0]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b66:	f001 f8c9 	bl	800acfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b6a:	4b39      	ldr	r3, [pc, #228]	@ (8009c50 <xTaskResumeAll+0x118>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4a37      	ldr	r2, [pc, #220]	@ (8009c50 <xTaskResumeAll+0x118>)
 8009b72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b74:	4b36      	ldr	r3, [pc, #216]	@ (8009c50 <xTaskResumeAll+0x118>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d162      	bne.n	8009c42 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b7c:	4b35      	ldr	r3, [pc, #212]	@ (8009c54 <xTaskResumeAll+0x11c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05e      	beq.n	8009c42 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b84:	e02f      	b.n	8009be6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009b86:	4b34      	ldr	r3, [pc, #208]	@ (8009c58 <xTaskResumeAll+0x120>)
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3318      	adds	r3, #24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff f848 	bl	8008c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff f843 	bl	8008c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8009c5c <xTaskResumeAll+0x124>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d903      	bls.n	8009bb6 <xTaskResumeAll+0x7e>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c5c <xTaskResumeAll+0x124>)
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4a27      	ldr	r2, [pc, #156]	@ (8009c60 <xTaskResumeAll+0x128>)
 8009bc4:	441a      	add	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f7fe ffd0 	bl	8008b72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd6:	4b23      	ldr	r3, [pc, #140]	@ (8009c64 <xTaskResumeAll+0x12c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009be0:	4b21      	ldr	r3, [pc, #132]	@ (8009c68 <xTaskResumeAll+0x130>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009be6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c58 <xTaskResumeAll+0x120>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1cb      	bne.n	8009b86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bf4:	f000 fb68 	bl	800a2c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c6c <xTaskResumeAll+0x134>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d010      	beq.n	8009c26 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c04:	f000 f844 	bl	8009c90 <xTaskIncrementTick>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009c0e:	4b16      	ldr	r3, [pc, #88]	@ (8009c68 <xTaskResumeAll+0x130>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f1      	bne.n	8009c04 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009c20:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <xTaskResumeAll+0x134>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c26:	4b10      	ldr	r3, [pc, #64]	@ (8009c68 <xTaskResumeAll+0x130>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d009      	beq.n	8009c42 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c32:	4b0f      	ldr	r3, [pc, #60]	@ (8009c70 <xTaskResumeAll+0x138>)
 8009c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c42:	f001 f88b 	bl	800ad5c <vPortExitCritical>

	return xAlreadyYielded;
 8009c46:	68bb      	ldr	r3, [r7, #8]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000f64 	.word	0x20000f64
 8009c54:	20000f3c 	.word	0x20000f3c
 8009c58:	20000efc 	.word	0x20000efc
 8009c5c:	20000f44 	.word	0x20000f44
 8009c60:	20000a6c 	.word	0x20000a6c
 8009c64:	20000a68 	.word	0x20000a68
 8009c68:	20000f50 	.word	0x20000f50
 8009c6c:	20000f4c 	.word	0x20000f4c
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c7a:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <xTaskGetTickCount+0x18>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c80:	687b      	ldr	r3, [r7, #4]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bc80      	pop	{r7}
 8009c8a:	4770      	bx	lr
 8009c8c:	20000f40 	.word	0x20000f40

08009c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9a:	4b52      	ldr	r3, [pc, #328]	@ (8009de4 <xTaskIncrementTick+0x154>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 808f 	bne.w	8009dc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ca4:	4b50      	ldr	r3, [pc, #320]	@ (8009de8 <xTaskIncrementTick+0x158>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cac:	4a4e      	ldr	r2, [pc, #312]	@ (8009de8 <xTaskIncrementTick+0x158>)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d121      	bne.n	8009cfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8009dec <xTaskIncrementTick+0x15c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <xTaskIncrementTick+0x4a>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	603b      	str	r3, [r7, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <xTaskIncrementTick+0x46>
 8009cda:	4b44      	ldr	r3, [pc, #272]	@ (8009dec <xTaskIncrementTick+0x15c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	4b43      	ldr	r3, [pc, #268]	@ (8009df0 <xTaskIncrementTick+0x160>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a41      	ldr	r2, [pc, #260]	@ (8009dec <xTaskIncrementTick+0x15c>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	4a41      	ldr	r2, [pc, #260]	@ (8009df0 <xTaskIncrementTick+0x160>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	4b41      	ldr	r3, [pc, #260]	@ (8009df4 <xTaskIncrementTick+0x164>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8009df4 <xTaskIncrementTick+0x164>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	f000 fae6 	bl	800a2c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8009df8 <xTaskIncrementTick+0x168>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d34e      	bcc.n	8009da4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d06:	4b39      	ldr	r3, [pc, #228]	@ (8009dec <xTaskIncrementTick+0x15c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <xTaskIncrementTick+0x84>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <xTaskIncrementTick+0x86>
 8009d14:	2300      	movs	r3, #0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d1a:	4b37      	ldr	r3, [pc, #220]	@ (8009df8 <xTaskIncrementTick+0x168>)
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d20:	601a      	str	r2, [r3, #0]
					break;
 8009d22:	e03f      	b.n	8009da4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d24:	4b31      	ldr	r3, [pc, #196]	@ (8009dec <xTaskIncrementTick+0x15c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d203      	bcs.n	8009d44 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8009df8 <xTaskIncrementTick+0x168>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
						break;
 8009d42:	e02f      	b.n	8009da4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe ff6d 	bl	8008c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	3318      	adds	r3, #24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe ff64 	bl	8008c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	4b25      	ldr	r3, [pc, #148]	@ (8009dfc <xTaskIncrementTick+0x16c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d903      	bls.n	8009d74 <xTaskIncrementTick+0xe4>
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	4a22      	ldr	r2, [pc, #136]	@ (8009dfc <xTaskIncrementTick+0x16c>)
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4a1f      	ldr	r2, [pc, #124]	@ (8009e00 <xTaskIncrementTick+0x170>)
 8009d82:	441a      	add	r2, r3
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe fef1 	bl	8008b72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d94:	4b1b      	ldr	r3, [pc, #108]	@ (8009e04 <xTaskIncrementTick+0x174>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d3b3      	bcc.n	8009d06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da2:	e7b0      	b.n	8009d06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009da4:	4b17      	ldr	r3, [pc, #92]	@ (8009e04 <xTaskIncrementTick+0x174>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009daa:	4915      	ldr	r1, [pc, #84]	@ (8009e00 <xTaskIncrementTick+0x170>)
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d907      	bls.n	8009dcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e004      	b.n	8009dcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009dc2:	4b11      	ldr	r3, [pc, #68]	@ (8009e08 <xTaskIncrementTick+0x178>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8009e08 <xTaskIncrementTick+0x178>)
 8009dca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8009e0c <xTaskIncrementTick+0x17c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009dd8:	697b      	ldr	r3, [r7, #20]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20000f64 	.word	0x20000f64
 8009de8:	20000f40 	.word	0x20000f40
 8009dec:	20000ef4 	.word	0x20000ef4
 8009df0:	20000ef8 	.word	0x20000ef8
 8009df4:	20000f54 	.word	0x20000f54
 8009df8:	20000f5c 	.word	0x20000f5c
 8009dfc:	20000f44 	.word	0x20000f44
 8009e00:	20000a6c 	.word	0x20000a6c
 8009e04:	20000a68 	.word	0x20000a68
 8009e08:	20000f4c 	.word	0x20000f4c
 8009e0c:	20000f50 	.word	0x20000f50

08009e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e16:	4b2a      	ldr	r3, [pc, #168]	@ (8009ec0 <vTaskSwitchContext+0xb0>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ec4 <vTaskSwitchContext+0xb4>)
 8009e20:	2201      	movs	r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e24:	e047      	b.n	8009eb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009e26:	4b27      	ldr	r3, [pc, #156]	@ (8009ec4 <vTaskSwitchContext+0xb4>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009e2c:	4b26      	ldr	r3, [pc, #152]	@ (8009ec8 <vTaskSwitchContext+0xb8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e011      	b.n	8009e58 <vTaskSwitchContext+0x48>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <vTaskSwitchContext+0x42>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vTaskSwitchContext+0x3e>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	491c      	ldr	r1, [pc, #112]	@ (8009ecc <vTaskSwitchContext+0xbc>)
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	440b      	add	r3, r1
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0e3      	beq.n	8009e34 <vTaskSwitchContext+0x24>
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a15      	ldr	r2, [pc, #84]	@ (8009ecc <vTaskSwitchContext+0xbc>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	60bb      	str	r3, [r7, #8]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d104      	bne.n	8009e9c <vTaskSwitchContext+0x8c>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	605a      	str	r2, [r3, #4]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8009ed0 <vTaskSwitchContext+0xc0>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	4a08      	ldr	r2, [pc, #32]	@ (8009ec8 <vTaskSwitchContext+0xb8>)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009eac:	4b08      	ldr	r3, [pc, #32]	@ (8009ed0 <vTaskSwitchContext+0xc0>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3354      	adds	r3, #84	@ 0x54
 8009eb2:	4a08      	ldr	r2, [pc, #32]	@ (8009ed4 <vTaskSwitchContext+0xc4>)
 8009eb4:	6013      	str	r3, [r2, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr
 8009ec0:	20000f64 	.word	0x20000f64
 8009ec4:	20000f50 	.word	0x20000f50
 8009ec8:	20000f44 	.word	0x20000f44
 8009ecc:	20000a6c 	.word	0x20000a6c
 8009ed0:	20000a68 	.word	0x20000a68
 8009ed4:	20000124 	.word	0x20000124

08009ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	60fb      	str	r3, [r7, #12]
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	e7fd      	b.n	8009efc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f00:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <vTaskPlaceOnEventList+0x48>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3318      	adds	r3, #24
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7fe fe55 	bl	8008bb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f0e:	2101      	movs	r1, #1
 8009f10:	6838      	ldr	r0, [r7, #0]
 8009f12:	f000 fa8b 	bl	800a42c <prvAddCurrentTaskToDelayedList>
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000a68 	.word	0x20000a68

08009f24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10b      	bne.n	8009f4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	617b      	str	r3, [r7, #20]
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	e7fd      	b.n	8009f4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3318      	adds	r3, #24
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7fe fe0b 	bl	8008b72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	68b8      	ldr	r0, [r7, #8]
 8009f6c:	f000 fa5e 	bl	800a42c <prvAddCurrentTaskToDelayedList>
	}
 8009f70:	bf00      	nop
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20000a68 	.word	0x20000a68

08009f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60fb      	str	r3, [r7, #12]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	3318      	adds	r3, #24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fe3a 	bl	8008c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800a02c <xTaskRemoveFromEventList+0xb0>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d11d      	bne.n	8009ff8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe fe31 	bl	8008c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fca:	4b19      	ldr	r3, [pc, #100]	@ (800a030 <xTaskRemoveFromEventList+0xb4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d903      	bls.n	8009fda <xTaskRemoveFromEventList+0x5e>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd6:	4a16      	ldr	r2, [pc, #88]	@ (800a030 <xTaskRemoveFromEventList+0xb4>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4a13      	ldr	r2, [pc, #76]	@ (800a034 <xTaskRemoveFromEventList+0xb8>)
 8009fe8:	441a      	add	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3304      	adds	r3, #4
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f7fe fdbe 	bl	8008b72 <vListInsertEnd>
 8009ff6:	e005      	b.n	800a004 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	480e      	ldr	r0, [pc, #56]	@ (800a038 <xTaskRemoveFromEventList+0xbc>)
 800a000:	f7fe fdb7 	bl	8008b72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a008:	4b0c      	ldr	r3, [pc, #48]	@ (800a03c <xTaskRemoveFromEventList+0xc0>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00e:	429a      	cmp	r2, r3
 800a010:	d905      	bls.n	800a01e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a012:	2301      	movs	r3, #1
 800a014:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a016:	4b0a      	ldr	r3, [pc, #40]	@ (800a040 <xTaskRemoveFromEventList+0xc4>)
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e001      	b.n	800a022 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a022:	697b      	ldr	r3, [r7, #20]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000f64 	.word	0x20000f64
 800a030:	20000f44 	.word	0x20000f44
 800a034:	20000a6c 	.word	0x20000a6c
 800a038:	20000efc 	.word	0x20000efc
 800a03c:	20000a68 	.word	0x20000a68
 800a040:	20000f50 	.word	0x20000f50

0800a044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <vTaskInternalSetTimeOutState+0x24>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a054:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <vTaskInternalSetTimeOutState+0x28>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	605a      	str	r2, [r3, #4]
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	20000f54 	.word	0x20000f54
 800a06c:	20000f40 	.word	0x20000f40

0800a070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10b      	bne.n	800a098 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	e7fd      	b.n	800a094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10b      	bne.n	800a0b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	60fb      	str	r3, [r7, #12]
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	e7fd      	b.n	800a0b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a0b6:	f000 fe21 	bl	800acfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a130 <xTaskCheckForTimeOut+0xc0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	69ba      	ldr	r2, [r7, #24]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0d2:	d102      	bne.n	800a0da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	61fb      	str	r3, [r7, #28]
 800a0d8:	e023      	b.n	800a122 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <xTaskCheckForTimeOut+0xc4>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d007      	beq.n	800a0f6 <xTaskCheckForTimeOut+0x86>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d302      	bcc.n	800a0f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	e015      	b.n	800a122 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d20b      	bcs.n	800a118 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff99 	bl	800a044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]
 800a116:	e004      	b.n	800a122 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a11e:	2301      	movs	r3, #1
 800a120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a122:	f000 fe1b 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 800a126:	69fb      	ldr	r3, [r7, #28]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3720      	adds	r7, #32
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000f40 	.word	0x20000f40
 800a134:	20000f54 	.word	0x20000f54

0800a138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a13c:	4b03      	ldr	r3, [pc, #12]	@ (800a14c <vTaskMissedYield+0x14>)
 800a13e:	2201      	movs	r2, #1
 800a140:	601a      	str	r2, [r3, #0]
}
 800a142:	bf00      	nop
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	20000f50 	.word	0x20000f50

0800a150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a158:	f000 f852 	bl	800a200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <prvIdleTask+0x28>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d9f9      	bls.n	800a158 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <prvIdleTask+0x2c>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a174:	e7f0      	b.n	800a158 <prvIdleTask+0x8>
 800a176:	bf00      	nop
 800a178:	20000a6c 	.word	0x20000a6c
 800a17c:	e000ed04 	.word	0xe000ed04

0800a180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a186:	2300      	movs	r3, #0
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	e00c      	b.n	800a1a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4a12      	ldr	r2, [pc, #72]	@ (800a1e0 <prvInitialiseTaskLists+0x60>)
 800a198:	4413      	add	r3, r2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe fcbe 	bl	8008b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	607b      	str	r3, [r7, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b37      	cmp	r3, #55	@ 0x37
 800a1aa:	d9ef      	bls.n	800a18c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1ac:	480d      	ldr	r0, [pc, #52]	@ (800a1e4 <prvInitialiseTaskLists+0x64>)
 800a1ae:	f7fe fcb5 	bl	8008b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1b2:	480d      	ldr	r0, [pc, #52]	@ (800a1e8 <prvInitialiseTaskLists+0x68>)
 800a1b4:	f7fe fcb2 	bl	8008b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1b8:	480c      	ldr	r0, [pc, #48]	@ (800a1ec <prvInitialiseTaskLists+0x6c>)
 800a1ba:	f7fe fcaf 	bl	8008b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1be:	480c      	ldr	r0, [pc, #48]	@ (800a1f0 <prvInitialiseTaskLists+0x70>)
 800a1c0:	f7fe fcac 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1c4:	480b      	ldr	r0, [pc, #44]	@ (800a1f4 <prvInitialiseTaskLists+0x74>)
 800a1c6:	f7fe fca9 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f8 <prvInitialiseTaskLists+0x78>)
 800a1cc:	4a05      	ldr	r2, [pc, #20]	@ (800a1e4 <prvInitialiseTaskLists+0x64>)
 800a1ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1fc <prvInitialiseTaskLists+0x7c>)
 800a1d2:	4a05      	ldr	r2, [pc, #20]	@ (800a1e8 <prvInitialiseTaskLists+0x68>)
 800a1d4:	601a      	str	r2, [r3, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000a6c 	.word	0x20000a6c
 800a1e4:	20000ecc 	.word	0x20000ecc
 800a1e8:	20000ee0 	.word	0x20000ee0
 800a1ec:	20000efc 	.word	0x20000efc
 800a1f0:	20000f10 	.word	0x20000f10
 800a1f4:	20000f28 	.word	0x20000f28
 800a1f8:	20000ef4 	.word	0x20000ef4
 800a1fc:	20000ef8 	.word	0x20000ef8

0800a200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a206:	e019      	b.n	800a23c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a208:	f000 fd78 	bl	800acfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a20c:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <prvCheckTasksWaitingTermination+0x50>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fd05 	bl	8008c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a21e:	4b0d      	ldr	r3, [pc, #52]	@ (800a254 <prvCheckTasksWaitingTermination+0x54>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3b01      	subs	r3, #1
 800a224:	4a0b      	ldr	r2, [pc, #44]	@ (800a254 <prvCheckTasksWaitingTermination+0x54>)
 800a226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a228:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <prvCheckTasksWaitingTermination+0x58>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4a0a      	ldr	r2, [pc, #40]	@ (800a258 <prvCheckTasksWaitingTermination+0x58>)
 800a230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a232:	f000 fd93 	bl	800ad5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f810 	bl	800a25c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a23c:	4b06      	ldr	r3, [pc, #24]	@ (800a258 <prvCheckTasksWaitingTermination+0x58>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e1      	bne.n	800a208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000f10 	.word	0x20000f10
 800a254:	20000f3c 	.word	0x20000f3c
 800a258:	20000f24 	.word	0x20000f24

0800a25c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3354      	adds	r3, #84	@ 0x54
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 fca3 	bl	800bbb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a274:	2b00      	cmp	r3, #0
 800a276:	d108      	bne.n	800a28a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 ff07 	bl	800b090 <vPortFree>
				vPortFree( pxTCB );
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 ff04 	bl	800b090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a288:	e019      	b.n	800a2be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a290:	2b01      	cmp	r3, #1
 800a292:	d103      	bne.n	800a29c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fefb 	bl	800b090 <vPortFree>
	}
 800a29a:	e010      	b.n	800a2be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d00b      	beq.n	800a2be <prvDeleteTCB+0x62>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60fb      	str	r3, [r7, #12]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <prvDeleteTCB+0x5e>
	}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a308 <prvResetNextTaskUnblockTime+0x40>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <prvResetNextTaskUnblockTime+0x14>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <prvResetNextTaskUnblockTime+0x16>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a30c <prvResetNextTaskUnblockTime+0x44>)
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2ea:	e008      	b.n	800a2fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a2ec:	4b06      	ldr	r3, [pc, #24]	@ (800a308 <prvResetNextTaskUnblockTime+0x40>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	4a04      	ldr	r2, [pc, #16]	@ (800a30c <prvResetNextTaskUnblockTime+0x44>)
 800a2fc:	6013      	str	r3, [r2, #0]
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	bc80      	pop	{r7}
 800a306:	4770      	bx	lr
 800a308:	20000ef4 	.word	0x20000ef4
 800a30c:	20000f5c 	.word	0x20000f5c

0800a310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <xTaskGetSchedulerState+0x34>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a31e:	2301      	movs	r3, #1
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	e008      	b.n	800a336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a324:	4b08      	ldr	r3, [pc, #32]	@ (800a348 <xTaskGetSchedulerState+0x38>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a32c:	2302      	movs	r3, #2
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	e001      	b.n	800a336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a336:	687b      	ldr	r3, [r7, #4]
	}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000f48 	.word	0x20000f48
 800a348:	20000f64 	.word	0x20000f64

0800a34c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d058      	beq.n	800a414 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a362:	4b2f      	ldr	r3, [pc, #188]	@ (800a420 <xTaskPriorityDisinherit+0xd4>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d00b      	beq.n	800a384 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	60fb      	str	r3, [r7, #12]
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	60bb      	str	r3, [r7, #8]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a8:	1e5a      	subs	r2, r3, #1
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d02c      	beq.n	800a414 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d128      	bne.n	800a414 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fc2e 	bl	8008c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a424 <xTaskPriorityDisinherit+0xd8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d903      	bls.n	800a3f4 <xTaskPriorityDisinherit+0xa8>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a424 <xTaskPriorityDisinherit+0xd8>)
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4a09      	ldr	r2, [pc, #36]	@ (800a428 <xTaskPriorityDisinherit+0xdc>)
 800a402:	441a      	add	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	3304      	adds	r3, #4
 800a408:	4619      	mov	r1, r3
 800a40a:	4610      	mov	r0, r2
 800a40c:	f7fe fbb1 	bl	8008b72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a414:	697b      	ldr	r3, [r7, #20]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000a68 	.word	0x20000a68
 800a424:	20000f44 	.word	0x20000f44
 800a428:	20000a6c 	.word	0x20000a6c

0800a42c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a436:	4b21      	ldr	r3, [pc, #132]	@ (800a4bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43c:	4b20      	ldr	r3, [pc, #128]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fbf0 	bl	8008c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a44e:	d10a      	bne.n	800a466 <prvAddCurrentTaskToDelayedList+0x3a>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a456:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4819      	ldr	r0, [pc, #100]	@ (800a4c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a460:	f7fe fb87 	bl	8008b72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a464:	e026      	b.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4413      	add	r3, r2
 800a46c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a46e:	4b14      	ldr	r3, [pc, #80]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d209      	bcs.n	800a492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a47e:	4b12      	ldr	r3, [pc, #72]	@ (800a4c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b0f      	ldr	r3, [pc, #60]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3304      	adds	r3, #4
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f7fe fb94 	bl	8008bb8 <vListInsert>
}
 800a490:	e010      	b.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a492:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fe fb8a 	bl	8008bb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d202      	bcs.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4ae:	4a08      	ldr	r2, [pc, #32]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000f40 	.word	0x20000f40
 800a4c0:	20000a68 	.word	0x20000a68
 800a4c4:	20000f28 	.word	0x20000f28
 800a4c8:	20000ef8 	.word	0x20000ef8
 800a4cc:	20000ef4 	.word	0x20000ef4
 800a4d0:	20000f5c 	.word	0x20000f5c

0800a4d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	@ 0x28
 800a4d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4de:	f000 fad9 	bl	800aa94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <xTimerCreateTimerTask+0x84>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d021      	beq.n	800a52e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4f2:	1d3a      	adds	r2, r7, #4
 800a4f4:	f107 0108 	add.w	r1, r7, #8
 800a4f8:	f107 030c 	add.w	r3, r7, #12
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe faf3 	bl	8008ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	9202      	str	r2, [sp, #8]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	2302      	movs	r3, #2
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	460a      	mov	r2, r1
 800a514:	4911      	ldr	r1, [pc, #68]	@ (800a55c <xTimerCreateTimerTask+0x88>)
 800a516:	4812      	ldr	r0, [pc, #72]	@ (800a560 <xTimerCreateTimerTask+0x8c>)
 800a518:	f7ff f8a6 	bl	8009668 <xTaskCreateStatic>
 800a51c:	4603      	mov	r3, r0
 800a51e:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <xTimerCreateTimerTask+0x90>)
 800a520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a522:	4b10      	ldr	r3, [pc, #64]	@ (800a564 <xTimerCreateTimerTask+0x90>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a52a:	2301      	movs	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10b      	bne.n	800a54c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	613b      	str	r3, [r7, #16]
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	e7fd      	b.n	800a548 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a54c:	697b      	ldr	r3, [r7, #20]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20000f98 	.word	0x20000f98
 800a55c:	0800bd9c 	.word	0x0800bd9c
 800a560:	0800a689 	.word	0x0800a689
 800a564:	20000f9c 	.word	0x20000f9c

0800a568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	@ 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a576:	2300      	movs	r3, #0
 800a578:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10b      	bne.n	800a598 <xTimerGenericCommand+0x30>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	623b      	str	r3, [r7, #32]
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	e7fd      	b.n	800a594 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a598:	4b19      	ldr	r3, [pc, #100]	@ (800a600 <xTimerGenericCommand+0x98>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d02a      	beq.n	800a5f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	dc18      	bgt.n	800a5e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5b2:	f7ff fead 	bl	800a310 <xTaskGetSchedulerState>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d109      	bne.n	800a5d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5bc:	4b10      	ldr	r3, [pc, #64]	@ (800a600 <xTimerGenericCommand+0x98>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	f107 0110 	add.w	r1, r7, #16
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c8:	f7fe fc62 	bl	8008e90 <xQueueGenericSend>
 800a5cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a5ce:	e012      	b.n	800a5f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <xTimerGenericCommand+0x98>)
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	f107 0110 	add.w	r1, r7, #16
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f7fe fc58 	bl	8008e90 <xQueueGenericSend>
 800a5e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a5e2:	e008      	b.n	800a5f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5e4:	4b06      	ldr	r3, [pc, #24]	@ (800a600 <xTimerGenericCommand+0x98>)
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	f107 0110 	add.w	r1, r7, #16
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	f7fe fd50 	bl	8009094 <xQueueGenericSendFromISR>
 800a5f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3728      	adds	r7, #40	@ 0x28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20000f98 	.word	0x20000f98

0800a604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af02      	add	r7, sp, #8
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a60e:	4b1d      	ldr	r3, [pc, #116]	@ (800a684 <prvProcessExpiredTimer+0x80>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3304      	adds	r3, #4
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fb03 	bl	8008c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d123      	bne.n	800a672 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	699a      	ldr	r2, [r3, #24]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	18d1      	adds	r1, r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	6978      	ldr	r0, [r7, #20]
 800a638:	f000 f8cc 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d017      	beq.n	800a672 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a642:	2300      	movs	r3, #0
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	2100      	movs	r1, #0
 800a64c:	6978      	ldr	r0, [r7, #20]
 800a64e:	f7ff ff8b 	bl	800a568 <xTimerGenericCommand>
 800a652:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	60fb      	str	r3, [r7, #12]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	4798      	blx	r3
}
 800a67a:	bf00      	nop
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000f90 	.word	0x20000f90

0800a688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4618      	mov	r0, r3
 800a696:	f000 f859 	bl	800a74c <prvGetNextExpireTime>
 800a69a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f805 	bl	800a6b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6a6:	f000 f8d7 	bl	800a858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6aa:	bf00      	nop
 800a6ac:	e7f0      	b.n	800a690 <prvTimerTask+0x8>
	...

0800a6b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6ba:	f7ff fa2f 	bl	8009b1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f866 	bl	800a794 <prvSampleTimeNow>
 800a6c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d130      	bne.n	800a732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d806      	bhi.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6de:	f7ff fa2b 	bl	8009b38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6e2:	68f9      	ldr	r1, [r7, #12]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff8d 	bl	800a604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6ea:	e024      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d008      	beq.n	800a704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6f2:	4b13      	ldr	r3, [pc, #76]	@ (800a740 <prvProcessTimerOrBlockTask+0x90>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf0c      	ite	eq
 800a6fc:	2301      	moveq	r3, #1
 800a6fe:	2300      	movne	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a704:	4b0f      	ldr	r3, [pc, #60]	@ (800a744 <prvProcessTimerOrBlockTask+0x94>)
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	f7fe ff75 	bl	8009600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a716:	f7ff fa0f 	bl	8009b38 <xTaskResumeAll>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a720:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <prvProcessTimerOrBlockTask+0x98>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
}
 800a730:	e001      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a732:	f7ff fa01 	bl	8009b38 <xTaskResumeAll>
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20000f94 	.word	0x20000f94
 800a744:	20000f98 	.word	0x20000f98
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a754:	4b0e      	ldr	r3, [pc, #56]	@ (800a790 <prvGetNextExpireTime+0x44>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bf0c      	ite	eq
 800a75e:	2301      	moveq	r3, #1
 800a760:	2300      	movne	r3, #0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d105      	bne.n	800a77e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a772:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <prvGetNextExpireTime+0x44>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e001      	b.n	800a782 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a782:	68fb      	ldr	r3, [r7, #12]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	bc80      	pop	{r7}
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20000f90 	.word	0x20000f90

0800a794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a79c:	f7ff fa6a 	bl	8009c74 <xTaskGetTickCount>
 800a7a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d205      	bcs.n	800a7b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7ac:	f000 f910 	bl	800a9d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7be:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000fa0 	.word	0x20000fa0

0800a7d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d812      	bhi.n	800a820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	e01b      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a80e:	4b10      	ldr	r3, [pc, #64]	@ (800a850 <prvInsertTimerInActiveList+0x7c>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fe f9cd 	bl	8008bb8 <vListInsert>
 800a81e:	e012      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d206      	bcs.n	800a836 <prvInsertTimerInActiveList+0x62>
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e007      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a836:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <prvInsertTimerInActiveList+0x80>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fe f9b9 	bl	8008bb8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a846:	697b      	ldr	r3, [r7, #20]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000f94 	.word	0x20000f94
 800a854:	20000f90 	.word	0x20000f90

0800a858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	@ 0x38
 800a85c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a85e:	e0a5      	b.n	800a9ac <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	da19      	bge.n	800a89a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	3304      	adds	r3, #4
 800a86a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10b      	bne.n	800a88a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	61fb      	str	r3, [r7, #28]
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a890:	6850      	ldr	r0, [r2, #4]
 800a892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a894:	6892      	ldr	r2, [r2, #8]
 800a896:	4611      	mov	r1, r2
 800a898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f2c0 8085 	blt.w	800a9ac <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe f9b8 	bl	8008c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff ff6a 	bl	800a794 <prvSampleTimeNow>
 800a8c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	d86c      	bhi.n	800a9a2 <prvProcessReceivedCommands+0x14a>
 800a8c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <prvProcessReceivedCommands+0x78>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a8f9 	.word	0x0800a8f9
 800a8d8:	0800a8f9 	.word	0x0800a8f9
 800a8dc:	0800a9a3 	.word	0x0800a9a3
 800a8e0:	0800a957 	.word	0x0800a957
 800a8e4:	0800a991 	.word	0x0800a991
 800a8e8:	0800a8f9 	.word	0x0800a8f9
 800a8ec:	0800a8f9 	.word	0x0800a8f9
 800a8f0:	0800a9a3 	.word	0x0800a9a3
 800a8f4:	0800a957 	.word	0x0800a957
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	18d1      	adds	r1, r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a906:	f7ff ff65 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d04a      	beq.n	800a9a6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a916:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d142      	bne.n	800a9a6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	441a      	add	r2, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	2300      	movs	r3, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a932:	f7ff fe19 	bl	800a568 <xTimerGenericCommand>
 800a936:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d133      	bne.n	800a9a6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	61bb      	str	r3, [r7, #24]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10b      	bne.n	800a97c <prvProcessReceivedCommands+0x124>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	617b      	str	r3, [r7, #20]
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	18d1      	adds	r1, r2, r3
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a98a:	f7ff ff23 	bl	800a7d4 <prvInsertTimerInActiveList>
					break;
 800a98e:	e00d      	b.n	800a9ac <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a992:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d107      	bne.n	800a9aa <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800a99a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a99c:	f000 fb78 	bl	800b090 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9a0:	e003      	b.n	800a9aa <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800a9a2:	bf00      	nop
 800a9a4:	e002      	b.n	800a9ac <prvProcessReceivedCommands+0x154>
					break;
 800a9a6:	bf00      	nop
 800a9a8:	e000      	b.n	800a9ac <prvProcessReceivedCommands+0x154>
					break;
 800a9aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <prvProcessReceivedCommands+0x174>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	1d39      	adds	r1, r7, #4
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fc09 	bl	80091cc <xQueueReceive>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f47f af4f 	bne.w	800a860 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3730      	adds	r7, #48	@ 0x30
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000f98 	.word	0x20000f98

0800a9d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9d6:	e046      	b.n	800aa66 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9d8:	4b2c      	ldr	r3, [pc, #176]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9e2:	4b2a      	ldr	r3, [pc, #168]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe f919 	bl	8008c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d12f      	bne.n	800aa66 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d90e      	bls.n	800aa36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa24:	4b19      	ldr	r3, [pc, #100]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f7fe f8c2 	bl	8008bb8 <vListInsert>
 800aa34:	e017      	b.n	800aa66 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa36:	2300      	movs	r3, #0
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	2100      	movs	r1, #0
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff fd91 	bl	800a568 <xTimerGenericCommand>
 800aa46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <prvSwitchTimerLists+0x96>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	603b      	str	r3, [r7, #0]
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	e7fd      	b.n	800aa62 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa66:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1b3      	bne.n	800a9d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa70:	4b06      	ldr	r3, [pc, #24]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa76:	4b06      	ldr	r3, [pc, #24]	@ (800aa90 <prvSwitchTimerLists+0xc0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a04      	ldr	r2, [pc, #16]	@ (800aa8c <prvSwitchTimerLists+0xbc>)
 800aa7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa7e:	4a04      	ldr	r2, [pc, #16]	@ (800aa90 <prvSwitchTimerLists+0xc0>)
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	6013      	str	r3, [r2, #0]
}
 800aa84:	bf00      	nop
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000f90 	.word	0x20000f90
 800aa90:	20000f94 	.word	0x20000f94

0800aa94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa9a:	f000 f92f 	bl	800acfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa9e:	4b15      	ldr	r3, [pc, #84]	@ (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d120      	bne.n	800aae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaa6:	4814      	ldr	r0, [pc, #80]	@ (800aaf8 <prvCheckForValidListAndQueue+0x64>)
 800aaa8:	f7fe f838 	bl	8008b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aaac:	4813      	ldr	r0, [pc, #76]	@ (800aafc <prvCheckForValidListAndQueue+0x68>)
 800aaae:	f7fe f835 	bl	8008b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aab2:	4b13      	ldr	r3, [pc, #76]	@ (800ab00 <prvCheckForValidListAndQueue+0x6c>)
 800aab4:	4a10      	ldr	r2, [pc, #64]	@ (800aaf8 <prvCheckForValidListAndQueue+0x64>)
 800aab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aab8:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <prvCheckForValidListAndQueue+0x70>)
 800aaba:	4a10      	ldr	r2, [pc, #64]	@ (800aafc <prvCheckForValidListAndQueue+0x68>)
 800aabc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aabe:	2300      	movs	r3, #0
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	4b11      	ldr	r3, [pc, #68]	@ (800ab08 <prvCheckForValidListAndQueue+0x74>)
 800aac4:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <prvCheckForValidListAndQueue+0x78>)
 800aac6:	2110      	movs	r1, #16
 800aac8:	200a      	movs	r0, #10
 800aaca:	f7fe f941 	bl	8008d50 <xQueueGenericCreateStatic>
 800aace:	4603      	mov	r3, r0
 800aad0:	4a08      	ldr	r2, [pc, #32]	@ (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aad4:	4b07      	ldr	r3, [pc, #28]	@ (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aadc:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	490b      	ldr	r1, [pc, #44]	@ (800ab10 <prvCheckForValidListAndQueue+0x7c>)
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd64 	bl	80095b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aae8:	f000 f938 	bl	800ad5c <vPortExitCritical>
}
 800aaec:	bf00      	nop
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000f98 	.word	0x20000f98
 800aaf8:	20000f68 	.word	0x20000f68
 800aafc:	20000f7c 	.word	0x20000f7c
 800ab00:	20000f90 	.word	0x20000f90
 800ab04:	20000f94 	.word	0x20000f94
 800ab08:	20001044 	.word	0x20001044
 800ab0c:	20000fa4 	.word	0x20000fa4
 800ab10:	0800bda4 	.word	0x0800bda4

0800ab14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b04      	subs	r3, #4
 800ab24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ab2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3b04      	subs	r3, #4
 800ab32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f023 0201 	bic.w	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3b04      	subs	r3, #4
 800ab42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab44:	4a08      	ldr	r2, [pc, #32]	@ (800ab68 <pxPortInitialiseStack+0x54>)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3b14      	subs	r3, #20
 800ab4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3b20      	subs	r3, #32
 800ab5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bc80      	pop	{r7}
 800ab66:	4770      	bx	lr
 800ab68:	0800ab6d 	.word	0x0800ab6d

0800ab6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ab72:	2300      	movs	r3, #0
 800ab74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab76:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <prvTaskExitError+0x54>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab7e:	d00b      	beq.n	800ab98 <prvTaskExitError+0x2c>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60fb      	str	r3, [r7, #12]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <prvTaskExitError+0x28>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	60bb      	str	r3, [r7, #8]
}
 800abaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abac:	bf00      	nop
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0fc      	beq.n	800abae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr
 800abc0:	200000b0 	.word	0x200000b0
	...

0800abd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800abd0:	4b07      	ldr	r3, [pc, #28]	@ (800abf0 <pxCurrentTCBConst2>)
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	6808      	ldr	r0, [r1, #0]
 800abd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abda:	f380 8809 	msr	PSP, r0
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f04f 0000 	mov.w	r0, #0
 800abe6:	f380 8811 	msr	BASEPRI, r0
 800abea:	f04e 0e0d 	orr.w	lr, lr, #13
 800abee:	4770      	bx	lr

0800abf0 <pxCurrentTCBConst2>:
 800abf0:	20000a68 	.word	0x20000a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop

0800abf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800abf8:	4806      	ldr	r0, [pc, #24]	@ (800ac14 <prvPortStartFirstTask+0x1c>)
 800abfa:	6800      	ldr	r0, [r0, #0]
 800abfc:	6800      	ldr	r0, [r0, #0]
 800abfe:	f380 8808 	msr	MSP, r0
 800ac02:	b662      	cpsie	i
 800ac04:	b661      	cpsie	f
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	df00      	svc	0
 800ac10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac12:	bf00      	nop
 800ac14:	e000ed08 	.word	0xe000ed08

0800ac18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac1e:	4b32      	ldr	r3, [pc, #200]	@ (800ace8 <xPortStartScheduler+0xd0>)
 800ac20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	22ff      	movs	r2, #255	@ 0xff
 800ac2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	4b2a      	ldr	r3, [pc, #168]	@ (800acec <xPortStartScheduler+0xd4>)
 800ac44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac46:	4b2a      	ldr	r3, [pc, #168]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac48:	2207      	movs	r2, #7
 800ac4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac4c:	e009      	b.n	800ac62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ac4e:	4b28      	ldr	r3, [pc, #160]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	4a26      	ldr	r2, [pc, #152]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b80      	cmp	r3, #128	@ 0x80
 800ac6c:	d0ef      	beq.n	800ac4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac6e:	4b20      	ldr	r3, [pc, #128]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f1c3 0307 	rsb	r3, r3, #7
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d00b      	beq.n	800ac92 <xPortStartScheduler+0x7a>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	60bb      	str	r3, [r7, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac92:	4b17      	ldr	r3, [pc, #92]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	4a15      	ldr	r2, [pc, #84]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac9c:	4b14      	ldr	r3, [pc, #80]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aca4:	4a12      	ldr	r2, [pc, #72]	@ (800acf0 <xPortStartScheduler+0xd8>)
 800aca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb0:	4b10      	ldr	r3, [pc, #64]	@ (800acf4 <xPortStartScheduler+0xdc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a0f      	ldr	r2, [pc, #60]	@ (800acf4 <xPortStartScheduler+0xdc>)
 800acb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800acba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acbc:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <xPortStartScheduler+0xdc>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0c      	ldr	r2, [pc, #48]	@ (800acf4 <xPortStartScheduler+0xdc>)
 800acc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800acc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acc8:	f000 f8b8 	bl	800ae3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800accc:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <xPortStartScheduler+0xe0>)
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acd2:	f7ff ff91 	bl	800abf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acd6:	f7ff f89b 	bl	8009e10 <vTaskSwitchContext>
	prvTaskExitError();
 800acda:	f7ff ff47 	bl	800ab6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	e000e400 	.word	0xe000e400
 800acec:	20001094 	.word	0x20001094
 800acf0:	20001098 	.word	0x20001098
 800acf4:	e000ed20 	.word	0xe000ed20
 800acf8:	200000b0 	.word	0x200000b0

0800acfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	607b      	str	r3, [r7, #4]
}
 800ad14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad16:	4b0f      	ldr	r3, [pc, #60]	@ (800ad54 <vPortEnterCritical+0x58>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	4a0d      	ldr	r2, [pc, #52]	@ (800ad54 <vPortEnterCritical+0x58>)
 800ad1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad20:	4b0c      	ldr	r3, [pc, #48]	@ (800ad54 <vPortEnterCritical+0x58>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d110      	bne.n	800ad4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad28:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <vPortEnterCritical+0x5c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <vPortEnterCritical+0x4e>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	603b      	str	r3, [r7, #0]
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	e7fd      	b.n	800ad46 <vPortEnterCritical+0x4a>
	}
}
 800ad4a:	bf00      	nop
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bc80      	pop	{r7}
 800ad52:	4770      	bx	lr
 800ad54:	200000b0 	.word	0x200000b0
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad62:	4b12      	ldr	r3, [pc, #72]	@ (800adac <vPortExitCritical+0x50>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <vPortExitCritical+0x26>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	607b      	str	r3, [r7, #4]
}
 800ad7c:	bf00      	nop
 800ad7e:	bf00      	nop
 800ad80:	e7fd      	b.n	800ad7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad82:	4b0a      	ldr	r3, [pc, #40]	@ (800adac <vPortExitCritical+0x50>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	4a08      	ldr	r2, [pc, #32]	@ (800adac <vPortExitCritical+0x50>)
 800ad8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad8c:	4b07      	ldr	r3, [pc, #28]	@ (800adac <vPortExitCritical+0x50>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <vPortExitCritical+0x44>
 800ad94:	2300      	movs	r3, #0
 800ad96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f383 8811 	msr	BASEPRI, r3
}
 800ad9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bc80      	pop	{r7}
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	200000b0 	.word	0x200000b0

0800adb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adb0:	f3ef 8009 	mrs	r0, PSP
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	4b0d      	ldr	r3, [pc, #52]	@ (800adf0 <pxCurrentTCBConst>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800adc0:	6010      	str	r0, [r2, #0]
 800adc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800adc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800adca:	f380 8811 	msr	BASEPRI, r0
 800adce:	f7ff f81f 	bl	8009e10 <vTaskSwitchContext>
 800add2:	f04f 0000 	mov.w	r0, #0
 800add6:	f380 8811 	msr	BASEPRI, r0
 800adda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800adde:	6819      	ldr	r1, [r3, #0]
 800ade0:	6808      	ldr	r0, [r1, #0]
 800ade2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ade6:	f380 8809 	msr	PSP, r0
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	4770      	bx	lr

0800adf0 <pxCurrentTCBConst>:
 800adf0:	20000a68 	.word	0x20000a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop

0800adf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	607b      	str	r3, [r7, #4]
}
 800ae10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae12:	f7fe ff3d 	bl	8009c90 <xTaskIncrementTick>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae1c:	4b06      	ldr	r3, [pc, #24]	@ (800ae38 <SysTick_Handler+0x40>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	2300      	movs	r3, #0
 800ae26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f383 8811 	msr	BASEPRI, r3
}
 800ae2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae40:	4b0a      	ldr	r3, [pc, #40]	@ (800ae6c <vPortSetupTimerInterrupt+0x30>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae46:	4b0a      	ldr	r3, [pc, #40]	@ (800ae70 <vPortSetupTimerInterrupt+0x34>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae4c:	4b09      	ldr	r3, [pc, #36]	@ (800ae74 <vPortSetupTimerInterrupt+0x38>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a09      	ldr	r2, [pc, #36]	@ (800ae78 <vPortSetupTimerInterrupt+0x3c>)
 800ae52:	fba2 2303 	umull	r2, r3, r2, r3
 800ae56:	099b      	lsrs	r3, r3, #6
 800ae58:	4a08      	ldr	r2, [pc, #32]	@ (800ae7c <vPortSetupTimerInterrupt+0x40>)
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae5e:	4b03      	ldr	r3, [pc, #12]	@ (800ae6c <vPortSetupTimerInterrupt+0x30>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	601a      	str	r2, [r3, #0]
}
 800ae64:	bf00      	nop
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bc80      	pop	{r7}
 800ae6a:	4770      	bx	lr
 800ae6c:	e000e010 	.word	0xe000e010
 800ae70:	e000e018 	.word	0xe000e018
 800ae74:	20000000 	.word	0x20000000
 800ae78:	10624dd3 	.word	0x10624dd3
 800ae7c:	e000e014 	.word	0xe000e014

0800ae80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae86:	f3ef 8305 	mrs	r3, IPSR
 800ae8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b0f      	cmp	r3, #15
 800ae90:	d915      	bls.n	800aebe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae92:	4a17      	ldr	r2, [pc, #92]	@ (800aef0 <vPortValidateInterruptPriority+0x70>)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae9c:	4b15      	ldr	r3, [pc, #84]	@ (800aef4 <vPortValidateInterruptPriority+0x74>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	7afa      	ldrb	r2, [r7, #11]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d20b      	bcs.n	800aebe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	607b      	str	r3, [r7, #4]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aebe:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <vPortValidateInterruptPriority+0x78>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aec6:	4b0d      	ldr	r3, [pc, #52]	@ (800aefc <vPortValidateInterruptPriority+0x7c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d90b      	bls.n	800aee6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	603b      	str	r3, [r7, #0]
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	e7fd      	b.n	800aee2 <vPortValidateInterruptPriority+0x62>
	}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr
 800aef0:	e000e3f0 	.word	0xe000e3f0
 800aef4:	20001094 	.word	0x20001094
 800aef8:	e000ed0c 	.word	0xe000ed0c
 800aefc:	20001098 	.word	0x20001098

0800af00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	@ 0x28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af0c:	f7fe fe06 	bl	8009b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af10:	4b5a      	ldr	r3, [pc, #360]	@ (800b07c <pvPortMalloc+0x17c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af18:	f000 f916 	bl	800b148 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af1c:	4b58      	ldr	r3, [pc, #352]	@ (800b080 <pvPortMalloc+0x180>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4013      	ands	r3, r2
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 8090 	bne.w	800b04a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01e      	beq.n	800af6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af30:	2208      	movs	r2, #8
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4413      	add	r3, r2
 800af36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d015      	beq.n	800af6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f023 0307 	bic.w	r3, r3, #7
 800af48:	3308      	adds	r3, #8
 800af4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <pvPortMalloc+0x6e>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	617b      	str	r3, [r7, #20]
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	e7fd      	b.n	800af6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d06a      	beq.n	800b04a <pvPortMalloc+0x14a>
 800af74:	4b43      	ldr	r3, [pc, #268]	@ (800b084 <pvPortMalloc+0x184>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d865      	bhi.n	800b04a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af7e:	4b42      	ldr	r3, [pc, #264]	@ (800b088 <pvPortMalloc+0x188>)
 800af80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af82:	4b41      	ldr	r3, [pc, #260]	@ (800b088 <pvPortMalloc+0x188>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af88:	e004      	b.n	800af94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d903      	bls.n	800afa6 <pvPortMalloc+0xa6>
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1f1      	bne.n	800af8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afa6:	4b35      	ldr	r3, [pc, #212]	@ (800b07c <pvPortMalloc+0x17c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afac:	429a      	cmp	r2, r3
 800afae:	d04c      	beq.n	800b04a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2208      	movs	r2, #8
 800afb6:	4413      	add	r3, r2
 800afb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	1ad2      	subs	r2, r2, r3
 800afca:	2308      	movs	r3, #8
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	429a      	cmp	r2, r3
 800afd0:	d920      	bls.n	800b014 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	f003 0307 	and.w	r3, r3, #7
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <pvPortMalloc+0xfc>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	613b      	str	r3, [r7, #16]
}
 800aff6:	bf00      	nop
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b00e:	69b8      	ldr	r0, [r7, #24]
 800b010:	f000 f8fc 	bl	800b20c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b014:	4b1b      	ldr	r3, [pc, #108]	@ (800b084 <pvPortMalloc+0x184>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	4a19      	ldr	r2, [pc, #100]	@ (800b084 <pvPortMalloc+0x184>)
 800b020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b022:	4b18      	ldr	r3, [pc, #96]	@ (800b084 <pvPortMalloc+0x184>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4b19      	ldr	r3, [pc, #100]	@ (800b08c <pvPortMalloc+0x18c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d203      	bcs.n	800b036 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b02e:	4b15      	ldr	r3, [pc, #84]	@ (800b084 <pvPortMalloc+0x184>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a16      	ldr	r2, [pc, #88]	@ (800b08c <pvPortMalloc+0x18c>)
 800b034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	4b11      	ldr	r3, [pc, #68]	@ (800b080 <pvPortMalloc+0x180>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	431a      	orrs	r2, r3
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b04a:	f7fe fd75 	bl	8009b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <pvPortMalloc+0x170>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	60fb      	str	r3, [r7, #12]
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	e7fd      	b.n	800b06c <pvPortMalloc+0x16c>
	return pvReturn;
 800b070:	69fb      	ldr	r3, [r7, #28]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3728      	adds	r7, #40	@ 0x28
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20001ca4 	.word	0x20001ca4
 800b080:	20001cb0 	.word	0x20001cb0
 800b084:	20001ca8 	.word	0x20001ca8
 800b088:	20001c9c 	.word	0x20001c9c
 800b08c:	20001cac 	.word	0x20001cac

0800b090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d04a      	beq.n	800b138 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0a2:	2308      	movs	r3, #8
 800b0a4:	425b      	negs	r3, r3
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	4b22      	ldr	r3, [pc, #136]	@ (800b140 <vPortFree+0xb0>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10b      	bne.n	800b0d6 <vPortFree+0x46>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	60fb      	str	r3, [r7, #12]
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	e7fd      	b.n	800b0d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00b      	beq.n	800b0f6 <vPortFree+0x66>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60bb      	str	r3, [r7, #8]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	4b11      	ldr	r3, [pc, #68]	@ (800b140 <vPortFree+0xb0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4013      	ands	r3, r2
 800b100:	2b00      	cmp	r3, #0
 800b102:	d019      	beq.n	800b138 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d115      	bne.n	800b138 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	4b0b      	ldr	r3, [pc, #44]	@ (800b140 <vPortFree+0xb0>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	43db      	mvns	r3, r3
 800b116:	401a      	ands	r2, r3
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b11c:	f7fe fcfe 	bl	8009b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	4b07      	ldr	r3, [pc, #28]	@ (800b144 <vPortFree+0xb4>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4413      	add	r3, r2
 800b12a:	4a06      	ldr	r2, [pc, #24]	@ (800b144 <vPortFree+0xb4>)
 800b12c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b12e:	6938      	ldr	r0, [r7, #16]
 800b130:	f000 f86c 	bl	800b20c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b134:	f7fe fd00 	bl	8009b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b138:	bf00      	nop
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	20001cb0 	.word	0x20001cb0
 800b144:	20001ca8 	.word	0x20001ca8

0800b148 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b14e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b152:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b154:	4b27      	ldr	r3, [pc, #156]	@ (800b1f4 <prvHeapInit+0xac>)
 800b156:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3307      	adds	r3, #7
 800b166:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f4 <prvHeapInit+0xac>)
 800b178:	4413      	add	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b180:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f8 <prvHeapInit+0xb0>)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b186:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f8 <prvHeapInit+0xb0>)
 800b188:	2200      	movs	r2, #0
 800b18a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	4413      	add	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b194:	2208      	movs	r2, #8
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	1a9b      	subs	r3, r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0307 	bic.w	r3, r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4a15      	ldr	r2, [pc, #84]	@ (800b1fc <prvHeapInit+0xb4>)
 800b1a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1aa:	4b14      	ldr	r3, [pc, #80]	@ (800b1fc <prvHeapInit+0xb4>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <prvHeapInit+0xb4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	1ad2      	subs	r2, r2, r3
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b1fc <prvHeapInit+0xb4>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4a0a      	ldr	r2, [pc, #40]	@ (800b200 <prvHeapInit+0xb8>)
 800b1d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	4a09      	ldr	r2, [pc, #36]	@ (800b204 <prvHeapInit+0xbc>)
 800b1de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1e0:	4b09      	ldr	r3, [pc, #36]	@ (800b208 <prvHeapInit+0xc0>)
 800b1e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b1e6:	601a      	str	r2, [r3, #0]
}
 800b1e8:	bf00      	nop
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	2000109c 	.word	0x2000109c
 800b1f8:	20001c9c 	.word	0x20001c9c
 800b1fc:	20001ca4 	.word	0x20001ca4
 800b200:	20001cac 	.word	0x20001cac
 800b204:	20001ca8 	.word	0x20001ca8
 800b208:	20001cb0 	.word	0x20001cb0

0800b20c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b214:	4b27      	ldr	r3, [pc, #156]	@ (800b2b4 <prvInsertBlockIntoFreeList+0xa8>)
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e002      	b.n	800b220 <prvInsertBlockIntoFreeList+0x14>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d8f7      	bhi.n	800b21a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	4413      	add	r3, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d108      	bne.n	800b24e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	441a      	add	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	441a      	add	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d118      	bne.n	800b294 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <prvInsertBlockIntoFreeList+0xac>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d00d      	beq.n	800b28a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	441a      	add	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e008      	b.n	800b29c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b28a:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b8 <prvInsertBlockIntoFreeList+0xac>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e003      	b.n	800b29c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d002      	beq.n	800b2aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2aa:	bf00      	nop
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bc80      	pop	{r7}
 800b2b2:	4770      	bx	lr
 800b2b4:	20001c9c 	.word	0x20001c9c
 800b2b8:	20001ca4 	.word	0x20001ca4

0800b2bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4912      	ldr	r1, [pc, #72]	@ (800b30c <MX_USB_DEVICE_Init+0x50>)
 800b2c4:	4812      	ldr	r0, [pc, #72]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2c6:	f7fc fa41 	bl	800774c <USBD_Init>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2d0:	f7f5 f8c8 	bl	8000464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800b2d4:	490f      	ldr	r1, [pc, #60]	@ (800b314 <MX_USB_DEVICE_Init+0x58>)
 800b2d6:	480e      	ldr	r0, [pc, #56]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2d8:	f7fc fa63 	bl	80077a2 <USBD_RegisterClass>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2e2:	f7f5 f8bf 	bl	8000464 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800b2e6:	490c      	ldr	r1, [pc, #48]	@ (800b318 <MX_USB_DEVICE_Init+0x5c>)
 800b2e8:	4809      	ldr	r0, [pc, #36]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2ea:	f7fb fa0f 	bl	800670c <USBD_MSC_RegisterStorage>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2f4:	f7f5 f8b6 	bl	8000464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b2f8:	4805      	ldr	r0, [pc, #20]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2fa:	f7fc fa6b 	bl	80077d4 <USBD_Start>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b304:	f7f5 f8ae 	bl	8000464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b308:	bf00      	nop
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	200000b4 	.word	0x200000b4
 800b310:	20001cb4 	.word	0x20001cb4
 800b314:	2000000c 	.word	0x2000000c
 800b318:	20000104 	.word	0x20000104

0800b31c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2212      	movs	r2, #18
 800b32c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b32e:	4b03      	ldr	r3, [pc, #12]	@ (800b33c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	bc80      	pop	{r7}
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	200000d0 	.word	0x200000d0

0800b340 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	6039      	str	r1, [r7, #0]
 800b34a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2204      	movs	r2, #4
 800b350:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b352:	4b03      	ldr	r3, [pc, #12]	@ (800b360 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	bc80      	pop	{r7}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200000e4 	.word	0x200000e4

0800b364 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	6039      	str	r1, [r7, #0]
 800b36e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4907      	ldr	r1, [pc, #28]	@ (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
 800b37a:	4808      	ldr	r0, [pc, #32]	@ (800b39c <USBD_FS_ProductStrDescriptor+0x38>)
 800b37c:	f7fd f99f 	bl	80086be <USBD_GetString>
 800b380:	e004      	b.n	800b38c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	4904      	ldr	r1, [pc, #16]	@ (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
 800b386:	4805      	ldr	r0, [pc, #20]	@ (800b39c <USBD_FS_ProductStrDescriptor+0x38>)
 800b388:	f7fd f999 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b38c:	4b02      	ldr	r3, [pc, #8]	@ (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20001f78 	.word	0x20001f78
 800b39c:	0800bdac 	.word	0x0800bdac

0800b3a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	4904      	ldr	r1, [pc, #16]	@ (800b3c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3b0:	4804      	ldr	r0, [pc, #16]	@ (800b3c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3b2:	f7fd f984 	bl	80086be <USBD_GetString>
  return USBD_StrDesc;
 800b3b6:	4b02      	ldr	r3, [pc, #8]	@ (800b3c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20001f78 	.word	0x20001f78
 800b3c4:	0800bdc0 	.word	0x0800bdc0

0800b3c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	221a      	movs	r2, #26
 800b3d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3da:	f000 f843 	bl	800b464 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3de:	4b02      	ldr	r3, [pc, #8]	@ (800b3e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	200000e8 	.word	0x200000e8

0800b3ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d105      	bne.n	800b40a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4907      	ldr	r1, [pc, #28]	@ (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b402:	4808      	ldr	r0, [pc, #32]	@ (800b424 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b404:	f7fd f95b 	bl	80086be <USBD_GetString>
 800b408:	e004      	b.n	800b414 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	4904      	ldr	r1, [pc, #16]	@ (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b40e:	4805      	ldr	r0, [pc, #20]	@ (800b424 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b410:	f7fd f955 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b414:	4b02      	ldr	r3, [pc, #8]	@ (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20001f78 	.word	0x20001f78
 800b424:	0800bdc8 	.word	0x0800bdc8

0800b428 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d105      	bne.n	800b446 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4907      	ldr	r1, [pc, #28]	@ (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b43e:	4808      	ldr	r0, [pc, #32]	@ (800b460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b440:	f7fd f93d 	bl	80086be <USBD_GetString>
 800b444:	e004      	b.n	800b450 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4904      	ldr	r1, [pc, #16]	@ (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b44a:	4805      	ldr	r0, [pc, #20]	@ (800b460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b44c:	f7fd f937 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b450:	4b02      	ldr	r3, [pc, #8]	@ (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20001f78 	.word	0x20001f78
 800b460:	0800bdd4 	.word	0x0800bdd4

0800b464 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b46a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a8 <Get_SerialNum+0x44>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b470:	4b0e      	ldr	r3, [pc, #56]	@ (800b4ac <Get_SerialNum+0x48>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b476:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b0 <Get_SerialNum+0x4c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4413      	add	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b48a:	2208      	movs	r2, #8
 800b48c:	4909      	ldr	r1, [pc, #36]	@ (800b4b4 <Get_SerialNum+0x50>)
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f814 	bl	800b4bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b494:	2204      	movs	r2, #4
 800b496:	4908      	ldr	r1, [pc, #32]	@ (800b4b8 <Get_SerialNum+0x54>)
 800b498:	68b8      	ldr	r0, [r7, #8]
 800b49a:	f000 f80f 	bl	800b4bc <IntToUnicode>
  }
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	1ffff7e8 	.word	0x1ffff7e8
 800b4ac:	1ffff7ec 	.word	0x1ffff7ec
 800b4b0:	1ffff7f0 	.word	0x1ffff7f0
 800b4b4:	200000ea 	.word	0x200000ea
 800b4b8:	200000fa 	.word	0x200000fa

0800b4bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	75fb      	strb	r3, [r7, #23]
 800b4d2:	e027      	b.n	800b524 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	0f1b      	lsrs	r3, r3, #28
 800b4d8:	2b09      	cmp	r3, #9
 800b4da:	d80b      	bhi.n	800b4f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	0f1b      	lsrs	r3, r3, #28
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	440b      	add	r3, r1
 800b4ec:	3230      	adds	r2, #48	@ 0x30
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	e00a      	b.n	800b50a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	0f1b      	lsrs	r3, r3, #28
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	4619      	mov	r1, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	440b      	add	r3, r1
 800b504:	3237      	adds	r2, #55	@ 0x37
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	3301      	adds	r3, #1
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	4413      	add	r3, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	3301      	adds	r3, #1
 800b522:	75fb      	strb	r3, [r7, #23]
 800b524:	7dfa      	ldrb	r2, [r7, #23]
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d3d3      	bcc.n	800b4d4 <IntToUnicode+0x18>
  }
}
 800b52c:	bf00      	nop
 800b52e:	bf00      	nop
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	bc80      	pop	{r7}
 800b536:	4770      	bx	lr

0800b538 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800b542:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	bc80      	pop	{r7}
 800b54c:	4770      	bx	lr

0800b54e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800b54e:	b480      	push	{r7}
 800b550:	b085      	sub	sp, #20
 800b552:	af00      	add	r7, sp, #0
 800b554:	4603      	mov	r3, r0
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b562:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2220      	movs	r2, #32
 800b568:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800b56a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr

0800b576 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	4603      	mov	r3, r0
 800b57e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	bc80      	pop	{r7}
 800b58a:	4770      	bx	lr

0800b58c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	4603      	mov	r3, r0
 800b594:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	 memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	015b      	lsls	r3, r3, #5
 800b5bc:	4a06      	ldr	r2, [pc, #24]	@ (800b5d8 <STORAGE_Read_FS+0x34>)
 800b5be:	1899      	adds	r1, r3, r2
 800b5c0:	89bb      	ldrh	r3, [r7, #12]
 800b5c2:	015b      	lsls	r3, r3, #5
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	68b8      	ldr	r0, [r7, #8]
 800b5c8:	f000 fb70 	bl	800bcac <memcpy>
  return (USBD_OK);
 800b5cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20002178 	.word	0x20002178

0800b5dc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	015b      	lsls	r3, r3, #5
 800b5f4:	4a06      	ldr	r2, [pc, #24]	@ (800b610 <STORAGE_Write_FS+0x34>)
 800b5f6:	1898      	adds	r0, r3, r2
 800b5f8:	89bb      	ldrh	r3, [r7, #12]
 800b5fa:	015b      	lsls	r3, r3, #5
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	68b9      	ldr	r1, [r7, #8]
 800b600:	f000 fb54 	bl	800bcac <memcpy>

  return (USBD_OK);
 800b604:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20002178 	.word	0x20002178

0800b614 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800b618:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bc80      	pop	{r7}
 800b620:	4770      	bx	lr
	...

0800b624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a0d      	ldr	r2, [pc, #52]	@ (800b668 <HAL_PCD_MspInit+0x44>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d113      	bne.n	800b65e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b636:	4b0d      	ldr	r3, [pc, #52]	@ (800b66c <HAL_PCD_MspInit+0x48>)
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	4a0c      	ldr	r2, [pc, #48]	@ (800b66c <HAL_PCD_MspInit+0x48>)
 800b63c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b640:	61d3      	str	r3, [r2, #28]
 800b642:	4b0a      	ldr	r3, [pc, #40]	@ (800b66c <HAL_PCD_MspInit+0x48>)
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b64e:	2200      	movs	r2, #0
 800b650:	2105      	movs	r1, #5
 800b652:	2014      	movs	r0, #20
 800b654:	f7f5 f9b1 	bl	80009ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b658:	2014      	movs	r0, #20
 800b65a:	f7f5 f9ca 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	40005c00 	.word	0x40005c00
 800b66c:	40021000 	.word	0x40021000

0800b670 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	f7fc f8ec 	bl	8007864 <USBD_LL_SetupStage>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b6a6:	78fa      	ldrb	r2, [r7, #3]
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	00db      	lsls	r3, r3, #3
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	78fb      	ldrb	r3, [r7, #3]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f7fc f91e 	bl	80078fe <USBD_LL_DataOutStage>
}
 800b6c2:	bf00      	nop
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b6dc:	78fa      	ldrb	r2, [r7, #3]
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4413      	add	r3, r2
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	440b      	add	r3, r1
 800b6ea:	333c      	adds	r3, #60	@ 0x3c
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	f7fc f975 	bl	80079e0 <USBD_LL_DataInStage>
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fc fa85 	bl	8007c1c <USBD_LL_SOF>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b722:	2301      	movs	r3, #1
 800b724:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d001      	beq.n	800b732 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b72e:	f7f4 fe99 	bl	8000464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b738:	7bfa      	ldrb	r2, [r7, #15]
 800b73a:	4611      	mov	r1, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fc fa35 	bl	8007bac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fc f9ee 	bl	8007b2a <USBD_LL_Reset>
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b766:	4618      	mov	r0, r3
 800b768:	f7fc fa2f 	bl	8007bca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <HAL_PCD_SuspendCallback+0x30>)
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	4a03      	ldr	r2, [pc, #12]	@ (800b788 <HAL_PCD_SuspendCallback+0x30>)
 800b77a:	f043 0306 	orr.w	r3, r3, #6
 800b77e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	e000ed00 	.word	0xe000ed00

0800b78c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fc fa29 	bl	8007bf2 <USBD_LL_Resume>
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b7b0:	4a23      	ldr	r2, [pc, #140]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a21      	ldr	r2, [pc, #132]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7bc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b7c0:	4b1f      	ldr	r3, [pc, #124]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7c2:	4a20      	ldr	r2, [pc, #128]	@ (800b844 <USBD_LL_Init+0x9c>)
 800b7c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7d8:	4b19      	ldr	r3, [pc, #100]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7de:	4b18      	ldr	r3, [pc, #96]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7e4:	4816      	ldr	r0, [pc, #88]	@ (800b840 <USBD_LL_Init+0x98>)
 800b7e6:	f7f5 fbf3 	bl	8000fd0 <HAL_PCD_Init>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b7f0:	f7f4 fe38 	bl	8000464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b7fa:	2318      	movs	r3, #24
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	f7f7 f93e 	bl	8002a80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b80a:	2358      	movs	r3, #88	@ 0x58
 800b80c:	2200      	movs	r2, #0
 800b80e:	2180      	movs	r1, #128	@ 0x80
 800b810:	f7f7 f936 	bl	8002a80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b81a:	2398      	movs	r3, #152	@ 0x98
 800b81c:	2200      	movs	r2, #0
 800b81e:	2181      	movs	r1, #129	@ 0x81
 800b820:	f7f7 f92e 	bl	8002a80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b82a:	23d8      	movs	r3, #216	@ 0xd8
 800b82c:	2200      	movs	r2, #0
 800b82e:	2101      	movs	r1, #1
 800b830:	f7f7 f926 	bl	8002a80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20004178 	.word	0x20004178
 800b844:	40005c00 	.word	0x40005c00

0800b848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f5 fcb5 	bl	80011ce <HAL_PCD_Start>
 800b864:	4603      	mov	r3, r0
 800b866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 f96e 	bl	800bb4c <USBD_Get_USB_Status>
 800b870:	4603      	mov	r3, r0
 800b872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b874:	7bbb      	ldrb	r3, [r7, #14]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
 800b88a:	461a      	mov	r2, r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	70fb      	strb	r3, [r7, #3]
 800b890:	460b      	mov	r3, r1
 800b892:	70bb      	strb	r3, [r7, #2]
 800b894:	4613      	mov	r3, r2
 800b896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b8a6:	78bb      	ldrb	r3, [r7, #2]
 800b8a8:	883a      	ldrh	r2, [r7, #0]
 800b8aa:	78f9      	ldrb	r1, [r7, #3]
 800b8ac:	f7f5 fe0a 	bl	80014c4 <HAL_PCD_EP_Open>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f948 	bl	800bb4c <USBD_Get_USB_Status>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f5 fe48 	bl	800157e <HAL_PCD_EP_Close>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 f929 	bl	800bb4c <USBD_Get_USB_Status>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b922:	78fa      	ldrb	r2, [r7, #3]
 800b924:	4611      	mov	r1, r2
 800b926:	4618      	mov	r0, r3
 800b928:	f7f5 ffa4 	bl	8001874 <HAL_PCD_EP_Flush>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f90a 	bl	800bb4c <USBD_Get_USB_Status>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b960:	78fa      	ldrb	r2, [r7, #3]
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7f5 fed1 	bl	800170c <HAL_PCD_EP_SetStall>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f8eb 	bl	800bb4c <USBD_Get_USB_Status>
 800b976:	4603      	mov	r3, r0
 800b978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f5 ff12 	bl	80017cc <HAL_PCD_EP_ClrStall>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f8cc 	bl	800bb4c <USBD_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b085      	sub	sp, #20
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da0c      	bge.n	800b9f8 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e4:	68f9      	ldr	r1, [r7, #12]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3302      	adds	r3, #2
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	e00b      	b.n	800ba10 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9fe:	68f9      	ldr	r1, [r7, #12]
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	440b      	add	r3, r1
 800ba0a:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800ba0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bc80      	pop	{r7}
 800ba18:	4770      	bx	lr

0800ba1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba34:	78fa      	ldrb	r2, [r7, #3]
 800ba36:	4611      	mov	r1, r2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7f5 fd1e 	bl	800147a <HAL_PCD_SetAddress>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 f881 	bl	800bb4c <USBD_Get_USB_Status>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	607a      	str	r2, [r7, #4]
 800ba62:	461a      	mov	r2, r3
 800ba64:	460b      	mov	r3, r1
 800ba66:	72fb      	strb	r3, [r7, #11]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ba7a:	893b      	ldrh	r3, [r7, #8]
 800ba7c:	7af9      	ldrb	r1, [r7, #11]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	f7f5 fe0d 	bl	800169e <HAL_PCD_EP_Transmit>
 800ba84:	4603      	mov	r3, r0
 800ba86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 f85e 	bl	800bb4c <USBD_Get_USB_Status>
 800ba90:	4603      	mov	r3, r0
 800ba92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba94:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	461a      	mov	r2, r3
 800baaa:	460b      	mov	r3, r1
 800baac:	72fb      	strb	r3, [r7, #11]
 800baae:	4613      	mov	r3, r2
 800bab0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bac0:	893b      	ldrh	r3, [r7, #8]
 800bac2:	7af9      	ldrb	r1, [r7, #11]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	f7f5 fda2 	bl	800160e <HAL_PCD_EP_Receive>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f83b 	bl	800bb4c <USBD_Get_USB_Status>
 800bad6:	4603      	mov	r3, r0
 800bad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bada:	7dbb      	ldrb	r3, [r7, #22]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f5 fdb8 	bl	8001670 <HAL_PCD_EP_GetRxCount>
 800bb00:	4603      	mov	r3, r0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb14:	4b02      	ldr	r3, [pc, #8]	@ (800bb20 <USBD_static_malloc+0x14>)
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bc80      	pop	{r7}
 800bb1e:	4770      	bx	lr
 800bb20:	20004468 	.word	0x20004468

0800bb24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]

}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bc80      	pop	{r7}
 800bb34:	4770      	bx	lr

0800bb36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bb42:	bf00      	nop
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bc80      	pop	{r7}
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb5a:	79fb      	ldrb	r3, [r7, #7]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d817      	bhi.n	800bb90 <USBD_Get_USB_Status+0x44>
 800bb60:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <USBD_Get_USB_Status+0x1c>)
 800bb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb66:	bf00      	nop
 800bb68:	0800bb79 	.word	0x0800bb79
 800bb6c:	0800bb7f 	.word	0x0800bb7f
 800bb70:	0800bb85 	.word	0x0800bb85
 800bb74:	0800bb8b 	.word	0x0800bb8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7c:	e00b      	b.n	800bb96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb7e:	2302      	movs	r3, #2
 800bb80:	73fb      	strb	r3, [r7, #15]
    break;
 800bb82:	e008      	b.n	800bb96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb84:	2301      	movs	r3, #1
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	e005      	b.n	800bb96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8e:	e002      	b.n	800bb96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb90:	2302      	movs	r3, #2
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	bf00      	nop
  }
  return usb_status;
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bc80      	pop	{r7}
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop

0800bba4 <memset>:
 800bba4:	4603      	mov	r3, r0
 800bba6:	4402      	add	r2, r0
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d100      	bne.n	800bbae <memset+0xa>
 800bbac:	4770      	bx	lr
 800bbae:	f803 1b01 	strb.w	r1, [r3], #1
 800bbb2:	e7f9      	b.n	800bba8 <memset+0x4>

0800bbb4 <_reclaim_reent>:
 800bbb4:	4b29      	ldr	r3, [pc, #164]	@ (800bc5c <_reclaim_reent+0xa8>)
 800bbb6:	b570      	push	{r4, r5, r6, lr}
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4283      	cmp	r3, r0
 800bbbe:	d04b      	beq.n	800bc58 <_reclaim_reent+0xa4>
 800bbc0:	69c3      	ldr	r3, [r0, #28]
 800bbc2:	b1ab      	cbz	r3, 800bbf0 <_reclaim_reent+0x3c>
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	b16b      	cbz	r3, 800bbe4 <_reclaim_reent+0x30>
 800bbc8:	2500      	movs	r5, #0
 800bbca:	69e3      	ldr	r3, [r4, #28]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	5959      	ldr	r1, [r3, r5]
 800bbd0:	2900      	cmp	r1, #0
 800bbd2:	d13b      	bne.n	800bc4c <_reclaim_reent+0x98>
 800bbd4:	3504      	adds	r5, #4
 800bbd6:	2d80      	cmp	r5, #128	@ 0x80
 800bbd8:	d1f7      	bne.n	800bbca <_reclaim_reent+0x16>
 800bbda:	69e3      	ldr	r3, [r4, #28]
 800bbdc:	4620      	mov	r0, r4
 800bbde:	68d9      	ldr	r1, [r3, #12]
 800bbe0:	f000 f872 	bl	800bcc8 <_free_r>
 800bbe4:	69e3      	ldr	r3, [r4, #28]
 800bbe6:	6819      	ldr	r1, [r3, #0]
 800bbe8:	b111      	cbz	r1, 800bbf0 <_reclaim_reent+0x3c>
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f86c 	bl	800bcc8 <_free_r>
 800bbf0:	6961      	ldr	r1, [r4, #20]
 800bbf2:	b111      	cbz	r1, 800bbfa <_reclaim_reent+0x46>
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 f867 	bl	800bcc8 <_free_r>
 800bbfa:	69e1      	ldr	r1, [r4, #28]
 800bbfc:	b111      	cbz	r1, 800bc04 <_reclaim_reent+0x50>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 f862 	bl	800bcc8 <_free_r>
 800bc04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bc06:	b111      	cbz	r1, 800bc0e <_reclaim_reent+0x5a>
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f000 f85d 	bl	800bcc8 <_free_r>
 800bc0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc10:	b111      	cbz	r1, 800bc18 <_reclaim_reent+0x64>
 800bc12:	4620      	mov	r0, r4
 800bc14:	f000 f858 	bl	800bcc8 <_free_r>
 800bc18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bc1a:	b111      	cbz	r1, 800bc22 <_reclaim_reent+0x6e>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f000 f853 	bl	800bcc8 <_free_r>
 800bc22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bc24:	b111      	cbz	r1, 800bc2c <_reclaim_reent+0x78>
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f84e 	bl	800bcc8 <_free_r>
 800bc2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bc2e:	b111      	cbz	r1, 800bc36 <_reclaim_reent+0x82>
 800bc30:	4620      	mov	r0, r4
 800bc32:	f000 f849 	bl	800bcc8 <_free_r>
 800bc36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bc38:	b111      	cbz	r1, 800bc40 <_reclaim_reent+0x8c>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 f844 	bl	800bcc8 <_free_r>
 800bc40:	6a23      	ldr	r3, [r4, #32]
 800bc42:	b14b      	cbz	r3, 800bc58 <_reclaim_reent+0xa4>
 800bc44:	4620      	mov	r0, r4
 800bc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc4a:	4718      	bx	r3
 800bc4c:	680e      	ldr	r6, [r1, #0]
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 f83a 	bl	800bcc8 <_free_r>
 800bc54:	4631      	mov	r1, r6
 800bc56:	e7bb      	b.n	800bbd0 <_reclaim_reent+0x1c>
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000124 	.word	0x20000124

0800bc60 <__libc_init_array>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	2600      	movs	r6, #0
 800bc64:	4d0c      	ldr	r5, [pc, #48]	@ (800bc98 <__libc_init_array+0x38>)
 800bc66:	4c0d      	ldr	r4, [pc, #52]	@ (800bc9c <__libc_init_array+0x3c>)
 800bc68:	1b64      	subs	r4, r4, r5
 800bc6a:	10a4      	asrs	r4, r4, #2
 800bc6c:	42a6      	cmp	r6, r4
 800bc6e:	d109      	bne.n	800bc84 <__libc_init_array+0x24>
 800bc70:	f000 f87e 	bl	800bd70 <_init>
 800bc74:	2600      	movs	r6, #0
 800bc76:	4d0a      	ldr	r5, [pc, #40]	@ (800bca0 <__libc_init_array+0x40>)
 800bc78:	4c0a      	ldr	r4, [pc, #40]	@ (800bca4 <__libc_init_array+0x44>)
 800bc7a:	1b64      	subs	r4, r4, r5
 800bc7c:	10a4      	asrs	r4, r4, #2
 800bc7e:	42a6      	cmp	r6, r4
 800bc80:	d105      	bne.n	800bc8e <__libc_init_array+0x2e>
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc88:	4798      	blx	r3
 800bc8a:	3601      	adds	r6, #1
 800bc8c:	e7ee      	b.n	800bc6c <__libc_init_array+0xc>
 800bc8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc92:	4798      	blx	r3
 800bc94:	3601      	adds	r6, #1
 800bc96:	e7f2      	b.n	800bc7e <__libc_init_array+0x1e>
 800bc98:	0800be70 	.word	0x0800be70
 800bc9c:	0800be70 	.word	0x0800be70
 800bca0:	0800be70 	.word	0x0800be70
 800bca4:	0800be74 	.word	0x0800be74

0800bca8 <__retarget_lock_acquire_recursive>:
 800bca8:	4770      	bx	lr

0800bcaa <__retarget_lock_release_recursive>:
 800bcaa:	4770      	bx	lr

0800bcac <memcpy>:
 800bcac:	440a      	add	r2, r1
 800bcae:	4291      	cmp	r1, r2
 800bcb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bcb4:	d100      	bne.n	800bcb8 <memcpy+0xc>
 800bcb6:	4770      	bx	lr
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcbe:	4291      	cmp	r1, r2
 800bcc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc4:	d1f9      	bne.n	800bcba <memcpy+0xe>
 800bcc6:	bd10      	pop	{r4, pc}

0800bcc8 <_free_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4605      	mov	r5, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d040      	beq.n	800bd52 <_free_r+0x8a>
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f0c      	subs	r4, r1, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	18e4      	addlt	r4, r4, r3
 800bcdc:	f000 f83c 	bl	800bd58 <__malloc_lock>
 800bce0:	4a1c      	ldr	r2, [pc, #112]	@ (800bd54 <_free_r+0x8c>)
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	b933      	cbnz	r3, 800bcf4 <_free_r+0x2c>
 800bce6:	6063      	str	r3, [r4, #4]
 800bce8:	6014      	str	r4, [r2, #0]
 800bcea:	4628      	mov	r0, r5
 800bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf0:	f000 b838 	b.w	800bd64 <__malloc_unlock>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d908      	bls.n	800bd0a <_free_r+0x42>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	1821      	adds	r1, r4, r0
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf01      	itttt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	e7ed      	b.n	800bce6 <_free_r+0x1e>
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b10b      	cbz	r3, 800bd14 <_free_r+0x4c>
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	d9fa      	bls.n	800bd0a <_free_r+0x42>
 800bd14:	6811      	ldr	r1, [r2, #0]
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d10b      	bne.n	800bd34 <_free_r+0x6c>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	4401      	add	r1, r0
 800bd20:	1850      	adds	r0, r2, r1
 800bd22:	4283      	cmp	r3, r0
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	d1e0      	bne.n	800bcea <_free_r+0x22>
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4408      	add	r0, r1
 800bd2e:	6010      	str	r0, [r2, #0]
 800bd30:	6053      	str	r3, [r2, #4]
 800bd32:	e7da      	b.n	800bcea <_free_r+0x22>
 800bd34:	d902      	bls.n	800bd3c <_free_r+0x74>
 800bd36:	230c      	movs	r3, #12
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	e7d6      	b.n	800bcea <_free_r+0x22>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf01      	itttt	eq
 800bd44:	6819      	ldreq	r1, [r3, #0]
 800bd46:	685b      	ldreq	r3, [r3, #4]
 800bd48:	1809      	addeq	r1, r1, r0
 800bd4a:	6021      	streq	r1, [r4, #0]
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	6054      	str	r4, [r2, #4]
 800bd50:	e7cb      	b.n	800bcea <_free_r+0x22>
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20004814 	.word	0x20004814

0800bd58 <__malloc_lock>:
 800bd58:	4801      	ldr	r0, [pc, #4]	@ (800bd60 <__malloc_lock+0x8>)
 800bd5a:	f7ff bfa5 	b.w	800bca8 <__retarget_lock_acquire_recursive>
 800bd5e:	bf00      	nop
 800bd60:	20004810 	.word	0x20004810

0800bd64 <__malloc_unlock>:
 800bd64:	4801      	ldr	r0, [pc, #4]	@ (800bd6c <__malloc_unlock+0x8>)
 800bd66:	f7ff bfa0 	b.w	800bcaa <__retarget_lock_release_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	20004810 	.word	0x20004810

0800bd70 <_init>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr

0800bd7c <_fini>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	bf00      	nop
 800bd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd82:	bc08      	pop	{r3}
 800bd84:	469e      	mov	lr, r3
 800bd86:	4770      	bx	lr
